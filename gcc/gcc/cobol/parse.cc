/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* First part of user prologue.  */
#line 281 "parse.y"

#include <fstream>  // Before cobol-system because it uses poisoned functions
#include "cobol-system.h"
#include "coretypes.h"
#include "tree.h"
#undef cobol_dialect
#undef cobol_exceptions
#undef yy_flex_debug
#include "cdfval.h"
#include "../../libgcobol/ec.h"
#include "../../libgcobol/common-defs.h"
#include "util.h"
#include "cbldiag.h"
#include "symbols.h"
#include "inspect.h"
#include "../../libgcobol/io.h"
#include "genapi.h"
#include "../../libgcobol/exceptl.h"
#include "exceptg.h"
#include "parse_ante.h"

#line 93 "parse.cc"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "parse.h"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENTIFICATION_DIV = 3,         /* "IDENTIFICATION DIVISION"  */
  YYSYMBOL_ENVIRONMENT_DIV = 4,            /* "ENVIRONMENT DIVISION"  */
  YYSYMBOL_PROCEDURE_DIV = 5,              /* "PROCEDURE DIVISION"  */
  YYSYMBOL_DATA_DIV = 6,                   /* "DATA DIVISION"  */
  YYSYMBOL_FILE_SECT = 7,                  /* "FILE SECTION"  */
  YYSYMBOL_INPUT_OUTPUT_SECT = 8,          /* "INPUT-OUTPUT SECTION"  */
  YYSYMBOL_LINKAGE_SECT = 9,               /* "LINKAGE SECTION"  */
  YYSYMBOL_LOCAL_STORAGE_SECT = 10,        /* "LOCAL-STORAGE SECTION"  */
  YYSYMBOL_WORKING_STORAGE_SECT = 11,      /* "WORKING-STORAGE SECTION"  */
  YYSYMBOL_OBJECT_COMPUTER = 12,           /* "OBJECT COMPUTER"  */
  YYSYMBOL_DISPLAY_OF = 13,                /* "DISPLAY OF"  */
  YYSYMBOL_END_FUNCTION = 14,              /* "END FUNCTION"  */
  YYSYMBOL_END_PROGRAM = 15,               /* "END PROGRAM"  */
  YYSYMBOL_END_SUBPROGRAM = 16,            /* "END PROGRAM <contained program>"  */
  YYSYMBOL_JUSTIFIED = 17,                 /* JUSTIFIED  */
  YYSYMBOL_RETURNING = 18,                 /* RETURNING  */
  YYSYMBOL_NO_CONDITION = 19,              /* "invalid token"  */
  YYSYMBOL_ALNUM = 20,                     /* ALNUM  */
  YYSYMBOL_ALPHED = 21,                    /* ALPHED  */
  YYSYMBOL_ERROR = 22,                     /* ERROR  */
  YYSYMBOL_EXCEPTION = 23,                 /* EXCEPTION  */
  YYSYMBOL_SIZE_ERROR = 24,                /* "SIZE ERROR"  */
  YYSYMBOL_EXCEPTION_NAME = 25,            /* "EXCEPTION NAME"  */
  YYSYMBOL_LEVEL = 26,                     /* LEVEL  */
  YYSYMBOL_LEVEL66 = 27,                   /* "66"  */
  YYSYMBOL_LEVEL78 = 28,                   /* "78"  */
  YYSYMBOL_LEVEL88 = 29,                   /* "88"  */
  YYSYMBOL_CLASS_NAME = 30,                /* "class name"  */
  YYSYMBOL_NAME = 31,                      /* NAME  */
  YYSYMBOL_NAME88 = 32,                    /* "Level 88 NAME"  */
  YYSYMBOL_NUME = 33,                      /* "Name"  */
  YYSYMBOL_NUMED = 34,                     /* "NUMERIC-EDITED picture"  */
  YYSYMBOL_NUMED_CR = 35,                  /* "NUMERIC-EDITED CR picture"  */
  YYSYMBOL_NUMED_DB = 36,                  /* "NUMERIC-EDITED DB picture"  */
  YYSYMBOL_NINEDOT = 37,                   /* NINEDOT  */
  YYSYMBOL_NINES = 38,                     /* NINES  */
  YYSYMBOL_NINEV = 39,                     /* NINEV  */
  YYSYMBOL_PIC_P = 40,                     /* PIC_P  */
  YYSYMBOL_SPACES = 41,                    /* SPACES  */
  YYSYMBOL_LITERAL = 42,                   /* LITERAL  */
  YYSYMBOL_END = 43,                       /* END  */
  YYSYMBOL_EOP = 44,                       /* EOP  */
  YYSYMBOL_FILENAME = 45,                  /* FILENAME  */
  YYSYMBOL_INVALID = 46,                   /* INVALID  */
  YYSYMBOL_NUMBER = 47,                    /* NUMBER  */
  YYSYMBOL_NEGATIVE = 48,                  /* NEGATIVE  */
  YYSYMBOL_NUMSTR = 49,                    /* "numeric literal"  */
  YYSYMBOL_OVERFLOW_kw = 50,               /* "OVERFLOW"  */
  YYSYMBOL_COMPUTATIONAL = 51,             /* COMPUTATIONAL  */
  YYSYMBOL_PERFORM = 52,                   /* PERFORM  */
  YYSYMBOL_BACKWARD = 53,                  /* BACKWARD  */
  YYSYMBOL_POSITIVE = 54,                  /* POSITIVE  */
  YYSYMBOL_POINTER = 55,                   /* POINTER  */
  YYSYMBOL_SECTION = 56,                   /* SECTION  */
  YYSYMBOL_STANDARD_ALPHABET = 57,         /* "STANDARD ALPHABET"  */
  YYSYMBOL_SWITCH = 58,                    /* SWITCH  */
  YYSYMBOL_UPSI = 59,                      /* UPSI  */
  YYSYMBOL_ZERO = 60,                      /* ZERO  */
  YYSYMBOL_SYSIN = 61,                     /* SYSIN  */
  YYSYMBOL_SYSIPT = 62,                    /* SYSIPT  */
  YYSYMBOL_SYSOUT = 63,                    /* SYSOUT  */
  YYSYMBOL_SYSLIST = 64,                   /* SYSLIST  */
  YYSYMBOL_SYSLST = 65,                    /* SYSLST  */
  YYSYMBOL_SYSPUNCH = 66,                  /* SYSPUNCH  */
  YYSYMBOL_SYSPCH = 67,                    /* SYSPCH  */
  YYSYMBOL_CONSOLE = 68,                   /* CONSOLE  */
  YYSYMBOL_C01 = 69,                       /* C01  */
  YYSYMBOL_C02 = 70,                       /* C02  */
  YYSYMBOL_C03 = 71,                       /* C03  */
  YYSYMBOL_C04 = 72,                       /* C04  */
  YYSYMBOL_C05 = 73,                       /* C05  */
  YYSYMBOL_C06 = 74,                       /* C06  */
  YYSYMBOL_C07 = 75,                       /* C07  */
  YYSYMBOL_C08 = 76,                       /* C08  */
  YYSYMBOL_C09 = 77,                       /* C09  */
  YYSYMBOL_C10 = 78,                       /* C10  */
  YYSYMBOL_C11 = 79,                       /* C11  */
  YYSYMBOL_C12 = 80,                       /* C12  */
  YYSYMBOL_CSP = 81,                       /* CSP  */
  YYSYMBOL_S01 = 82,                       /* S01  */
  YYSYMBOL_S02 = 83,                       /* S02  */
  YYSYMBOL_S03 = 84,                       /* S03  */
  YYSYMBOL_S04 = 85,                       /* S04  */
  YYSYMBOL_S05 = 86,                       /* S05  */
  YYSYMBOL_AFP_5A = 87,                    /* "AFP 5A"  */
  YYSYMBOL_STDIN = 88,                     /* STDIN  */
  YYSYMBOL_STDOUT = 89,                    /* STDOUT  */
  YYSYMBOL_STDERR = 90,                    /* STDERR  */
  YYSYMBOL_LIST = 91,                      /* LIST  */
  YYSYMBOL_MAP = 92,                       /* MAP  */
  YYSYMBOL_NOLIST = 93,                    /* NOLIST  */
  YYSYMBOL_NOMAP = 94,                     /* NOMAP  */
  YYSYMBOL_NOSOURCE = 95,                  /* NOSOURCE  */
  YYSYMBOL_MIGHT_BE = 96,                  /* "IS or IS NOT"  */
  YYSYMBOL_FUNCTION_UDF = 97,              /* "UDF name"  */
  YYSYMBOL_FUNCTION_UDF_0 = 98,            /* "UDF"  */
  YYSYMBOL_DATE_FMT = 99,                  /* "date format"  */
  YYSYMBOL_TIME_FMT = 100,                 /* "time format"  */
  YYSYMBOL_DATETIME_FMT = 101,             /* "datetime format"  */
  YYSYMBOL_BASIS = 102,                    /* BASIS  */
  YYSYMBOL_CBL = 103,                      /* CBL  */
  YYSYMBOL_CONSTANT = 104,                 /* CONSTANT  */
  YYSYMBOL_COPY = 105,                     /* COPY  */
  YYSYMBOL_DEFINED = 106,                  /* DEFINED  */
  YYSYMBOL_ENTER = 107,                    /* ENTER  */
  YYSYMBOL_FEATURE = 108,                  /* FEATURE  */
  YYSYMBOL_INSERTT = 109,                  /* INSERTT  */
  YYSYMBOL_LSUB = 110,                     /* "("  */
  YYSYMBOL_PARAMETER_kw = 111,             /* "PARAMETER"  */
  YYSYMBOL_OVERRIDE = 112,                 /* OVERRIDE  */
  YYSYMBOL_READY = 113,                    /* READY  */
  YYSYMBOL_RESET = 114,                    /* RESET  */
  YYSYMBOL_RSUB = 115,                     /* ")"  */
  YYSYMBOL_SERVICE_RELOAD = 116,           /* "SERVICE RELOAD"  */
  YYSYMBOL_STAR_CBL = 117,                 /* "*CBL"  */
  YYSYMBOL_SUBSCRIPT = 118,                /* SUBSCRIPT  */
  YYSYMBOL_SUPPRESS = 119,                 /* SUPPRESS  */
  YYSYMBOL_TITLE = 120,                    /* TITLE  */
  YYSYMBOL_TRACE = 121,                    /* TRACE  */
  YYSYMBOL_USE = 122,                      /* USE  */
  YYSYMBOL_COBOL_WORDS = 123,              /* ">>COBOL-WORDS"  */
  YYSYMBOL_EQUATE = 124,                   /* EQUATE  */
  YYSYMBOL_UNDEFINE = 125,                 /* UNDEFINE  */
  YYSYMBOL_CDF_DEFINE = 126,               /* ">>DEFINE"  */
  YYSYMBOL_CDF_DISPLAY = 127,              /* ">>DISPLAY"  */
  YYSYMBOL_CDF_IF = 128,                   /* ">>IF"  */
  YYSYMBOL_CDF_ELSE = 129,                 /* ">>ELSE"  */
  YYSYMBOL_CDF_END_IF = 130,               /* ">>END-IF"  */
  YYSYMBOL_CDF_EVALUATE = 131,             /* ">>EVALUATE"  */
  YYSYMBOL_CDF_WHEN = 132,                 /* ">>WHEN"  */
  YYSYMBOL_CDF_END_EVALUATE = 133,         /* ">>END-EVALUATE"  */
  YYSYMBOL_CALL_COBOL = 134,               /* "CALL"  */
  YYSYMBOL_CALL_VERBATIM = 135,            /* "CALL (as C)"  */
  YYSYMBOL_IF = 136,                       /* IF  */
  YYSYMBOL_THEN = 137,                     /* THEN  */
  YYSYMBOL_ELSE = 138,                     /* ELSE  */
  YYSYMBOL_SENTENCE = 139,                 /* SENTENCE  */
  YYSYMBOL_ACCEPT = 140,                   /* ACCEPT  */
  YYSYMBOL_ADD = 141,                      /* ADD  */
  YYSYMBOL_ALTER = 142,                    /* ALTER  */
  YYSYMBOL_CALL = 143,                     /* CALL  */
  YYSYMBOL_CANCEL = 144,                   /* CANCEL  */
  YYSYMBOL_CLOSE = 145,                    /* CLOSE  */
  YYSYMBOL_COMPUTE = 146,                  /* COMPUTE  */
  YYSYMBOL_CONTINUE = 147,                 /* CONTINUE  */
  YYSYMBOL_DELETE = 148,                   /* DELETE  */
  YYSYMBOL_DISPLAY = 149,                  /* DISPLAY  */
  YYSYMBOL_DIVIDE = 150,                   /* DIVIDE  */
  YYSYMBOL_EVALUATE = 151,                 /* EVALUATE  */
  YYSYMBOL_EXIT = 152,                     /* EXIT  */
  YYSYMBOL_FILLER_kw = 153,                /* "FILLER"  */
  YYSYMBOL_GOBACK = 154,                   /* GOBACK  */
  YYSYMBOL_GOTO = 155,                     /* GOTO  */
  YYSYMBOL_INITIALIZE = 156,               /* INITIALIZE  */
  YYSYMBOL_INSPECT = 157,                  /* INSPECT  */
  YYSYMBOL_MERGE = 158,                    /* MERGE  */
  YYSYMBOL_MOVE = 159,                     /* MOVE  */
  YYSYMBOL_MULTIPLY = 160,                 /* MULTIPLY  */
  YYSYMBOL_OPEN = 161,                     /* OPEN  */
  YYSYMBOL_PARAGRAPH = 162,                /* PARAGRAPH  */
  YYSYMBOL_READ = 163,                     /* READ  */
  YYSYMBOL_RELEASE = 164,                  /* RELEASE  */
  YYSYMBOL_RETURN = 165,                   /* RETURN  */
  YYSYMBOL_REWRITE = 166,                  /* REWRITE  */
  YYSYMBOL_SEARCH = 167,                   /* SEARCH  */
  YYSYMBOL_SET = 168,                      /* SET  */
  YYSYMBOL_SELECT = 169,                   /* SELECT  */
  YYSYMBOL_SORT = 170,                     /* SORT  */
  YYSYMBOL_SORT_MERGE = 171,               /* "SORT-MERGE"  */
  YYSYMBOL_STRING_kw = 172,                /* "STRING"  */
  YYSYMBOL_STOP = 173,                     /* STOP  */
  YYSYMBOL_SUBTRACT = 174,                 /* SUBTRACT  */
  YYSYMBOL_START = 175,                    /* START  */
  YYSYMBOL_UNSTRING = 176,                 /* UNSTRING  */
  YYSYMBOL_WRITE = 177,                    /* WRITE  */
  YYSYMBOL_WHEN = 178,                     /* WHEN  */
  YYSYMBOL_ABS = 179,                      /* ABS  */
  YYSYMBOL_ACCESS = 180,                   /* ACCESS  */
  YYSYMBOL_ACOS = 181,                     /* ACOS  */
  YYSYMBOL_ACTUAL = 182,                   /* ACTUAL  */
  YYSYMBOL_ADVANCING = 183,                /* ADVANCING  */
  YYSYMBOL_AFTER = 184,                    /* AFTER  */
  YYSYMBOL_ALL = 185,                      /* ALL  */
  YYSYMBOL_ALLOCATE = 186,                 /* ALLOCATE  */
  YYSYMBOL_ALPHABET = 187,                 /* ALPHABET  */
  YYSYMBOL_ALPHABETIC = 188,               /* ALPHABETIC  */
  YYSYMBOL_ALPHABETIC_LOWER = 189,         /* "ALPHABETIC-LOWER"  */
  YYSYMBOL_ALPHABETIC_UPPER = 190,         /* "ALPHABETIC-UPPER"  */
  YYSYMBOL_ALPHANUMERIC = 191,             /* ALPHANUMERIC  */
  YYSYMBOL_ALPHANUMERIC_EDITED = 192,      /* "ALPHANUMERIC-EDITED"  */
  YYSYMBOL_ALSO = 193,                     /* ALSO  */
  YYSYMBOL_ALTERNATE = 194,                /* ALTERNATE  */
  YYSYMBOL_ANNUITY = 195,                  /* ANNUITY  */
  YYSYMBOL_ANUM = 196,                     /* ANUM  */
  YYSYMBOL_ANY = 197,                      /* ANY  */
  YYSYMBOL_ANYCASE = 198,                  /* ANYCASE  */
  YYSYMBOL_APPLY = 199,                    /* APPLY  */
  YYSYMBOL_ARE = 200,                      /* ARE  */
  YYSYMBOL_AREA = 201,                     /* AREA  */
  YYSYMBOL_AREAS = 202,                    /* AREAS  */
  YYSYMBOL_AS = 203,                       /* AS  */
  YYSYMBOL_ASCENDING = 204,                /* ASCENDING  */
  YYSYMBOL_ACTIVATING = 205,               /* ACTIVATING  */
  YYSYMBOL_ASIN = 206,                     /* ASIN  */
  YYSYMBOL_ASSIGN = 207,                   /* ASSIGN  */
  YYSYMBOL_AT = 208,                       /* AT  */
  YYSYMBOL_ATAN = 209,                     /* ATAN  */
  YYSYMBOL_BASED = 210,                    /* BASED  */
  YYSYMBOL_BASECONVERT = 211,              /* BASECONVERT  */
  YYSYMBOL_BEFORE = 212,                   /* BEFORE  */
  YYSYMBOL_BINARY = 213,                   /* BINARY  */
  YYSYMBOL_BIT = 214,                      /* BIT  */
  YYSYMBOL_BIT_OF = 215,                   /* "BIT-OF"  */
  YYSYMBOL_BIT_TO_CHAR = 216,              /* "BIT-TO-CHAR"  */
  YYSYMBOL_BLANK = 217,                    /* BLANK  */
  YYSYMBOL_BLOCK_kw = 218,                 /* BLOCK_kw  */
  YYSYMBOL_BOOLEAN_OF_INTEGER = 219,       /* "BOOLEAN-OF-INTEGER"  */
  YYSYMBOL_BOTTOM = 220,                   /* BOTTOM  */
  YYSYMBOL_BY = 221,                       /* BY  */
  YYSYMBOL_BYTE = 222,                     /* BYTE  */
  YYSYMBOL_BYTE_LENGTH = 223,              /* "BYTE-LENGTH"  */
  YYSYMBOL_CF = 224,                       /* CF  */
  YYSYMBOL_CH = 225,                       /* CH  */
  YYSYMBOL_CHANGED = 226,                  /* CHANGED  */
  YYSYMBOL_CHAR = 227,                     /* CHAR  */
  YYSYMBOL_CHAR_NATIONAL = 228,            /* "CHAR-NATIONAL"  */
  YYSYMBOL_CHARACTER = 229,                /* CHARACTER  */
  YYSYMBOL_CHARACTERS = 230,               /* CHARACTERS  */
  YYSYMBOL_CHECKING = 231,                 /* CHECKING  */
  YYSYMBOL_CLASS = 232,                    /* CLASS  */
  YYSYMBOL_COBOL = 233,                    /* COBOL  */
  YYSYMBOL_CODE = 234,                     /* CODE  */
  YYSYMBOL_CODESET = 235,                  /* CODESET  */
  YYSYMBOL_COLLATING = 236,                /* COLLATING  */
  YYSYMBOL_COLUMN = 237,                   /* COLUMN  */
  YYSYMBOL_COMBINED_DATETIME = 238,        /* "COMBINED-DATETIME"  */
  YYSYMBOL_COMMA = 239,                    /* COMMA  */
  YYSYMBOL_COMMAND_LINE = 240,             /* "COMMAND-LINE"  */
  YYSYMBOL_COMMAND_LINE_COUNT = 241,       /* "COMMAND-LINE-COUNT"  */
  YYSYMBOL_COMMIT = 242,                   /* COMMIT  */
  YYSYMBOL_COMMON = 243,                   /* COMMON  */
  YYSYMBOL_CONCAT = 244,                   /* CONCAT  */
  YYSYMBOL_CONDITION = 245,                /* CONDITION  */
  YYSYMBOL_CONFIGURATION_SECT = 246,       /* "CONFIGURATION SECTION"  */
  YYSYMBOL_CONTAINS = 247,                 /* CONTAINS  */
  YYSYMBOL_CONTENT = 248,                  /* CONTENT  */
  YYSYMBOL_CONTROL = 249,                  /* CONTROL  */
  YYSYMBOL_CONTROLS = 250,                 /* CONTROLS  */
  YYSYMBOL_CONVERT = 251,                  /* CONVERT  */
  YYSYMBOL_CONVERTING = 252,               /* CONVERTING  */
  YYSYMBOL_CORRESPONDING = 253,            /* CORRESPONDING  */
  YYSYMBOL_COS = 254,                      /* COS  */
  YYSYMBOL_COUNT = 255,                    /* COUNT  */
  YYSYMBOL_CURRENCY = 256,                 /* CURRENCY  */
  YYSYMBOL_CURRENT = 257,                  /* CURRENT  */
  YYSYMBOL_CURRENT_DATE = 258,             /* CURRENT_DATE  */
  YYSYMBOL_DATA = 259,                     /* DATA  */
  YYSYMBOL_DATE = 260,                     /* DATE  */
  YYSYMBOL_DATE_COMPILED = 261,            /* DATE_COMPILED  */
  YYSYMBOL_DATE_OF_INTEGER = 262,          /* "DATE-OF-INTEGER"  */
  YYSYMBOL_DATE_TO_YYYYMMDD = 263,         /* "DATE-TO-YYYYMMDD"  */
  YYSYMBOL_DATE_WRITTEN = 264,             /* "DATE-WRITTEN"  */
  YYSYMBOL_DAY = 265,                      /* DAY  */
  YYSYMBOL_DAY_OF_INTEGER = 266,           /* "DAY-OF-INTEGER"  */
  YYSYMBOL_DAY_OF_WEEK = 267,              /* "DAY-OF-WEEK"  */
  YYSYMBOL_DAY_TO_YYYYDDD = 268,           /* "DAY-TO-YYYYDDD"  */
  YYSYMBOL_DBCS = 269,                     /* DBCS  */
  YYSYMBOL_DE = 270,                       /* DE  */
  YYSYMBOL_DEBUGGING = 271,                /* DEBUGGING  */
  YYSYMBOL_DECIMAL_POINT = 272,            /* DECIMAL_POINT  */
  YYSYMBOL_DECLARATIVES = 273,             /* DECLARATIVES  */
  YYSYMBOL_DEFAULT = 274,                  /* DEFAULT  */
  YYSYMBOL_DELIMITED = 275,                /* DELIMITED  */
  YYSYMBOL_DELIMITER = 276,                /* DELIMITER  */
  YYSYMBOL_DEPENDING = 277,                /* DEPENDING  */
  YYSYMBOL_DESCENDING = 278,               /* DESCENDING  */
  YYSYMBOL_DETAIL = 279,                   /* DETAIL  */
  YYSYMBOL_DIRECT = 280,                   /* DIRECT  */
  YYSYMBOL_DIRECT_ACCESS = 281,            /* "DIRECT-ACCESS"  */
  YYSYMBOL_DOWN = 282,                     /* DOWN  */
  YYSYMBOL_DUPLICATES = 283,               /* DUPLICATES  */
  YYSYMBOL_DYNAMIC = 284,                  /* DYNAMIC  */
  YYSYMBOL_E = 285,                        /* E  */
  YYSYMBOL_EBCDIC = 286,                   /* EBCDIC  */
  YYSYMBOL_EC = 287,                       /* EC  */
  YYSYMBOL_EGCS = 288,                     /* EGCS  */
  YYSYMBOL_ENTRY = 289,                    /* ENTRY  */
  YYSYMBOL_ENVIRONMENT = 290,              /* ENVIRONMENT  */
  YYSYMBOL_EQUAL = 291,                    /* EQUAL  */
  YYSYMBOL_EVERY = 292,                    /* EVERY  */
  YYSYMBOL_EXAMINE = 293,                  /* EXAMINE  */
  YYSYMBOL_EXHIBIT = 294,                  /* EXHIBIT  */
  YYSYMBOL_EXP = 295,                      /* EXP  */
  YYSYMBOL_EXP10 = 296,                    /* EXP10  */
  YYSYMBOL_EXTEND = 297,                   /* EXTEND  */
  YYSYMBOL_EXTERNAL = 298,                 /* EXTERNAL  */
  YYSYMBOL_EXCEPTION_FILE = 299,           /* "EXCEPTION-FILE"  */
  YYSYMBOL_EXCEPTION_FILE_N = 300,         /* "EXCEPTION-FILE-N"  */
  YYSYMBOL_EXCEPTION_LOCATION = 301,       /* "EXCEPTION-LOCATION"  */
  YYSYMBOL_EXCEPTION_LOCATION_N = 302,     /* "EXCEPTION-LOCATION-N"  */
  YYSYMBOL_EXCEPTION_STATEMENT = 303,      /* "EXCEPTION-STATEMENT"  */
  YYSYMBOL_EXCEPTION_STATUS = 304,         /* "EXCEPTION-STATUS"  */
  YYSYMBOL_FACTORIAL = 305,                /* FACTORIAL  */
  YYSYMBOL_FALSE_kw = 306,                 /* "False"  */
  YYSYMBOL_FD = 307,                       /* FD  */
  YYSYMBOL_FILE_CONTROL = 308,             /* "FILE-CONTROL"  */
  YYSYMBOL_FILE_KW = 309,                  /* "File"  */
  YYSYMBOL_FILE_LIMIT = 310,               /* "FILE-LIMIT"  */
  YYSYMBOL_FINAL = 311,                    /* FINAL  */
  YYSYMBOL_FINALLY = 312,                  /* FINALLY  */
  YYSYMBOL_FIND_STRING = 313,              /* "FIND-STRING"  */
  YYSYMBOL_FIRST = 314,                    /* FIRST  */
  YYSYMBOL_FIXED = 315,                    /* FIXED  */
  YYSYMBOL_FOOTING = 316,                  /* FOOTING  */
  YYSYMBOL_FOR = 317,                      /* FOR  */
  YYSYMBOL_FORMATTED_CURRENT_DATE = 318,   /* "FORMATTED-CURRENT-DATE"  */
  YYSYMBOL_FORMATTED_DATE = 319,           /* "FORMATTED-DATE"  */
  YYSYMBOL_FORMATTED_DATETIME = 320,       /* "FORMATTED-DATETIME"  */
  YYSYMBOL_FORMATTED_TIME = 321,           /* "FORMATTED-TIME"  */
  YYSYMBOL_FORM_OVERFLOW = 322,            /* "FORM-OVERFLOW"  */
  YYSYMBOL_FREE = 323,                     /* FREE  */
  YYSYMBOL_FRACTION_PART = 324,            /* "FRACTION-PART"  */
  YYSYMBOL_FROM = 325,                     /* FROM  */
  YYSYMBOL_FUNCTION = 326,                 /* FUNCTION  */
  YYSYMBOL_GENERATE = 327,                 /* GENERATE  */
  YYSYMBOL_GIVING = 328,                   /* GIVING  */
  YYSYMBOL_GLOBAL = 329,                   /* GLOBAL  */
  YYSYMBOL_GO = 330,                       /* GO  */
  YYSYMBOL_GROUP = 331,                    /* GROUP  */
  YYSYMBOL_HEADING = 332,                  /* HEADING  */
  YYSYMBOL_HEX = 333,                      /* HEX  */
  YYSYMBOL_HEX_OF = 334,                   /* "HEX-OF"  */
  YYSYMBOL_HEX_TO_CHAR = 335,              /* "HEX-TO-CHAR"  */
  YYSYMBOL_HIGH_VALUES = 336,              /* "HIGH-VALUES"  */
  YYSYMBOL_HIGHEST_ALGEBRAIC = 337,        /* "HIGHEST-ALGEBRAIC"  */
  YYSYMBOL_HOLD = 338,                     /* HOLD  */
  YYSYMBOL_IBM_360 = 339,                  /* IBM_360  */
  YYSYMBOL_IN = 340,                       /* IN  */
  YYSYMBOL_INCLUDE = 341,                  /* INCLUDE  */
  YYSYMBOL_INDEX = 342,                    /* INDEX  */
  YYSYMBOL_INDEXED = 343,                  /* INDEXED  */
  YYSYMBOL_INDICATE = 344,                 /* INDICATE  */
  YYSYMBOL_INITIAL_kw = 345,               /* "INITIAL"  */
  YYSYMBOL_INITIATE = 346,                 /* INITIATE  */
  YYSYMBOL_INPUT = 347,                    /* INPUT  */
  YYSYMBOL_INSTALLATION = 348,             /* INSTALLATION  */
  YYSYMBOL_INTERFACE = 349,                /* INTERFACE  */
  YYSYMBOL_INTEGER = 350,                  /* INTEGER  */
  YYSYMBOL_INTEGER_OF_BOOLEAN = 351,       /* "INTEGER-OF-BOOLEAN"  */
  YYSYMBOL_INTEGER_OF_DATE = 352,          /* "INTEGER-OF-DATE"  */
  YYSYMBOL_INTEGER_OF_DAY = 353,           /* "INTEGER-OF-DAY"  */
  YYSYMBOL_INTEGER_OF_FORMATTED_DATE = 354, /* "INTEGER-OF-FORMATTED-DATE"  */
  YYSYMBOL_INTEGER_PART = 355,             /* "INTEGER-PART"  */
  YYSYMBOL_INTO = 356,                     /* INTO  */
  YYSYMBOL_INTRINSIC = 357,                /* INTRINSIC  */
  YYSYMBOL_INVOKE = 358,                   /* INVOKE  */
  YYSYMBOL_IO = 359,                       /* IO  */
  YYSYMBOL_IO_CONTROL = 360,               /* "IO-CONTROL"  */
  YYSYMBOL_IS = 361,                       /* IS  */
  YYSYMBOL_ISNT = 362,                     /* "IS NOT"  */
  YYSYMBOL_KANJI = 363,                    /* KANJI  */
  YYSYMBOL_KEY = 364,                      /* KEY  */
  YYSYMBOL_LABEL = 365,                    /* LABEL  */
  YYSYMBOL_LAST = 366,                     /* LAST  */
  YYSYMBOL_LEADING = 367,                  /* LEADING  */
  YYSYMBOL_LEFT = 368,                     /* LEFT  */
  YYSYMBOL_LENGTH = 369,                   /* LENGTH  */
  YYSYMBOL_LENGTH_OF = 370,                /* "LENGTH-OF"  */
  YYSYMBOL_LIMIT = 371,                    /* LIMIT  */
  YYSYMBOL_LIMITS = 372,                   /* LIMITS  */
  YYSYMBOL_LINE = 373,                     /* LINE  */
  YYSYMBOL_LINES = 374,                    /* LINES  */
  YYSYMBOL_LINE_COUNTER = 375,             /* "LINE-COUNTER"  */
  YYSYMBOL_LINAGE = 376,                   /* LINAGE  */
  YYSYMBOL_LINKAGE = 377,                  /* LINKAGE  */
  YYSYMBOL_LOCALE = 378,                   /* LOCALE  */
  YYSYMBOL_LOCALE_COMPARE = 379,           /* "LOCALE-COMPARE"  */
  YYSYMBOL_LOCALE_DATE = 380,              /* "LOCALE-DATE"  */
  YYSYMBOL_LOCALE_TIME = 381,              /* "LOCALE-TIME"  */
  YYSYMBOL_LOCALE_TIME_FROM_SECONDS = 382, /* "LOCALE-TIME-FROM-SECONDS"  */
  YYSYMBOL_LOCAL_STORAGE = 383,            /* "LOCAL-STORAGE"  */
  YYSYMBOL_LOCATION = 384,                 /* LOCATION  */
  YYSYMBOL_LOCK = 385,                     /* LOCK  */
  YYSYMBOL_LOCK_ON = 386,                  /* LOCK_ON  */
  YYSYMBOL_LOG = 387,                      /* LOG  */
  YYSYMBOL_LOG10 = 388,                    /* LOG10  */
  YYSYMBOL_LOWER_CASE = 389,               /* "LOWER-CASE"  */
  YYSYMBOL_LOW_VALUES = 390,               /* "LOW-VALUES"  */
  YYSYMBOL_LOWEST_ALGEBRAIC = 391,         /* "LOWEST-ALGEBRAIC"  */
  YYSYMBOL_LPAREN = 392,                   /* " )"  */
  YYSYMBOL_MANUAL = 393,                   /* MANUAL  */
  YYSYMBOL_MAXX = 394,                     /* "Max"  */
  YYSYMBOL_MEAN = 395,                     /* MEAN  */
  YYSYMBOL_MEDIAN = 396,                   /* MEDIAN  */
  YYSYMBOL_MIDRANGE = 397,                 /* MIDRANGE  */
  YYSYMBOL_MINN = 398,                     /* "Min"  */
  YYSYMBOL_MULTIPLE = 399,                 /* MULTIPLE  */
  YYSYMBOL_MOD = 400,                      /* MOD  */
  YYSYMBOL_MODE = 401,                     /* MODE  */
  YYSYMBOL_MODULE_NAME = 402,              /* "MODULE-NAME "  */
  YYSYMBOL_NAMED = 403,                    /* NAMED  */
  YYSYMBOL_NAT = 404,                      /* NAT  */
  YYSYMBOL_NATIONAL = 405,                 /* NATIONAL  */
  YYSYMBOL_NATIONAL_EDITED = 406,          /* "NATIONAL-EDITED"  */
  YYSYMBOL_NATIONAL_OF = 407,              /* "NATIONAL-OF"  */
  YYSYMBOL_NATIVE = 408,                   /* NATIVE  */
  YYSYMBOL_NESTED = 409,                   /* NESTED  */
  YYSYMBOL_NEXT = 410,                     /* NEXT  */
  YYSYMBOL_NO = 411,                       /* NO  */
  YYSYMBOL_NOTE = 412,                     /* NOTE  */
  YYSYMBOL_NULLS = 413,                    /* NULLS  */
  YYSYMBOL_NULLPTR = 414,                  /* NULLPTR  */
  YYSYMBOL_NUMERIC = 415,                  /* NUMERIC  */
  YYSYMBOL_NUMERIC_EDITED = 416,           /* NUMERIC_EDITED  */
  YYSYMBOL_NUMVAL = 417,                   /* NUMVAL  */
  YYSYMBOL_NUMVAL_C = 418,                 /* "NUMVAL-C"  */
  YYSYMBOL_NUMVAL_F = 419,                 /* "NUMVAL-F"  */
  YYSYMBOL_OCCURS = 420,                   /* OCCURS  */
  YYSYMBOL_OF = 421,                       /* OF  */
  YYSYMBOL_OFF = 422,                      /* OFF  */
  YYSYMBOL_OMITTED = 423,                  /* OMITTED  */
  YYSYMBOL_ON = 424,                       /* ON  */
  YYSYMBOL_ONLY = 425,                     /* ONLY  */
  YYSYMBOL_OPTIONAL = 426,                 /* OPTIONAL  */
  YYSYMBOL_OPTIONS = 427,                  /* OPTIONS  */
  YYSYMBOL_ORD = 428,                      /* ORD  */
  YYSYMBOL_ORDER = 429,                    /* ORDER  */
  YYSYMBOL_ORD_MAX = 430,                  /* "ORD-MAX"  */
  YYSYMBOL_ORD_MIN = 431,                  /* "ORD-MIN"  */
  YYSYMBOL_ORGANIZATION = 432,             /* ORGANIZATION  */
  YYSYMBOL_OTHER = 433,                    /* OTHER  */
  YYSYMBOL_OTHERWISE = 434,                /* OTHERWISE  */
  YYSYMBOL_OUTPUT = 435,                   /* OUTPUT  */
  YYSYMBOL_PACKED_DECIMAL = 436,           /* PACKED_DECIMAL  */
  YYSYMBOL_PADDING = 437,                  /* PADDING  */
  YYSYMBOL_PAGE = 438,                     /* PAGE  */
  YYSYMBOL_PAGE_COUNTER = 439,             /* "PAGE-COUNTER"  */
  YYSYMBOL_PF = 440,                       /* PF  */
  YYSYMBOL_PH = 441,                       /* PH  */
  YYSYMBOL_PI = 442,                       /* PI  */
  YYSYMBOL_PIC = 443,                      /* PIC  */
  YYSYMBOL_PICTURE = 444,                  /* PICTURE  */
  YYSYMBOL_PLUS = 445,                     /* PLUS  */
  YYSYMBOL_PRESENT_VALUE = 446,            /* PRESENT_VALUE  */
  YYSYMBOL_PRINT_SWITCH = 447,             /* PRINT_SWITCH  */
  YYSYMBOL_PROCEDURE = 448,                /* PROCEDURE  */
  YYSYMBOL_PROCEDURES = 449,               /* PROCEDURES  */
  YYSYMBOL_PROCEED = 450,                  /* PROCEED  */
  YYSYMBOL_PROCESS = 451,                  /* PROCESS  */
  YYSYMBOL_PROGRAM_ID = 452,               /* "PROGRAM-ID"  */
  YYSYMBOL_PROGRAM_kw = 453,               /* "Program"  */
  YYSYMBOL_PROPERTY = 454,                 /* PROPERTY  */
  YYSYMBOL_PROTOTYPE = 455,                /* PROTOTYPE  */
  YYSYMBOL_PSEUDOTEXT = 456,               /* PSEUDOTEXT  */
  YYSYMBOL_QUOTES = 457,                   /* "QUOTE"  */
  YYSYMBOL_RANDOM = 458,                   /* RANDOM  */
  YYSYMBOL_RANDOM_SEED = 459,              /* RANDOM_SEED  */
  YYSYMBOL_RANGE = 460,                    /* RANGE  */
  YYSYMBOL_RAISE = 461,                    /* RAISE  */
  YYSYMBOL_RAISING = 462,                  /* RAISING  */
  YYSYMBOL_RD = 463,                       /* RD  */
  YYSYMBOL_RECORD = 464,                   /* RECORD  */
  YYSYMBOL_RECORDING = 465,                /* RECORDING  */
  YYSYMBOL_RECORDS = 466,                  /* RECORDS  */
  YYSYMBOL_RECURSIVE = 467,                /* RECURSIVE  */
  YYSYMBOL_REDEFINES = 468,                /* REDEFINES  */
  YYSYMBOL_REEL = 469,                     /* REEL  */
  YYSYMBOL_REFERENCE = 470,                /* REFERENCE  */
  YYSYMBOL_RELATIVE = 471,                 /* RELATIVE  */
  YYSYMBOL_REM = 472,                      /* REM  */
  YYSYMBOL_REMAINDER = 473,                /* REMAINDER  */
  YYSYMBOL_REMARKS = 474,                  /* REMARKS  */
  YYSYMBOL_REMOVAL = 475,                  /* REMOVAL  */
  YYSYMBOL_RENAMES = 476,                  /* RENAMES  */
  YYSYMBOL_REPLACE = 477,                  /* REPLACE  */
  YYSYMBOL_REPLACING = 478,                /* REPLACING  */
  YYSYMBOL_REPORT = 479,                   /* REPORT  */
  YYSYMBOL_REPORTING = 480,                /* REPORTING  */
  YYSYMBOL_REPORTS = 481,                  /* REPORTS  */
  YYSYMBOL_REPOSITORY = 482,               /* REPOSITORY  */
  YYSYMBOL_RERUN = 483,                    /* RERUN  */
  YYSYMBOL_RESERVE = 484,                  /* RESERVE  */
  YYSYMBOL_RESTRICTED = 485,               /* RESTRICTED  */
  YYSYMBOL_RESUME = 486,                   /* RESUME  */
  YYSYMBOL_REVERSE = 487,                  /* REVERSE  */
  YYSYMBOL_REVERSED = 488,                 /* REVERSED  */
  YYSYMBOL_REWIND = 489,                   /* REWIND  */
  YYSYMBOL_RF = 490,                       /* RF  */
  YYSYMBOL_RH = 491,                       /* RH  */
  YYSYMBOL_RIGHT = 492,                    /* RIGHT  */
  YYSYMBOL_ROUNDED = 493,                  /* ROUNDED  */
  YYSYMBOL_RUN = 494,                      /* RUN  */
  YYSYMBOL_SAME = 495,                     /* SAME  */
  YYSYMBOL_SCREEN = 496,                   /* SCREEN  */
  YYSYMBOL_SD = 497,                       /* SD  */
  YYSYMBOL_SECONDS_FROM_FORMATTED_TIME = 498, /* "SECONDS-FROM-FORMATTED-TIME"  */
  YYSYMBOL_SECONDS_PAST_MIDNIGHT = 499,    /* "SECONDS-PAST-MIDNIGHT"  */
  YYSYMBOL_SECURITY = 500,                 /* SECURITY  */
  YYSYMBOL_SEPARATE = 501,                 /* SEPARATE  */
  YYSYMBOL_SEQUENCE = 502,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENTIAL = 503,               /* SEQUENTIAL  */
  YYSYMBOL_SHARING = 504,                  /* SHARING  */
  YYSYMBOL_SIMPLE_EXIT = 505,              /* "(simple) EXIT"  */
  YYSYMBOL_SIGN = 506,                     /* SIGN  */
  YYSYMBOL_SIN = 507,                      /* SIN  */
  YYSYMBOL_SIZE = 508,                     /* SIZE  */
  YYSYMBOL_SMALLEST_ALGEBRAIC = 509,       /* "SMALLEST-ALGEBRAIC"  */
  YYSYMBOL_SOURCE = 510,                   /* SOURCE  */
  YYSYMBOL_SOURCE_COMPUTER = 511,          /* "SOURCE-COMPUTER"  */
  YYSYMBOL_SPECIAL_NAMES = 512,            /* SPECIAL_NAMES  */
  YYSYMBOL_SQRT = 513,                     /* SQRT  */
  YYSYMBOL_STACK = 514,                    /* STACK  */
  YYSYMBOL_STANDARD = 515,                 /* STANDARD  */
  YYSYMBOL_STANDARD_1 = 516,               /* "STANDARD-1"  */
  YYSYMBOL_STANDARD_DEVIATION = 517,       /* "STANDARD-DEVIATION "  */
  YYSYMBOL_STANDARD_COMPARE = 518,         /* "STANDARD-COMPARE"  */
  YYSYMBOL_STATUS = 519,                   /* STATUS  */
  YYSYMBOL_STRONG = 520,                   /* STRONG  */
  YYSYMBOL_SUBSTITUTE = 521,               /* SUBSTITUTE  */
  YYSYMBOL_SUM = 522,                      /* SUM  */
  YYSYMBOL_SYMBOL = 523,                   /* SYMBOL  */
  YYSYMBOL_SYMBOLIC = 524,                 /* SYMBOLIC  */
  YYSYMBOL_SYNCHRONIZED = 525,             /* SYNCHRONIZED  */
  YYSYMBOL_TALLY = 526,                    /* TALLY  */
  YYSYMBOL_TALLYING = 527,                 /* TALLYING  */
  YYSYMBOL_TAN = 528,                      /* TAN  */
  YYSYMBOL_TERMINATE = 529,                /* TERMINATE  */
  YYSYMBOL_TEST = 530,                     /* TEST  */
  YYSYMBOL_TEST_DATE_YYYYMMDD = 531,       /* "TEST-DATE-YYYYMMDD"  */
  YYSYMBOL_TEST_DAY_YYYYDDD = 532,         /* "TEST-DAY-YYYYDDD"  */
  YYSYMBOL_TEST_FORMATTED_DATETIME = 533,  /* "TEST-FORMATTED-DATETIME"  */
  YYSYMBOL_TEST_NUMVAL = 534,              /* "TEST-NUMVAL"  */
  YYSYMBOL_TEST_NUMVAL_C = 535,            /* "TEST-NUMVAL-C"  */
  YYSYMBOL_TEST_NUMVAL_F = 536,            /* "TEST-NUMVAL-F"  */
  YYSYMBOL_THAN = 537,                     /* THAN  */
  YYSYMBOL_TIME = 538,                     /* TIME  */
  YYSYMBOL_TIMES = 539,                    /* TIMES  */
  YYSYMBOL_TO = 540,                       /* TO  */
  YYSYMBOL_TOP = 541,                      /* TOP  */
  YYSYMBOL_TOP_LEVEL = 542,                /* TOP_LEVEL  */
  YYSYMBOL_TRACKS = 543,                   /* TRACKS  */
  YYSYMBOL_TRACK_AREA = 544,               /* TRACK_AREA  */
  YYSYMBOL_TRAILING = 545,                 /* TRAILING  */
  YYSYMBOL_TRANSFORM = 546,                /* TRANSFORM  */
  YYSYMBOL_TRIM = 547,                     /* TRIM  */
  YYSYMBOL_TRUE_kw = 548,                  /* "True"  */
  YYSYMBOL_TRY = 549,                      /* TRY  */
  YYSYMBOL_TURN = 550,                     /* TURN  */
  YYSYMBOL_TYPE = 551,                     /* TYPE  */
  YYSYMBOL_TYPEDEF = 552,                  /* TYPEDEF  */
  YYSYMBOL_ULENGTH = 553,                  /* ULENGTH  */
  YYSYMBOL_UNBOUNDED = 554,                /* UNBOUNDED  */
  YYSYMBOL_UNIT = 555,                     /* UNIT  */
  YYSYMBOL_UNITS = 556,                    /* UNITS  */
  YYSYMBOL_UNIT_RECORD = 557,              /* UNIT_RECORD  */
  YYSYMBOL_UNTIL = 558,                    /* UNTIL  */
  YYSYMBOL_UP = 559,                       /* UP  */
  YYSYMBOL_UPON = 560,                     /* UPON  */
  YYSYMBOL_UPOS = 561,                     /* UPOS  */
  YYSYMBOL_UPPER_CASE = 562,               /* UPPER_CASE  */
  YYSYMBOL_USAGE = 563,                    /* USAGE  */
  YYSYMBOL_USING = 564,                    /* USING  */
  YYSYMBOL_USUBSTR = 565,                  /* USUBSTR  */
  YYSYMBOL_USUPPLEMENTARY = 566,           /* USUPPLEMENTARY  */
  YYSYMBOL_UTILITY = 567,                  /* UTILITY  */
  YYSYMBOL_UUID4 = 568,                    /* UUID4  */
  YYSYMBOL_UVALID = 569,                   /* UVALID  */
  YYSYMBOL_UWIDTH = 570,                   /* UWIDTH  */
  YYSYMBOL_VALUE = 571,                    /* VALUE  */
  YYSYMBOL_VARIANCE = 572,                 /* VARIANCE  */
  YYSYMBOL_VARYING = 573,                  /* VARYING  */
  YYSYMBOL_VOLATILE = 574,                 /* VOLATILE  */
  YYSYMBOL_WHEN_COMPILED = 575,            /* WHEN_COMPILED  */
  YYSYMBOL_WITH = 576,                     /* WITH  */
  YYSYMBOL_WORKING_STORAGE = 577,          /* WORKING_STORAGE  */
  YYSYMBOL_XML = 578,                      /* XML  */
  YYSYMBOL_XMLGENERATE = 579,              /* XMLGENERATE  */
  YYSYMBOL_XMLPARSE = 580,                 /* XMLPARSE  */
  YYSYMBOL_YEAR_TO_YYYY = 581,             /* YEAR_TO_YYYY  */
  YYSYMBOL_YYYYDDD = 582,                  /* YYYYDDD  */
  YYSYMBOL_YYYYMMDD = 583,                 /* YYYYMMDD  */
  YYSYMBOL_ARITHMETIC = 584,               /* ARITHMETIC  */
  YYSYMBOL_ATTRIBUTE = 585,                /* ATTRIBUTE  */
  YYSYMBOL_AUTO = 586,                     /* AUTO  */
  YYSYMBOL_AUTOMATIC = 587,                /* AUTOMATIC  */
  YYSYMBOL_AWAY_FROM_ZERO = 588,           /* "AWAY-FROM-ZERO"  */
  YYSYMBOL_BACKGROUND_COLOR = 589,         /* "BACKGROUND-COLOR"  */
  YYSYMBOL_BELL = 590,                     /* BELL  */
  YYSYMBOL_BINARY_ENCODING = 591,          /* "BINARY-ENCODING"  */
  YYSYMBOL_BLINK = 592,                    /* BLINK  */
  YYSYMBOL_CAPACITY = 593,                 /* CAPACITY  */
  YYSYMBOL_CENTER = 594,                   /* CENTER  */
  YYSYMBOL_CLASSIFICATION = 595,           /* CLASSIFICATION  */
  YYSYMBOL_CYCLE = 596,                    /* CYCLE  */
  YYSYMBOL_DECIMAL_ENCODING = 597,         /* "DECIMAL-ENCODING"  */
  YYSYMBOL_ENTRY_CONVENTION = 598,         /* ENTRY_CONVENTION  */
  YYSYMBOL_EOL = 599,                      /* EOL  */
  YYSYMBOL_EOS = 600,                      /* EOS  */
  YYSYMBOL_ERASE = 601,                    /* ERASE  */
  YYSYMBOL_EXPANDS = 602,                  /* EXPANDS  */
  YYSYMBOL_FLOAT_BINARY = 603,             /* "FLOAT-BINARY"  */
  YYSYMBOL_FLOAT_DECIMAL = 604,            /* "FLOAT-DECIMAL"  */
  YYSYMBOL_FOREGROUND_COLOR = 605,         /* FOREGROUND_COLOR  */
  YYSYMBOL_FOREVER = 606,                  /* FOREVER  */
  YYSYMBOL_FULL = 607,                     /* FULL  */
  YYSYMBOL_HIGHLIGHT = 608,                /* HIGHLIGHT  */
  YYSYMBOL_HIGH_ORDER_LEFT = 609,          /* "HIGH-ORDER-LEFT"  */
  YYSYMBOL_HIGH_ORDER_RIGHT = 610,         /* "HIGH-ORDER-RIGHT"  */
  YYSYMBOL_IGNORING = 611,                 /* IGNORING  */
  YYSYMBOL_IMPLEMENTS = 612,               /* IMPLEMENTS  */
  YYSYMBOL_INITIALIZED = 613,              /* INITIALIZED  */
  YYSYMBOL_INTERMEDIATE = 614,             /* INTERMEDIATE  */
  YYSYMBOL_LC_ALL_kw = 615,                /* "LC-ALL"  */
  YYSYMBOL_LC_COLLATE_kw = 616,            /* "LC-COLLATE"  */
  YYSYMBOL_LC_CTYPE_kw = 617,              /* "LC-CTYPE"  */
  YYSYMBOL_LC_MESSAGES_kw = 618,           /* "LC-MESSAGES"  */
  YYSYMBOL_LC_MONETARY_kw = 619,           /* "LC-MONETARY"  */
  YYSYMBOL_LC_NUMERIC_kw = 620,            /* "LC-NUMERIC"  */
  YYSYMBOL_LC_TIME_kw = 621,               /* "LC-TIME"  */
  YYSYMBOL_LOWLIGHT = 622,                 /* LOWLIGHT  */
  YYSYMBOL_NEAREST_AWAY_FROM_ZERO = 623,   /* "NEAREST-AWAY-FROM-ZERO"  */
  YYSYMBOL_NEAREST_EVEN = 624,             /* NEAREST_EVEN  */
  YYSYMBOL_NEAREST_TOWARD_ZERO = 625,      /* "NEAREST-EVEN NEAREST-TOWARD-ZERO"  */
  YYSYMBOL_NONE = 626,                     /* NONE  */
  YYSYMBOL_NORMAL = 627,                   /* NORMAL  */
  YYSYMBOL_NUMBERS = 628,                  /* NUMBERS  */
  YYSYMBOL_PREFIXED = 629,                 /* PREFIXED  */
  YYSYMBOL_PREVIOUS = 630,                 /* PREVIOUS  */
  YYSYMBOL_PROHIBITED = 631,               /* PROHIBITED  */
  YYSYMBOL_RELATION = 632,                 /* RELATION  */
  YYSYMBOL_REQUIRED = 633,                 /* REQUIRED  */
  YYSYMBOL_REVERSE_VIDEO = 634,            /* REVERSE_VIDEO  */
  YYSYMBOL_ROUNDING = 635,                 /* ROUNDING  */
  YYSYMBOL_SECONDS = 636,                  /* SECONDS  */
  YYSYMBOL_SECURE = 637,                   /* SECURE  */
  YYSYMBOL_SHORT = 638,                    /* SHORT  */
  YYSYMBOL_SIGNED_kw = 639,                /* SIGNED_kw  */
  YYSYMBOL_STANDARD_BINARY = 640,          /* "STANDARD-BINARY"  */
  YYSYMBOL_STANDARD_DECIMAL = 641,         /* "STANDARD-DECIMAL"  */
  YYSYMBOL_STATEMENT = 642,                /* STATEMENT  */
  YYSYMBOL_STEP = 643,                     /* STEP  */
  YYSYMBOL_STRUCTURE = 644,                /* STRUCTURE  */
  YYSYMBOL_TOWARD_GREATER = 645,           /* "TOWARD-GREATER"  */
  YYSYMBOL_TOWARD_LESSER = 646,            /* "TOWARD-LESSER"  */
  YYSYMBOL_TRUNCATION = 647,               /* TRUNCATION  */
  YYSYMBOL_UCS_4 = 648,                    /* "UCS-4"  */
  YYSYMBOL_UNDERLINE = 649,                /* UNDERLINE  */
  YYSYMBOL_UNSIGNED_kw = 650,              /* UNSIGNED_kw  */
  YYSYMBOL_UTF_16 = 651,                   /* "UTF-16"  */
  YYSYMBOL_UTF_8 = 652,                    /* "UTF-8"  */
  YYSYMBOL_ADDRESS = 653,                  /* ADDRESS  */
  YYSYMBOL_END_ACCEPT = 654,               /* "END-ACCEPT"  */
  YYSYMBOL_END_ADD = 655,                  /* "END-ADD"  */
  YYSYMBOL_END_CALL = 656,                 /* "END-CALL"  */
  YYSYMBOL_END_COMPUTE = 657,              /* "END-COMPUTE"  */
  YYSYMBOL_END_DELETE = 658,               /* "END-DELETE"  */
  YYSYMBOL_END_DISPLAY = 659,              /* "END-DISPLAY"  */
  YYSYMBOL_END_DIVIDE = 660,               /* "END-DIVIDE"  */
  YYSYMBOL_END_EVALUATE = 661,             /* "END-EVALUATE"  */
  YYSYMBOL_END_MULTIPLY = 662,             /* "END-MULTIPLY"  */
  YYSYMBOL_END_PERFORM = 663,              /* "END-PERFORM"  */
  YYSYMBOL_END_READ = 664,                 /* "END-READ"  */
  YYSYMBOL_END_RETURN = 665,               /* "END-RETURN"  */
  YYSYMBOL_END_REWRITE = 666,              /* "END-REWRITE"  */
  YYSYMBOL_END_SEARCH = 667,               /* "END-SEARCH"  */
  YYSYMBOL_END_START = 668,                /* "END-START"  */
  YYSYMBOL_END_STRING = 669,               /* "END-STRING"  */
  YYSYMBOL_END_SUBTRACT = 670,             /* "END-SUBTRACT"  */
  YYSYMBOL_END_UNSTRING = 671,             /* "END-UNSTRING"  */
  YYSYMBOL_END_WRITE = 672,                /* "END-WRITE"  */
  YYSYMBOL_END_IF = 673,                   /* "END-IF"  */
  YYSYMBOL_THRU = 674,                     /* THRU  */
  YYSYMBOL_OR = 675,                       /* OR  */
  YYSYMBOL_AND = 676,                      /* AND  */
  YYSYMBOL_NOT = 677,                      /* NOT  */
  YYSYMBOL_678_ = 678,                     /* '<'  */
  YYSYMBOL_679_ = 679,                     /* '>'  */
  YYSYMBOL_680_ = 680,                     /* '='  */
  YYSYMBOL_NE = 681,                       /* NE  */
  YYSYMBOL_LE = 682,                       /* LE  */
  YYSYMBOL_GE = 683,                       /* GE  */
  YYSYMBOL_684_ = 684,                     /* '-'  */
  YYSYMBOL_685_ = 685,                     /* '+'  */
  YYSYMBOL_686_ = 686,                     /* '*'  */
  YYSYMBOL_687_ = 687,                     /* '/'  */
  YYSYMBOL_POW = 688,                      /* POW  */
  YYSYMBOL_NEG = 689,                      /* NEG  */
  YYSYMBOL_690_ = 690,                     /* '.'  */
  YYSYMBOL_691_ = 691,                     /* '&'  */
  YYSYMBOL_692_S_ = 692,                   /* 'S'  */
  YYSYMBOL_693_ = 693,                     /* '('  */
  YYSYMBOL_694_ = 694,                     /* ')'  */
  YYSYMBOL_695_ = 695,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 696,                 /* $accept  */
  YYSYMBOL_top = 697,                      /* top  */
  YYSYMBOL_programs = 698,                 /* programs  */
  YYSYMBOL_program = 699,                  /* program  */
  YYSYMBOL_700_1 = 700,                    /* $@1  */
  YYSYMBOL_id_div = 701,                   /* id_div  */
  YYSYMBOL_cdf_words = 702,                /* cdf_words  */
  YYSYMBOL_cobol_words = 703,              /* cobol_words  */
  YYSYMBOL_cobol_words1 = 704,             /* cobol_words1  */
  YYSYMBOL_program_id = 705,               /* program_id  */
  YYSYMBOL_dot = 706,                      /* dot  */
  YYSYMBOL_program_as = 707,               /* program_as  */
  YYSYMBOL_function_id = 708,              /* function_id  */
  YYSYMBOL_options_para = 709,             /* options_para  */
  YYSYMBOL_opt_clauses = 710,              /* opt_clauses  */
  YYSYMBOL_opt_clause = 711,               /* opt_clause  */
  YYSYMBOL_opt_arith = 712,                /* opt_arith  */
  YYSYMBOL_opt_arith_type = 713,           /* opt_arith_type  */
  YYSYMBOL_opt_round = 714,                /* opt_round  */
  YYSYMBOL_opt_entry = 715,                /* opt_entry  */
  YYSYMBOL_opt_binary = 716,               /* opt_binary  */
  YYSYMBOL_default_kw = 717,               /* default_kw  */
  YYSYMBOL_opt_decimal = 718,              /* opt_decimal  */
  YYSYMBOL_opt_intermediate = 719,         /* opt_intermediate  */
  YYSYMBOL_opt_init = 720,                 /* opt_init  */
  YYSYMBOL_opt_section = 721,              /* opt_section  */
  YYSYMBOL_opt_init_sects = 722,           /* opt_init_sects  */
  YYSYMBOL_opt_init_sect = 723,            /* opt_init_sect  */
  YYSYMBOL_opt_init_value = 724,           /* opt_init_value  */
  YYSYMBOL_namestr = 725,                  /* namestr  */
  YYSYMBOL_program_attrs = 726,            /* program_attrs  */
  YYSYMBOL_comminits = 727,                /* comminits  */
  YYSYMBOL_comminit = 728,                 /* comminit  */
  YYSYMBOL_env_div = 729,                  /* env_div  */
  YYSYMBOL_730_2 = 730,                    /* $@2  */
  YYSYMBOL_env_sections = 731,             /* env_sections  */
  YYSYMBOL_env_section = 732,              /* env_section  */
  YYSYMBOL_io_sections = 733,              /* io_sections  */
  YYSYMBOL_io_section = 734,               /* io_section  */
  YYSYMBOL_io_control_clauses = 735,       /* io_control_clauses  */
  YYSYMBOL_io_control_clause = 736,        /* io_control_clause  */
  YYSYMBOL_area = 737,                     /* area  */
  YYSYMBOL_smerge = 738,                   /* smerge  */
  YYSYMBOL_selects = 739,                  /* selects  */
  YYSYMBOL_select = 740,                   /* select  */
  YYSYMBOL_selected_name = 741,            /* selected_name  */
  YYSYMBOL_external = 742,                 /* external  */
  YYSYMBOL_select_clauses = 743,           /* select_clauses  */
  YYSYMBOL_select_clause = 744,            /* select_clause  */
  YYSYMBOL_access_clause = 745,            /* access_clause  */
  YYSYMBOL_access_mode = 746,              /* access_mode  */
  YYSYMBOL_alt_key_clause = 747,           /* alt_key_clause  */
  YYSYMBOL_key_source = 748,               /* key_source  */
  YYSYMBOL_key_sources = 749,              /* key_sources  */
  YYSYMBOL_unique_key = 750,               /* unique_key  */
  YYSYMBOL_assign_clause = 751,            /* assign_clause  */
  YYSYMBOL_collate_clause = 752,           /* collate_clause  */
  YYSYMBOL_collate_claus1 = 753,           /* collate_claus1  */
  YYSYMBOL_status_clause = 754,            /* status_clause  */
  YYSYMBOL_lock_mode_clause = 755,         /* lock_mode_clause  */
  YYSYMBOL_lock_how = 756,                 /* lock_how  */
  YYSYMBOL_lock_mode = 757,                /* lock_mode  */
  YYSYMBOL_multiple = 758,                 /* multiple  */
  YYSYMBOL_records = 759,                  /* records  */
  YYSYMBOL_org_clause = 760,               /* org_clause  */
  YYSYMBOL_org_is = 761,                   /* org_is  */
  YYSYMBOL_org_clause1 = 762,              /* org_clause1  */
  YYSYMBOL_padding_clause = 763,           /* padding_clause  */
  YYSYMBOL_character = 764,                /* character  */
  YYSYMBOL_padding_char = 765,             /* padding_char  */
  YYSYMBOL_record_delim_clause = 766,      /* record_delim_clause  */
  YYSYMBOL_record_key_clause = 767,        /* record_key_clause  */
  YYSYMBOL_relative_key_clause = 768,      /* relative_key_clause  */
  YYSYMBOL_reserve_clause = 769,           /* reserve_clause  */
  YYSYMBOL_reserve_area = 770,             /* reserve_area  */
  YYSYMBOL_sharing_clause = 771,           /* sharing_clause  */
  YYSYMBOL_sharing_who = 772,              /* sharing_who  */
  YYSYMBOL_other = 773,                    /* other  */
  YYSYMBOL_config_paragraphs = 774,        /* config_paragraphs  */
  YYSYMBOL_config_paragraph = 775,         /* config_paragraph  */
  YYSYMBOL_repo_members = 776,             /* repo_members  */
  YYSYMBOL_repo_member = 777,              /* repo_member  */
  YYSYMBOL_repo_class = 778,               /* repo_class  */
  YYSYMBOL_repo_as = 779,                  /* repo_as  */
  YYSYMBOL_repo_expands = 780,             /* repo_expands  */
  YYSYMBOL_repo_interface = 781,           /* repo_interface  */
  YYSYMBOL_repo_func = 782,                /* repo_func  */
  YYSYMBOL_repo_func_names = 783,          /* repo_func_names  */
  YYSYMBOL_repo_func_name = 784,           /* repo_func_name  */
  YYSYMBOL_repo_program = 785,             /* repo_program  */
  YYSYMBOL_repo_property = 786,            /* repo_property  */
  YYSYMBOL_with_debug = 787,               /* with_debug  */
  YYSYMBOL_collating_sequence = 788,       /* collating_sequence  */
  YYSYMBOL_specials = 789,                 /* specials  */
  YYSYMBOL_special_names = 790,            /* special_names  */
  YYSYMBOL_special_name = 791,             /* special_name  */
  YYSYMBOL_locale_spec = 792,              /* locale_spec  */
  YYSYMBOL_symbolic = 793,                 /* symbolic  */
  YYSYMBOL_is_alphabet = 794,              /* is_alphabet  */
  YYSYMBOL_dev_mnemonic = 795,             /* dev_mnemonic  */
  YYSYMBOL_device_name = 796,              /* device_name  */
  YYSYMBOL_alphabet_name = 797,            /* alphabet_name  */
  YYSYMBOL_alphabet_seqs = 798,            /* alphabet_seqs  */
  YYSYMBOL_alphabet_seq = 799,             /* alphabet_seq  */
  YYSYMBOL_alphabet_etc = 800,             /* alphabet_etc  */
  YYSYMBOL_alphabet_lit = 801,             /* alphabet_lit  */
  YYSYMBOL_upsi = 802,                     /* upsi  */
  YYSYMBOL_upsi_entry = 803,               /* upsi_entry  */
  YYSYMBOL_picture_sym = 804,              /* picture_sym  */
  YYSYMBOL_domains = 805,                  /* domains  */
  YYSYMBOL_domain = 806,                   /* domain  */
  YYSYMBOL_when_set_to = 807,              /* when_set_to  */
  YYSYMBOL_data_div = 808,                 /* data_div  */
  YYSYMBOL_809_3 = 809,                    /* $@3  */
  YYSYMBOL_data_sections = 810,            /* data_sections  */
  YYSYMBOL_data_section = 811,             /* data_section  */
  YYSYMBOL_812_4 = 812,                    /* $@4  */
  YYSYMBOL_813_5 = 813,                    /* $@5  */
  YYSYMBOL_814_6 = 814,                    /* $@6  */
  YYSYMBOL_815_7 = 815,                    /* $@7  */
  YYSYMBOL_file_descrs = 816,              /* file_descrs  */
  YYSYMBOL_file_descr = 817,               /* file_descr  */
  YYSYMBOL_818_8 = 818,                    /* $@8  */
  YYSYMBOL_819_9 = 819,                    /* $@9  */
  YYSYMBOL_fd_name = 820,                  /* fd_name  */
  YYSYMBOL_fd_clauses = 821,               /* fd_clauses  */
  YYSYMBOL_fd_clause = 822,                /* fd_clause  */
  YYSYMBOL_block_desc = 823,               /* block_desc  */
  YYSYMBOL_rec_contains = 824,             /* rec_contains  */
  YYSYMBOL_chars_recs = 825,               /* chars_recs  */
  YYSYMBOL_label_desc = 826,               /* label_desc  */
  YYSYMBOL_record_is = 827,                /* record_is  */
  YYSYMBOL_fd_values = 828,                /* fd_values  */
  YYSYMBOL_fd_value = 829,                 /* fd_value  */
  YYSYMBOL_alpha_val = 830,                /* alpha_val  */
  YYSYMBOL_fd_labels = 831,                /* fd_labels  */
  YYSYMBOL_fd_label = 832,                 /* fd_label  */
  YYSYMBOL_record_desc = 833,              /* record_desc  */
  YYSYMBOL_record_vary = 834,              /* record_vary  */
  YYSYMBOL_in_size = 835,                  /* in_size  */
  YYSYMBOL_from_to = 836,                  /* from_to  */
  YYSYMBOL_depending = 837,                /* depending  */
  YYSYMBOL_fd_linage = 838,                /* fd_linage  */
  YYSYMBOL_with_footings = 839,            /* with_footings  */
  YYSYMBOL_with_footing = 840,             /* with_footing  */
  YYSYMBOL_top_bot = 841,                  /* top_bot  */
  YYSYMBOL_fd_report = 842,                /* fd_report  */
  YYSYMBOL_fields_maybe = 843,             /* fields_maybe  */
  YYSYMBOL_fields = 844,                   /* fields  */
  YYSYMBOL_field = 845,                    /* field  */
  YYSYMBOL_occurs_clause = 846,            /* occurs_clause  */
  YYSYMBOL_cardinal_lb = 847,              /* cardinal_lb  */
  YYSYMBOL_cardinal = 848,                 /* cardinal  */
  YYSYMBOL_depending_on = 849,             /* depending_on  */
  YYSYMBOL_bound = 850,                    /* bound  */
  YYSYMBOL_key_descrs = 851,               /* key_descrs  */
  YYSYMBOL_key_descr = 852,                /* key_descr  */
  YYSYMBOL_ordering = 853,                 /* ordering  */
  YYSYMBOL_key_fields = 854,               /* key_fields  */
  YYSYMBOL_key_field1 = 855,               /* key_field1  */
  YYSYMBOL_indexed = 856,                  /* indexed  */
  YYSYMBOL_index_fields = 857,             /* index_fields  */
  YYSYMBOL_index_field1 = 858,             /* index_field1  */
  YYSYMBOL_level_name = 859,               /* level_name  */
  YYSYMBOL_data_descr = 860,               /* data_descr  */
  YYSYMBOL_const_value = 861,              /* const_value  */
  YYSYMBOL_value78 = 862,                  /* value78  */
  YYSYMBOL_data_descr1 = 863,              /* data_descr1  */
  YYSYMBOL_literalism = 864,               /* literalism  */
  YYSYMBOL_name66 = 865,                   /* name66  */
  YYSYMBOL_data_clauses = 866,             /* data_clauses  */
  YYSYMBOL_data_clause = 867,              /* data_clause  */
  YYSYMBOL_picture_clause = 868,           /* picture_clause  */
  YYSYMBOL_alphanum_pic = 869,             /* alphanum_pic  */
  YYSYMBOL_alphanum_part = 870,            /* alphanum_part  */
  YYSYMBOL_signed = 871,                   /* signed  */
  YYSYMBOL_nps = 872,                      /* nps  */
  YYSYMBOL_nine = 873,                     /* nine  */
  YYSYMBOL_nines = 874,                    /* nines  */
  YYSYMBOL_count = 875,                    /* count  */
  YYSYMBOL_numed = 876,                    /* numed  */
  YYSYMBOL_usage_clause = 877,             /* usage_clause  */
  YYSYMBOL_usage_clause1 = 878,            /* usage_clause1  */
  YYSYMBOL_value_clause = 879,             /* value_clause  */
  YYSYMBOL_global_clause = 880,            /* global_clause  */
  YYSYMBOL_external_clause = 881,          /* external_clause  */
  YYSYMBOL_justified_clause = 882,         /* justified_clause  */
  YYSYMBOL_redefines_clause = 883,         /* redefines_clause  */
  YYSYMBOL_any_length = 884,               /* any_length  */
  YYSYMBOL_based_clause = 885,             /* based_clause  */
  YYSYMBOL_blank_zero_clause = 886,        /* blank_zero_clause  */
  YYSYMBOL_blank_when_zero = 887,          /* blank_when_zero  */
  YYSYMBOL_synched_clause = 888,           /* synched_clause  */
  YYSYMBOL_same_clause = 889,              /* same_clause  */
  YYSYMBOL_sign_clause = 890,              /* sign_clause  */
  YYSYMBOL_sign_is = 891,                  /* sign_is  */
  YYSYMBOL_sign_leading = 892,             /* sign_leading  */
  YYSYMBOL_sign_separate = 893,            /* sign_separate  */
  YYSYMBOL_type_clause = 894,              /* type_clause  */
  YYSYMBOL_typedef_clause = 895,           /* typedef_clause  */
  YYSYMBOL_volatile_clause = 896,          /* volatile_clause  */
  YYSYMBOL_procedure_div = 897,            /* procedure_div  */
  YYSYMBOL_898_10 = 898,                   /* $@10  */
  YYSYMBOL_procedure_args = 899,           /* procedure_args  */
  YYSYMBOL_procedure_uses = 900,           /* procedure_uses  */
  YYSYMBOL_procedure_use = 901,            /* procedure_use  */
  YYSYMBOL_by_value_arg = 902,             /* by_value_arg  */
  YYSYMBOL_declaratives = 903,             /* declaratives  */
  YYSYMBOL_904_11 = 904,                   /* @11  */
  YYSYMBOL_sentences = 905,                /* sentences  */
  YYSYMBOL_paragraph_name = 906,           /* paragraph_name  */
  YYSYMBOL_sentence = 907,                 /* sentence  */
  YYSYMBOL_statements = 908,               /* statements  */
  YYSYMBOL_statement = 909,                /* statement  */
  YYSYMBOL_accept = 910,                   /* accept  */
  YYSYMBOL_end_accept = 911,               /* end_accept  */
  YYSYMBOL_accept_body = 912,              /* accept_body  */
  YYSYMBOL_accept_refer = 913,             /* accept_refer  */
  YYSYMBOL_accept_excepts = 914,           /* accept_excepts  */
  YYSYMBOL_accept_except = 915,            /* accept_except  */
  YYSYMBOL_envar = 916,                    /* envar  */
  YYSYMBOL_acceptable = 917,               /* acceptable  */
  YYSYMBOL_add = 918,                      /* add  */
  YYSYMBOL_add_impl = 919,                 /* add_impl  */
  YYSYMBOL_add_cond = 920,                 /* add_cond  */
  YYSYMBOL_end_add = 921,                  /* end_add  */
  YYSYMBOL_add_body = 922,                 /* add_body  */
  YYSYMBOL_rounded = 923,                  /* rounded  */
  YYSYMBOL_rounded_mode = 924,             /* rounded_mode  */
  YYSYMBOL_rounded_type = 925,             /* rounded_type  */
  YYSYMBOL_round_between = 926,            /* round_between  */
  YYSYMBOL_might_be = 927,                 /* might_be  */
  YYSYMBOL_posneg = 928,                   /* posneg  */
  YYSYMBOL_scalar88s = 929,                /* scalar88s  */
  YYSYMBOL_name88 = 930,                   /* name88  */
  YYSYMBOL_scalar88 = 931,                 /* scalar88  */
  YYSYMBOL_allocate = 932,                 /* allocate  */
  YYSYMBOL_initialized = 933,              /* initialized  */
  YYSYMBOL_alloc_ret = 934,                /* alloc_ret  */
  YYSYMBOL_compute = 935,                  /* compute  */
  YYSYMBOL_compute_impl = 936,             /* compute_impl  */
  YYSYMBOL_compute_cond = 937,             /* compute_cond  */
  YYSYMBOL_end_compute = 938,              /* end_compute  */
  YYSYMBOL_compute_body = 939,             /* compute_body  */
  YYSYMBOL_940_12 = 940,                   /* $@12  */
  YYSYMBOL_compute_expr = 941,             /* compute_expr  */
  YYSYMBOL_942_13 = 942,                   /* $@13  */
  YYSYMBOL_943_14 = 943,                   /* $@14  */
  YYSYMBOL_display = 944,                  /* display  */
  YYSYMBOL_end_display = 945,              /* end_display  */
  YYSYMBOL_disp_body = 946,                /* disp_body  */
  YYSYMBOL_disp_vargs = 947,               /* disp_vargs  */
  YYSYMBOL_disp_target = 948,              /* disp_target  */
  YYSYMBOL_divide = 949,                   /* divide  */
  YYSYMBOL_divide_impl = 950,              /* divide_impl  */
  YYSYMBOL_divide_cond = 951,              /* divide_cond  */
  YYSYMBOL_end_divide = 952,               /* end_divide  */
  YYSYMBOL_divide_body = 953,              /* divide_body  */
  YYSYMBOL_divide_into = 954,              /* divide_into  */
  YYSYMBOL_divide_by = 955,                /* divide_by  */
  YYSYMBOL_end_program = 956,              /* end_program  */
  YYSYMBOL_end_program1 = 957,             /* end_program1  */
  YYSYMBOL_continue_stmt = 958,            /* continue_stmt  */
  YYSYMBOL_exit = 959,                     /* exit  */
  YYSYMBOL_960_15 = 960,                   /* $@15  */
  YYSYMBOL_exit_with = 961,                /* exit_with  */
  YYSYMBOL_exit_what = 962,                /* exit_what  */
  YYSYMBOL_exit_raising = 963,             /* exit_raising  */
  YYSYMBOL_free = 964,                     /* free  */
  YYSYMBOL_free_tgts = 965,                /* free_tgts  */
  YYSYMBOL_free_tgt = 966,                 /* free_tgt  */
  YYSYMBOL_simple_cond = 967,              /* simple_cond  */
  YYSYMBOL_kind_of_name = 968,             /* kind_of_name  */
  YYSYMBOL_bool_expr = 969,                /* bool_expr  */
  YYSYMBOL_log_expr = 970,                 /* log_expr  */
  YYSYMBOL_log_term = 971,                 /* log_term  */
  YYSYMBOL_rel_expr = 972,                 /* rel_expr  */
  YYSYMBOL_rel_abbrs = 973,                /* rel_abbrs  */
  YYSYMBOL_rel_lhs = 974,                  /* rel_lhs  */
  YYSYMBOL_rel_abbr = 975,                 /* rel_abbr  */
  YYSYMBOL_rel_term = 976,                 /* rel_term  */
  YYSYMBOL_rel_term1 = 977,                /* rel_term1  */
  YYSYMBOL_expr = 978,                     /* expr  */
  YYSYMBOL_expr_term = 979,                /* expr_term  */
  YYSYMBOL_num_term = 980,                 /* num_term  */
  YYSYMBOL_value = 981,                    /* value  */
  YYSYMBOL_factor = 982,                   /* factor  */
  YYSYMBOL_if_stmt = 983,                  /* if_stmt  */
  YYSYMBOL_if_impl = 984,                  /* if_impl  */
  YYSYMBOL_if_verb = 985,                  /* if_verb  */
  YYSYMBOL_if_test = 986,                  /* if_test  */
  YYSYMBOL_if_body = 987,                  /* if_body  */
  YYSYMBOL_988_16 = 988,                   /* $@16  */
  YYSYMBOL_next_statements = 989,          /* next_statements  */
  YYSYMBOL_end_if = 990,                   /* end_if  */
  YYSYMBOL_evaluate = 991,                 /* evaluate  */
  YYSYMBOL_eval_verb = 992,                /* eval_verb  */
  YYSYMBOL_eval_subjects = 993,            /* eval_subjects  */
  YYSYMBOL_eval_subject = 994,             /* eval_subject  */
  YYSYMBOL_eval_subject1 = 995,            /* eval_subject1  */
  YYSYMBOL_eval_switch = 996,              /* eval_switch  */
  YYSYMBOL_997_17 = 997,                   /* $@17  */
  YYSYMBOL_eval_cases = 998,               /* eval_cases  */
  YYSYMBOL_eval_case = 999,                /* eval_case  */
  YYSYMBOL_eval_objects = 1000,            /* eval_objects  */
  YYSYMBOL_eval_whens = 1001,              /* eval_whens  */
  YYSYMBOL_eval_when = 1002,               /* eval_when  */
  YYSYMBOL_1003_18 = 1003,                 /* $@18  */
  YYSYMBOL_eval_obj_cols = 1004,           /* eval_obj_cols  */
  YYSYMBOL_eval_obj_col = 1005,            /* eval_obj_col  */
  YYSYMBOL_eval_posneg = 1006,             /* eval_posneg  */
  YYSYMBOL_eval_abbrs = 1007,              /* eval_abbrs  */
  YYSYMBOL_eval_abbr = 1008,               /* eval_abbr  */
  YYSYMBOL_end_evaluate = 1009,            /* end_evaluate  */
  YYSYMBOL_true_false = 1010,              /* true_false  */
  YYSYMBOL_scalar = 1011,                  /* scalar  */
  YYSYMBOL_tableref = 1012,                /* tableref  */
  YYSYMBOL_tableish = 1013,                /* tableish  */
  YYSYMBOL_refmod = 1014,                  /* refmod  */
  YYSYMBOL_typename = 1015,                /* typename  */
  YYSYMBOL_name = 1016,                    /* name  */
  YYSYMBOL_qname = 1017,                   /* qname  */
  YYSYMBOL_inof = 1018,                    /* inof  */
  YYSYMBOL_ctx_name = 1019,                /* ctx_name  */
  YYSYMBOL_context_word = 1020,            /* context_word  */
  YYSYMBOL_move = 1021,                    /* move  */
  YYSYMBOL_move_tgts = 1022,               /* move_tgts  */
  YYSYMBOL_move_tgt = 1023,                /* move_tgt  */
  YYSYMBOL_multiply = 1024,                /* multiply  */
  YYSYMBOL_multiply_impl = 1025,           /* multiply_impl  */
  YYSYMBOL_multiply_cond = 1026,           /* multiply_cond  */
  YYSYMBOL_end_multiply = 1027,            /* end_multiply  */
  YYSYMBOL_multiply_body = 1028,           /* multiply_body  */
  YYSYMBOL_arith_errs = 1029,              /* arith_errs  */
  YYSYMBOL_arith_err = 1030,               /* arith_err  */
  YYSYMBOL_relop = 1031,                   /* relop  */
  YYSYMBOL_rnames = 1032,                  /* rnames  */
  YYSYMBOL_sum = 1033,                     /* sum  */
  YYSYMBOL_num_operand = 1034,             /* num_operand  */
  YYSYMBOL_num_value = 1035,               /* num_value  */
  YYSYMBOL_cce_expr = 1036,                /* cce_expr  */
  YYSYMBOL_cce_factor = 1037,              /* cce_factor  */
  YYSYMBOL_section_name = 1038,            /* section_name  */
  YYSYMBOL_1039_19 = 1039,                 /* @19  */
  YYSYMBOL_section_kw = 1040,              /* section_kw  */
  YYSYMBOL_stop = 1041,                    /* stop  */
  YYSYMBOL_stop_status = 1042,             /* stop_status  */
  YYSYMBOL_subscripts = 1043,              /* subscripts  */
  YYSYMBOL_expr_list = 1044,               /* expr_list  */
  YYSYMBOL_arg_list = 1045,                /* arg_list  */
  YYSYMBOL_any_arg = 1046,                 /* any_arg  */
  YYSYMBOL_signed_literal = 1047,          /* signed_literal  */
  YYSYMBOL_num_literal = 1048,             /* num_literal  */
  YYSYMBOL_open = 1049,                    /* open  */
  YYSYMBOL_1050_20 = 1050,                 /* $@20  */
  YYSYMBOL_open_files = 1051,              /* open_files  */
  YYSYMBOL_open_file = 1052,               /* open_file  */
  YYSYMBOL_open_io = 1053,                 /* open_io  */
  YYSYMBOL_close = 1054,                   /* close  */
  YYSYMBOL_1055_21 = 1055,                 /* $@21  */
  YYSYMBOL_close_files = 1056,             /* close_files  */
  YYSYMBOL_close_file = 1057,              /* close_file  */
  YYSYMBOL_close_how = 1058,               /* close_how  */
  YYSYMBOL_reel_unit = 1059,               /* reel_unit  */
  YYSYMBOL_for_kw = 1060,                  /* for_kw  */
  YYSYMBOL_perform = 1061,                 /* perform  */
  YYSYMBOL_perform_stmts = 1062,           /* perform_stmts  */
  YYSYMBOL_perform_proc = 1063,            /* perform_proc  */
  YYSYMBOL_perform_names = 1064,           /* perform_names  */
  YYSYMBOL_perform_times = 1065,           /* perform_times  */
  YYSYMBOL_perform_vary = 1066,            /* perform_vary  */
  YYSYMBOL_perform_verb = 1067,            /* perform_verb  */
  YYSYMBOL_perform_until = 1068,           /* perform_until  */
  YYSYMBOL_perform_cond = 1069,            /* perform_cond  */
  YYSYMBOL_1070_22 = 1070,                 /* $@22  */
  YYSYMBOL_perform_inline = 1071,          /* perform_inline  */
  YYSYMBOL_perform_start = 1072,           /* perform_start  */
  YYSYMBOL_perform_except = 1073,          /* perform_except  */
  YYSYMBOL_1074_23 = 1074,                 /* $@23  */
  YYSYMBOL_1075_24 = 1075,                 /* $@24  */
  YYSYMBOL_perform_when = 1076,            /* perform_when  */
  YYSYMBOL_perform_when1 = 1077,           /* perform_when1  */
  YYSYMBOL_1078_25 = 1078,                 /* $@25  */
  YYSYMBOL_perform_ec = 1079,              /* perform_ec  */
  YYSYMBOL_except_names = 1080,            /* except_names  */
  YYSYMBOL_except_name = 1081,             /* except_name  */
  YYSYMBOL_except_files = 1082,            /* except_files  */
  YYSYMBOL_perform_ec_other = 1083,        /* perform_ec_other  */
  YYSYMBOL_1084_26 = 1084,                 /* $@26  */
  YYSYMBOL_perform_ec_common = 1085,       /* perform_ec_common  */
  YYSYMBOL_1086_27 = 1086,                 /* $@27  */
  YYSYMBOL_perform_ec_finally = 1087,      /* perform_ec_finally  */
  YYSYMBOL_1088_28 = 1088,                 /* $@28  */
  YYSYMBOL_test_before = 1089,             /* test_before  */
  YYSYMBOL_varying = 1090,                 /* varying  */
  YYSYMBOL_vary_afters = 1091,             /* vary_afters  */
  YYSYMBOL_vary_after = 1092,              /* vary_after  */
  YYSYMBOL_vary_by = 1093,                 /* vary_by  */
  YYSYMBOL_reserved_value = 1094,          /* reserved_value  */
  YYSYMBOL_spaces_etc = 1095,              /* spaces_etc  */
  YYSYMBOL_variable_type = 1096,           /* variable_type  */
  YYSYMBOL_subtract = 1097,                /* subtract  */
  YYSYMBOL_subtract_impl = 1098,           /* subtract_impl  */
  YYSYMBOL_subtract_cond = 1099,           /* subtract_cond  */
  YYSYMBOL_end_subtract = 1100,            /* end_subtract  */
  YYSYMBOL_subtract_body = 1101,           /* subtract_body  */
  YYSYMBOL_vargs = 1102,                   /* vargs  */
  YYSYMBOL_varg = 1103,                    /* varg  */
  YYSYMBOL_varg1 = 1104,                   /* varg1  */
  YYSYMBOL_varg1a = 1105,                  /* varg1a  */
  YYSYMBOL_literal = 1106,                 /* literal  */
  YYSYMBOL_raise = 1107,                   /* raise  */
  YYSYMBOL_read = 1108,                    /* read  */
  YYSYMBOL_read_file = 1109,               /* read_file  */
  YYSYMBOL_read_body = 1110,               /* read_body  */
  YYSYMBOL_read_next = 1111,               /* read_next  */
  YYSYMBOL_read_into = 1112,               /* read_into  */
  YYSYMBOL_read_eofs = 1113,               /* read_eofs  */
  YYSYMBOL_read_eof = 1114,                /* read_eof  */
  YYSYMBOL_1115_29 = 1115,                 /* $@29  */
  YYSYMBOL_write_eops = 1116,              /* write_eops  */
  YYSYMBOL_write_eop = 1117,               /* write_eop  */
  YYSYMBOL_1118_30 = 1118,                 /* $@30  */
  YYSYMBOL_read_key = 1119,                /* read_key  */
  YYSYMBOL_write = 1120,                   /* write  */
  YYSYMBOL_write_file = 1121,              /* write_file  */
  YYSYMBOL_write_body = 1122,              /* write_body  */
  YYSYMBOL_write_what = 1123,              /* write_what  */
  YYSYMBOL_file_record = 1124,             /* file_record  */
  YYSYMBOL_advance_when = 1125,            /* advance_when  */
  YYSYMBOL_advancing = 1126,               /* advancing  */
  YYSYMBOL_advance_by = 1127,              /* advance_by  */
  YYSYMBOL_io_invalids = 1128,             /* io_invalids  */
  YYSYMBOL_io_invalid = 1129,              /* io_invalid  */
  YYSYMBOL_1130_31 = 1130,                 /* $@31  */
  YYSYMBOL_delete = 1131,                  /* delete  */
  YYSYMBOL_delete_impl = 1132,             /* delete_impl  */
  YYSYMBOL_delete_cond = 1133,             /* delete_cond  */
  YYSYMBOL_delete_body = 1134,             /* delete_body  */
  YYSYMBOL_end_delete = 1135,              /* end_delete  */
  YYSYMBOL_rewrite = 1136,                 /* rewrite  */
  YYSYMBOL_rewrite1 = 1137,                /* rewrite1  */
  YYSYMBOL_rewrite_body = 1138,            /* rewrite_body  */
  YYSYMBOL_end_rewrite = 1139,             /* end_rewrite  */
  YYSYMBOL_start = 1140,                   /* start  */
  YYSYMBOL_start_impl = 1141,              /* start_impl  */
  YYSYMBOL_start_cond = 1142,              /* start_cond  */
  YYSYMBOL_end_start = 1143,               /* end_start  */
  YYSYMBOL_start_body = 1144,              /* start_body  */
  YYSYMBOL_merge = 1145,                   /* merge  */
  YYSYMBOL_1146_32 = 1146,                 /* $@32  */
  YYSYMBOL_set_tgts = 1147,                /* set_tgts  */
  YYSYMBOL_set_operand = 1148,             /* set_operand  */
  YYSYMBOL_set_tgt = 1149,                 /* set_tgt  */
  YYSYMBOL_set = 1150,                     /* set  */
  YYSYMBOL_1151_33 = 1151,                 /* $@33  */
  YYSYMBOL_many_switches = 1152,           /* many_switches  */
  YYSYMBOL_set_switches = 1153,            /* set_switches  */
  YYSYMBOL_switches = 1154,                /* switches  */
  YYSYMBOL_one_switch = 1155,              /* one_switch  */
  YYSYMBOL_on_off = 1156,                  /* on_off  */
  YYSYMBOL_search = 1157,                  /* search  */
  YYSYMBOL_search_linear = 1158,           /* search_linear  */
  YYSYMBOL_end_search = 1159,              /* end_search  */
  YYSYMBOL_search_1_place = 1160,          /* search_1_place  */
  YYSYMBOL_search_1_body = 1161,           /* search_1_body  */
  YYSYMBOL_search_varying = 1162,          /* search_varying  */
  YYSYMBOL_search_1_cases = 1163,          /* search_1_cases  */
  YYSYMBOL_search_1_case = 1164,           /* search_1_case  */
  YYSYMBOL_search_1_when = 1165,           /* search_1_when  */
  YYSYMBOL_search_1_test = 1166,           /* search_1_test  */
  YYSYMBOL_search_binary = 1167,           /* search_binary  */
  YYSYMBOL_search_2_body = 1168,           /* search_2_body  */
  YYSYMBOL_search_2_cases = 1169,          /* search_2_cases  */
  YYSYMBOL_search_2_case = 1170,           /* search_2_case  */
  YYSYMBOL_1171_34 = 1171,                 /* $@34  */
  YYSYMBOL_search_stmts = 1172,            /* search_stmts  */
  YYSYMBOL_search_terms = 1173,            /* search_terms  */
  YYSYMBOL_search_term = 1174,             /* search_term  */
  YYSYMBOL_search_expr = 1175,             /* search_expr  */
  YYSYMBOL_sort = 1176,                    /* sort  */
  YYSYMBOL_sort_table = 1177,              /* sort_table  */
  YYSYMBOL_sort_file = 1178,               /* sort_file  */
  YYSYMBOL_sort_keys = 1179,               /* sort_keys  */
  YYSYMBOL_sort_key = 1180,                /* sort_key  */
  YYSYMBOL_forward_order = 1181,           /* forward_order  */
  YYSYMBOL_field_list = 1182,              /* field_list  */
  YYSYMBOL_sort_dup = 1183,                /* sort_dup  */
  YYSYMBOL_sort_seq = 1184,                /* sort_seq  */
  YYSYMBOL_sort_input = 1185,              /* sort_input  */
  YYSYMBOL_sort_output = 1186,             /* sort_output  */
  YYSYMBOL_sort_target = 1187,             /* sort_target  */
  YYSYMBOL_release = 1188,                 /* release  */
  YYSYMBOL_return_stmt = 1189,             /* return_stmt  */
  YYSYMBOL_return_impl = 1190,             /* return_impl  */
  YYSYMBOL_return_cond = 1191,             /* return_cond  */
  YYSYMBOL_return_end = 1192,              /* return_end  */
  YYSYMBOL_return_body = 1193,             /* return_body  */
  YYSYMBOL_return_file = 1194,             /* return_file  */
  YYSYMBOL_return_outputs = 1195,          /* return_outputs  */
  YYSYMBOL_return_output = 1196,           /* return_output  */
  YYSYMBOL_output_atend = 1197,            /* output_atend  */
  YYSYMBOL_filenames = 1198,               /* filenames  */
  YYSYMBOL_filename = 1199,                /* filename  */
  YYSYMBOL_label_name = 1200,              /* label_name  */
  YYSYMBOL_inspected = 1201,               /* inspected  */
  YYSYMBOL_backward = 1202,                /* backward  */
  YYSYMBOL_inspect = 1203,                 /* inspect  */
  YYSYMBOL_tallies = 1204,                 /* tallies  */
  YYSYMBOL_1205_35 = 1205,                 /* $@35  */
  YYSYMBOL_1206_36 = 1206,                 /* $@36  */
  YYSYMBOL_tally = 1207,                   /* tally  */
  YYSYMBOL_tally_fors = 1208,              /* tally_fors  */
  YYSYMBOL_tally_forth = 1209,             /* tally_forth  */
  YYSYMBOL_tally_matches = 1210,           /* tally_matches  */
  YYSYMBOL_tally_match = 1211,             /* tally_match  */
  YYSYMBOL_numeref = 1212,                 /* numeref  */
  YYSYMBOL_nume = 1213,                    /* nume  */
  YYSYMBOL_qnume = 1214,                   /* qnume  */
  YYSYMBOL_replacements = 1215,            /* replacements  */
  YYSYMBOL_replacement = 1216,             /* replacement  */
  YYSYMBOL_replace_oper = 1217,            /* replace_oper  */
  YYSYMBOL_x_by_ys = 1218,                 /* x_by_ys  */
  YYSYMBOL_x_by_y = 1219,                  /* x_by_y  */
  YYSYMBOL_insp_mtquals = 1220,            /* insp_mtquals  */
  YYSYMBOL_insp_quals = 1221,              /* insp_quals  */
  YYSYMBOL_insp_qual = 1222,               /* insp_qual  */
  YYSYMBOL_first_leading = 1223,           /* first_leading  */
  YYSYMBOL_alphaval = 1224,                /* alphaval  */
  YYSYMBOL_befter = 1225,                  /* befter  */
  YYSYMBOL_initialize = 1226,              /* initialize  */
  YYSYMBOL_init_clause = 1227,             /* init_clause  */
  YYSYMBOL_init_value = 1228,              /* init_value  */
  YYSYMBOL_init_categora = 1229,           /* init_categora  */
  YYSYMBOL_init_category = 1230,           /* init_category  */
  YYSYMBOL_init_replace = 1231,            /* init_replace  */
  YYSYMBOL_init_bys = 1232,                /* init_bys  */
  YYSYMBOL_init_by = 1233,                 /* init_by  */
  YYSYMBOL_init_data = 1234,               /* init_data  */
  YYSYMBOL_call = 1235,                    /* call  */
  YYSYMBOL_call_impl = 1236,               /* call_impl  */
  YYSYMBOL_call_cond = 1237,               /* call_cond  */
  YYSYMBOL_end_call = 1238,                /* end_call  */
  YYSYMBOL_call_body = 1239,               /* call_body  */
  YYSYMBOL_call_returning = 1240,          /* call_returning  */
  YYSYMBOL_entry = 1241,                   /* entry  */
  YYSYMBOL_ffi_name = 1242,                /* ffi_name  */
  YYSYMBOL_parameters = 1243,              /* parameters  */
  YYSYMBOL_parameter = 1244,               /* parameter  */
  YYSYMBOL_ffi_by_ref = 1245,              /* ffi_by_ref  */
  YYSYMBOL_ffi_by_con = 1246,              /* ffi_by_con  */
  YYSYMBOL_ffi_by_val = 1247,              /* ffi_by_val  */
  YYSYMBOL_scalar_arg = 1248,              /* scalar_arg  */
  YYSYMBOL_call_excepts = 1249,            /* call_excepts  */
  YYSYMBOL_call_except = 1250,             /* call_except  */
  YYSYMBOL_cancel = 1251,                  /* cancel  */
  YYSYMBOL_ffi_names = 1252,               /* ffi_names  */
  YYSYMBOL_alter = 1253,                   /* alter  */
  YYSYMBOL_1254_37 = 1254,                 /* $@37  */
  YYSYMBOL_alter_tgts = 1255,              /* alter_tgts  */
  YYSYMBOL_alter_tgt = 1256,               /* alter_tgt  */
  YYSYMBOL_alter_to = 1257,                /* alter_to  */
  YYSYMBOL_go_to = 1258,                   /* go_to  */
  YYSYMBOL_resume = 1259,                  /* resume  */
  YYSYMBOL_labels = 1260,                  /* labels  */
  YYSYMBOL_label_1 = 1261,                 /* label_1  */
  YYSYMBOL_string = 1262,                  /* string  */
  YYSYMBOL_string_impl = 1263,             /* string_impl  */
  YYSYMBOL_string_cond = 1264,             /* string_cond  */
  YYSYMBOL_end_string = 1265,              /* end_string  */
  YYSYMBOL_string_body = 1266,             /* string_body  */
  YYSYMBOL_str_delimiteds = 1267,          /* str_delimiteds  */
  YYSYMBOL_str_delimited = 1268,           /* str_delimited  */
  YYSYMBOL_str_input = 1269,               /* str_input  */
  YYSYMBOL_str_size = 1270,                /* str_size  */
  YYSYMBOL_str_into = 1271,                /* str_into  */
  YYSYMBOL_on_overflows = 1272,            /* on_overflows  */
  YYSYMBOL_on_overflow = 1273,             /* on_overflow  */
  YYSYMBOL_unstring = 1274,                /* unstring  */
  YYSYMBOL_end_unstring = 1275,            /* end_unstring  */
  YYSYMBOL_unstring_impl = 1276,           /* unstring_impl  */
  YYSYMBOL_unstring_cond = 1277,           /* unstring_cond  */
  YYSYMBOL_unstring_body = 1278,           /* unstring_body  */
  YYSYMBOL_unstring_src = 1279,            /* unstring_src  */
  YYSYMBOL_uns_delimited = 1280,           /* uns_delimited  */
  YYSYMBOL_uns_delimiters = 1281,          /* uns_delimiters  */
  YYSYMBOL_uns_delimiter = 1282,           /* uns_delimiter  */
  YYSYMBOL_uns_into = 1283,                /* uns_into  */
  YYSYMBOL_uns_tgts = 1284,                /* uns_tgts  */
  YYSYMBOL_uns_tgt = 1285,                 /* uns_tgt  */
  YYSYMBOL_intrinsic_call = 1286,          /* intrinsic_call  */
  YYSYMBOL_function = 1287,                /* function  */
  YYSYMBOL_function_udf = 1288,            /* function_udf  */
  YYSYMBOL_intrinsic = 1289,               /* intrinsic  */
  YYSYMBOL_module_type = 1290,             /* module_type  */
  YYSYMBOL_convert_src = 1291,             /* convert_src  */
  YYSYMBOL_convert_dst = 1292,             /* convert_dst  */
  YYSYMBOL_convert_fmt = 1293,             /* convert_fmt  */
  YYSYMBOL_numval_locale = 1294,           /* numval_locale  */
  YYSYMBOL_subst_inputs = 1295,            /* subst_inputs  */
  YYSYMBOL_subst_input = 1296,             /* subst_input  */
  YYSYMBOL_intrinsic_locale = 1297,        /* intrinsic_locale  */
  YYSYMBOL_lopper_case = 1298,             /* lopper_case  */
  YYSYMBOL_trim_trailing = 1299,           /* trim_trailing  */
  YYSYMBOL_intrinsic0 = 1300,              /* intrinsic0  */
  YYSYMBOL_intrinsic_I = 1301,             /* intrinsic_I  */
  YYSYMBOL_intrinsic_I2 = 1302,            /* intrinsic_I2  */
  YYSYMBOL_intrinsic_N = 1303,             /* intrinsic_N  */
  YYSYMBOL_intrinsic_N2 = 1304,            /* intrinsic_N2  */
  YYSYMBOL_intrinsic_X = 1305,             /* intrinsic_X  */
  YYSYMBOL_intrinsic_X2 = 1306,            /* intrinsic_X2  */
  YYSYMBOL_intrinsic_v = 1307,             /* intrinsic_v  */
  YYSYMBOL_all = 1308,                     /* all  */
  YYSYMBOL_anycase = 1309,                 /* anycase  */
  YYSYMBOL_as = 1310,                      /* as  */
  YYSYMBOL_at = 1311,                      /* at  */
  YYSYMBOL_by = 1312,                      /* by  */
  YYSYMBOL_characters = 1313,              /* characters  */
  YYSYMBOL_collating = 1314,               /* collating  */
  YYSYMBOL_contains = 1315,                /* contains  */
  YYSYMBOL_in = 1316,                      /* in  */
  YYSYMBOL_data = 1317,                    /* data  */
  YYSYMBOL_exception = 1318,               /* exception  */
  YYSYMBOL_file = 1319,                    /* file  */
  YYSYMBOL_first_last = 1320,              /* first_last  */
  YYSYMBOL_is_global = 1321,               /* is_global  */
  YYSYMBOL_global = 1322,                  /* global  */
  YYSYMBOL_initial = 1323,                 /* initial  */
  YYSYMBOL_is = 1324,                      /* is  */
  YYSYMBOL_key = 1325,                     /* key  */
  YYSYMBOL_last = 1326,                    /* last  */
  YYSYMBOL_lines = 1327,                   /* lines  */
  YYSYMBOL_mode = 1328,                    /* mode  */
  YYSYMBOL_native = 1329,                  /* native  */
  YYSYMBOL_of = 1330,                      /* of  */
  YYSYMBOL_on = 1331,                      /* on  */
  YYSYMBOL_optional = 1332,                /* optional  */
  YYSYMBOL_program_kw = 1333,              /* program_kw  */
  YYSYMBOL_order = 1334,                   /* order  */
  YYSYMBOL_record = 1335,                  /* record  */
  YYSYMBOL_sign = 1336,                    /* sign  */
  YYSYMBOL_start_after = 1337,             /* start_after  */
  YYSYMBOL_status = 1338,                  /* status  */
  YYSYMBOL_strong = 1339,                  /* strong  */
  YYSYMBOL_times = 1340,                   /* times  */
  YYSYMBOL_then = 1341,                    /* then  */
  YYSYMBOL_to = 1342,                      /* to  */
  YYSYMBOL_usage = 1343,                   /* usage  */
  YYSYMBOL_with = 1344,                    /* with  */
  YYSYMBOL_cdf = 1345,                     /* cdf  */
  YYSYMBOL_cdf_library = 1346,             /* cdf_library  */
  YYSYMBOL_cdf_basis = 1347,               /* cdf_basis  */
  YYSYMBOL_cdf_use = 1348,                 /* cdf_use  */
  YYSYMBOL_cdf_use_excepts = 1349,         /* cdf_use_excepts  */
  YYSYMBOL_cdf_use_except = 1350,          /* cdf_use_except  */
  YYSYMBOL_cdf_use_files = 1351,           /* cdf_use_files  */
  YYSYMBOL_io_mode = 1352,                 /* io_mode  */
  YYSYMBOL_globally = 1353,                /* globally  */
  YYSYMBOL_mistake = 1354,                 /* mistake  */
  YYSYMBOL_procedure = 1355,               /* procedure  */
  YYSYMBOL_cdf_listing = 1356,             /* cdf_listing  */
  YYSYMBOL_star_cbl_opts = 1357,           /* star_cbl_opts  */
  YYSYMBOL_star_cbl_opt = 1358,            /* star_cbl_opt  */
  YYSYMBOL_cdf_option = 1359,              /* cdf_option  */
  YYSYMBOL_cbl_options = 1360,             /* cbl_options  */
  YYSYMBOL_cbl_option = 1361,              /* cbl_option  */
  YYSYMBOL_cdf_none = 1362                 /* cdf_none  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;


/* Second part of user prologue.  */
#line 1267 "parse.y"

  static cbl_field_type_t
  set_operand_type(const cbl_refer_t& refer) {
    if( refer.field == NULL ) return FldInvalid;
    return refer.addr_of? FldPointer : refer.field->type;
  }

  static bool
  refer_pointer( const cbl_num_result_t& elem ) {
    assert(elem.refer.field);
    return elem.refer.is_pointer();
  }
  static bool
  valid_set_targets( const tgt_list_t& tgts, bool want_pointers ) {
    bool ok = true;
    // The only targets that can have addr_of are BASED or in Linkage Section.
    auto baddie = std::find_if( tgts.targets.begin(),
                                tgts.targets.end(),
                          []( const auto& num_result ) {
                          if( num_result.refer.addr_of ) {
                            auto f = num_result.refer.field;
                            if( ! (f->has_attr(based_e) || f->has_attr(linkage_e)) ) {
                              return true;
                            }
                          }
                          return false;
                        } );
    if( baddie != tgts.targets.end() ) {
     auto loc = symbol_field_location(field_index(baddie->refer.field));
     error_msg(loc,"target %s must be BASED or in LINKAGE SECTION",
               baddie->refer.name() );
      return false;
    }

    for( const auto& num_result : tgts.targets ) {
      auto loc = symbol_field_location(field_index(num_result.refer.field));
      if( refer_pointer(num_result) ) {
        if( !want_pointers ) {
          ok = false;
          error_msg( loc, "%s is a pointer", num_result.refer.name() );
        }
      } else {
        if( want_pointers ) {
          ok = false;
          error_msg( loc, "%s is not a pointer", num_result.refer.name() );
        }
      }
    }
    return ok;
  }

  static void initialize_allocated( cbl_refer_t input );
  static void
  initialize_statement( std::list<cbl_num_result_t>& tgts,
                        bool with_filler,
                        data_category_t category,
                        const category_map_t& replacement = category_map_t());


  unsigned char cbl_alphabet_t::nul_string[2] = ""; // 2 NULs lets us use one
  unsigned char *nul_string() { return cbl_alphabet_t::nul_string; }

  static inline literal_t literal_of( char *s ) {
                        literal_t output;
                        return output.set( strlen(s), s, "" );
  }
  static inline char * string_of( const literal_t& lit ) {
      return strlen(lit.data) == lit.len? lit.data : NULL;
  }

  static inline char * string_of( const REAL_VALUE_TYPE &cce ) {
      char output[64];
      real_to_decimal( output, &cce, sizeof(output), 32, 0 );

      char decimal = symbol_decimal_point();
      std::replace(output, output + strlen(output), '.', decimal);
      return xstrdup(output);
  }

  static inline char * string_of( tree cce ) {
      return string_of (TREE_REAL_CST (cce));
  }

  cbl_field_t *
  new_literal( const literal_t& lit, enum cbl_field_attr_t attr );

  static YYLTYPE first_line_of( YYLTYPE loc );

#line 1578 "parse.cc"


#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if 1

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* 1 */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  13
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   50105

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  696
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  667
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1800
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  2753

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   937


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   691,     2,
     693,   694,   686,   685,     2,   684,   690,   687,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   695,     2,
     678,   680,   679,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   692,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   681,   682,   683,   688,   689
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,  1363,  1363,  1370,  1375,  1376,  1379,  1378,  1391,  1392,
    1393,  1396,  1397,  1399,  1400,  1402,  1405,  1408,  1411,  1416,
    1445,  1446,  1448,  1449,  1452,  1485,  1491,  1492,  1493,  1496,
    1497,  1499,  1500,  1501,  1502,  1503,  1506,  1507,  1510,  1516,
    1517,  1518,  1519,  1521,  1525,  1529,  1536,  1544,  1545,  1547,
    1554,  1561,  1568,  1577,  1582,  1592,  1593,  1595,  1596,  1606,
    1623,  1624,  1625,  1627,  1628,  1629,  1644,  1645,  1648,  1655,
    1668,  1669,  1671,  1672,  1699,  1706,  1707,  1713,  1714,  1715,
    1715,  1720,  1721,  1724,  1725,  1726,  1727,  1728,  1729,  1732,
    1733,  1736,  1737,  1738,  1739,  1742,  1743,  1746,  1750,  1754,
    1759,  1760,  1762,  1763,  1766,  1767,  1770,  1844,  1855,  1856,
    1872,  1873,  1876,  1877,  2002,  2003,  2004,  2005,  2006,  2007,
    2008,  2009,  2010,  2011,  2012,  2013,  2014,  2017,  2024,  2025,
    2026,  2029,  2048,  2049,  2051,  2052,  2054,  2055,  2058,  2063,
    2068,  2073,  2080,  2085,  2086,  2087,  2090,  2096,  2106,  2116,
    2117,  2119,  2120,  2121,  2123,  2124,  2126,  2127,  2130,  2137,
    2138,  2141,  2142,  2143,  2144,  2151,  2157,  2158,  2160,  2161,
    2162,  2165,  2172,  2189,  2198,  2204,  2205,  2206,  2209,  2215,
    2216,  2217,  2219,  2220,  2223,  2224,  2228,  2229,  2230,  2231,
    2241,  2242,  2245,  2246,  2248,  2250,  2252,  2253,  2254,  2258,
    2260,  2261,  2263,  2264,  2267,  2270,  2277,  2281,  2284,  2285,
    2287,  2303,  2338,  2341,  2342,  2349,  2350,  2351,  2352,  2353,
    2356,  2358,  2359,  2362,  2363,  2370,  2392,  2405,  2409,  2415,
    2416,  2421,  2422,  2425,  2426,  2428,  2429,  2432,  2459,  2483,
    2484,  2485,  2486,  2487,  2488,  2489,  2490,  2491,  2492,  2493,
    2494,  2495,  2496,  2497,  2498,  2499,  2500,  2501,  2502,  2503,
    2504,  2505,  2506,  2507,  2508,  2509,  2510,  2511,  2512,  2515,
    2516,  2517,  2518,  2522,  2529,  2549,  2563,  2576,  2592,  2594,
    2602,  2611,  2612,  2618,  2627,  2650,  2668,  2674,  2680,  2686,
    2694,  2695,  2710,  2711,  2714,  2724,  2737,  2743,  2750,  2757,
    2768,  2776,  2784,  2790,  2795,  2796,  2797,  2798,  2799,  2800,
    2801,  2802,  2805,  2806,  2807,  2807,  2814,  2815,  2818,  2819,
    2819,  2822,  2822,  2825,  2825,  2828,  2828,  2831,  2836,  2837,
    2839,  2839,  2840,  2840,  2843,  2844,  2847,  2848,  2850,  2867,
    2868,  2869,  2870,  2884,  2885,  2886,  2891,  2896,  2902,  2903,
    2909,  2911,  2920,  2943,  2944,  2945,  2948,  2949,  2950,  2953,
    2954,  2957,  2958,  2962,  2964,  2965,  2968,  2969,  2971,  2974,
    2975,  2978,  2979,  2980,  2981,  2984,  2985,  2986,  2989,  3005,
    3022,  3033,  3043,  3054,  3057,  3058,  3081,  3082,  3084,  3085,
    3087,  3088,  3090,  3091,  3094,  3095,  3098,  3099,  3101,  3102,
    3105,  3106,  3154,  3155,  3156,  3157,  3158,  3169,  3175,  3182,
    3189,  3197,  3198,  3201,  3202,  3204,  3206,  3210,  3215,  3216,
    3218,  3224,  3225,  3227,  3228,  3230,  3256,  3281,  3306,  3310,
    3313,  3314,  3315,  3316,  3319,  3326,  3332,  3339,  3347,  3365,
    3383,  3402,  3430,  3456,  3479,  3512,  3575,  3691,  3692,  3711,
    3722,  3739,  3846,  3847,  3848,  3849,  3850,  3851,  3852,  3867,
    3868,  3869,  3870,  3871,  3872,  3873,  3874,  3875,  3897,  3900,
    3930,  3952,  3972,  4007,  4025,  4059,  4063,  4078,  4094,  4095,
    4098,  4099,  4102,  4103,  4111,  4112,  4115,  4116,  4124,  4152,
    4153,  4154,  4157,  4166,  4244,  4245,  4246,  4264,  4268,  4294,
    4301,  4325,  4349,  4356,  4361,  4367,  4373,  4380,  4387,  4444,
    4461,  4470,  4480,  4481,  4484,  4485,  4486,  4489,  4530,  4542,
    4543,  4545,  4546,  4548,  4549,  4550,  4570,  4578,  4592,  4615,
    4625,  4628,  4628,  4631,  4632,  4635,  4639,  4647,  4656,  4657,
    4659,  4664,  4669,  4673,  4678,  4679,  4680,  4686,  4688,  4687,
    4714,  4718,  4719,  4730,  4735,  4736,  4748,  4749,  4752,  4753,
    4761,  4783,  4793,  4794,  4797,  4808,  4809,  4810,  4811,  4812,
    4813,  4814,  4815,  4816,  4817,  4818,  4819,  4820,  4821,  4822,
    4823,  4824,  4825,  4826,  4827,  4828,  4829,  4830,  4831,  4832,
    4833,  4834,  4835,  4836,  4837,  4838,  4839,  4840,  4841,  4842,
    4843,  4844,  4845,  4846,  4847,  4864,  4885,  4916,  4917,  4920,
    4925,  4934,  4943,  4952,  4961,  4971,  4980,  4999,  5006,  5011,
    5018,  5024,  5027,  5055,  5065,  5080,  5081,  5087,  5095,  5105,
    5106,  5108,  5114,  5122,  5123,  5126,  5133,  5141,  5148,  5170,
    5171,  5172,  5174,  5176,  5177,  5178,  5179,  5180,  5182,  5183,
    5184,  5185,  5188,  5189,  5192,  5193,  5194,  5197,  5198,  5201,
    5216,  5229,  5239,  5246,  5252,  5266,  5283,  5284,  5286,  5287,
    5290,  5291,  5293,  5300,  5308,  5309,  5312,  5312,  5319,  5319,
    5325,  5325,  5335,  5353,  5373,  5374,  5376,  5381,  5387,  5393,
    5396,  5407,  5408,  5411,  5417,  5425,  5426,  5429,  5437,  5438,
    5448,  5449,  5461,  5471,  5482,  5522,  5539,  5544,  5549,  5553,
    5559,  5563,  5569,  5574,  5579,  5579,  5580,  5594,  5614,  5618,
    5622,  5630,  5631,  5632,  5633,  5634,  5644,  5648,  5652,  5658,
    5666,  5667,  5669,  5673,  5684,  5688,  5699,  5706,  5713,  5721,
    5729,  5735,  5749,  5762,  5765,  5766,  5771,  5777,  5782,  5790,
    5794,  5799,  5800,  5804,  5811,  5827,  5832,  5833,  5838,  5842,
    5846,  5850,  5856,  5864,  5879,  5900,  5903,  5909,  5915,  5921,
    5927,  5931,  5937,  5939,  5943,  5947,  5950,  5954,  5958,  5961,
    5965,  5966,  5967,  5970,  5971,  5974,  5977,  5982,  5984,  5995,
    5999,  5999,  6005,  6006,  6013,  6014,  6017,  6024,  6030,  6031,
    6033,  6038,  6039,  6040,  6049,  6050,  6050,  6057,  6058,  6061,
    6066,  6075,  6081,  6082,  6085,  6085,  6099,  6102,  6103,  6106,
    6114,  6129,  6141,  6157,  6161,  6179,  6185,  6186,  6189,  6212,
    6245,  6249,  6253,  6257,  6261,  6267,  6277,  6288,  6289,  6292,
    6293,  6296,  6304,  6315,  6325,  6332,  6338,  6344,  6351,  6359,
    6370,  6401,  6405,  6410,  6411,  6414,  6415,  6418,  6420,  6422,
    6424,  6426,  6428,  6430,  6432,  6434,  6436,  6438,  6440,  6442,
    6444,  6446,  6448,  6450,  6452,  6454,  6456,  6458,  6460,  6462,
    6464,  6466,  6468,  6470,  6472,  6474,  6476,  6478,  6480,  6482,
    6484,  6486,  6488,  6490,  6492,  6494,  6496,  6498,  6500,  6502,
    6504,  6506,  6508,  6510,  6512,  6514,  6516,  6518,  6520,  6522,
    6524,  6526,  6528,  6530,  6532,  6534,  6536,  6538,  6540,  6542,
    6544,  6546,  6548,  6550,  6552,  6554,  6556,  6558,  6560,  6562,
    6564,  6566,  6568,  6570,  6572,  6574,  6576,  6578,  6582,  6592,
    6600,  6623,  6630,  6636,  6655,  6659,  6664,  6670,  6691,  6702,
    6703,  6705,  6711,  6719,  6720,  6723,  6731,  6736,  6745,  6750,
    6757,  6764,  6794,  6825,  6826,  6827,  6828,  6829,  6830,  6833,
    6837,  6845,  6846,  6849,  6850,  6851,  6854,  6855,  6856,  6857,
    6858,  6859,  6868,  6908,  6909,  6913,  6917,  6921,  6925,  6926,
    6927,  6930,  6945,  6953,  6952,  6965,  6975,  6981,  6986,  6996,
    7007,  7008,  7009,  7014,  7034,  7039,  7048,  7054,  7055,  7057,
    7058,  7065,  7066,  7067,  7073,  7082,  7097,  7098,  7101,  7101,
    7103,  7104,  7106,  7113,  7114,  7115,  7116,  7119,  7119,  7121,
    7122,  7124,  7158,  7159,  7160,  7163,  7166,  7167,  7169,  7170,
    7172,  7173,  7176,  7177,  7181,  7187,  7195,  7204,  7208,  7214,
    7220,  7226,  7233,  7245,  7249,  7255,  7261,  7265,  7266,  7270,
    7273,  7279,  7288,  7297,  7297,  7310,  7318,  7327,  7331,  7339,
    7346,  7337,  7368,  7369,  7371,  7371,  7392,  7410,  7414,  7426,
    7443,  7444,  7448,  7454,  7471,  7476,  7476,  7485,  7490,  7490,
    7499,  7505,  7505,  7516,  7517,  7520,  7528,  7529,  7531,  7538,
    7539,  7542,  7543,  7544,  7546,  7547,  7548,  7549,  7552,  7553,
    7554,  7555,  7556,  7557,  7560,  7561,  7563,  7569,  7577,  7578,
    7581,  7588,  7596,  7618,  7619,  7622,  7623,  7626,  7627,  7629,
    7633,  7634,  7638,  7642,  7651,  7666,  7673,  7677,  7681,  7685,
    7691,  7701,  7714,  7720,  7724,  7728,  7739,  7748,  7753,  7760,
    7803,  7804,  7805,  7806,  7807,  7808,  7811,  7812,  7821,  7822,
    7838,  7837,  7860,  7861,  7876,  7875,  7897,  7898,  7901,  7907,
    7913,  7919,  7923,  7927,  7932,  7939,  7950,  7973,  7978,  7980,
    7991,  8002,  8007,  8008,  8011,  8012,  8014,  8015,  8016,  8025,
    8028,  8029,  8044,  8044,  8078,  8079,  8081,  8087,  8106,  8113,
    8114,  8117,  8123,  8127,  8146,  8155,  8156,  8159,  8160,  8162,
    8164,  8168,  8169,  8172,  8178,  8192,  8199,  8205,  8213,  8213,
    8246,  8250,  8255,  8256,  8257,  8273,  8289,  8295,  8296,  8299,
    8338,  8346,  8350,  8354,  8362,  8372,  8382,  8387,  8393,  8399,
    8419,  8419,  8422,  8423,  8426,  8444,  8445,  8447,  8452,  8453,
    8456,  8457,  8460,  8466,  8467,  8470,  8471,  8474,  8498,  8499,
    8502,  8517,  8519,  8521,  8523,  8528,  8533,  8540,  8551,  8552,
    8554,  8554,  8558,  8559,  8565,  8566,  8568,  8586,  8592,  8593,
    8596,  8597,  8600,  8619,  8633,  8675,  8681,  8685,  8688,  8692,
    8699,  8700,  8702,  8703,  8706,  8707,  8709,  8710,  8721,  8726,
    8732,  8736,  8742,  8746,  8752,  8759,  8767,  8768,  8771,  8779,
    8786,  8787,  8790,  8794,  8800,  8807,  8815,  8816,  8818,  8821,
    8828,  8829,  8831,  8842,  8853,  8854,  8856,  8857,  8859,  8864,
    8877,  8888,  8921,  8921,  8925,  8925,  8955,  8965,  8971,  8978,
    8985,  8989,  8993,  8997,  9006,  9007,  9012,  9019,  9020,  9027,
    9030,  9049,  9050,  9053,  9059,  9064,  9069,  9076,  9083,  9087,
    9092,  9099,  9100,  9102,  9110,  9121,  9130,  9131,  9132,  9133,
    9140,  9141,  9145,  9148,  9149,  9152,  9157,  9162,  9168,  9174,
    9182,  9183,  9188,  9193,  9200,  9204,  9208,  9214,  9215,  9217,
    9218,  9219,  9220,  9221,  9222,  9223,  9224,  9225,  9228,  9230,
    9236,  9243,  9249,  9250,  9255,  9256,  9259,  9276,  9296,  9297,
    9300,  9307,  9313,  9319,  9326,  9327,  9334,  9339,  9355,  9370,
    9373,  9374,  9380,  9381,  9382,  9383,  9385,  9389,  9393,  9400,
    9405,  9410,  9417,  9421,  9426,  9430,  9436,  9437,  9440,  9468,
    9478,  9491,  9506,  9515,  9516,  9519,  9519,  9522,  9523,  9525,
    9537,  9538,  9541,  9556,  9567,  9574,  9579,  9588,  9589,  9591,
    9616,  9627,  9628,  9630,  9636,  9643,  9644,  9647,  9655,  9660,
    9673,  9678,  9685,  9686,  9687,  9691,  9694,  9695,  9696,  9697,
    9703,  9708,  9715,  9723,  9754,  9769,  9770,  9772,  9773,  9776,
    9782,  9790,  9797,  9798,  9799,  9805,  9806,  9809,  9810,  9816,
    9823,  9827,  9831,  9835,  9841,  9842,  9844,  9848,  9852,  9864,
    9879,  9883,  9899,  9905,  9909,  9915,  9935,  9963,  9964,  9965,
    9987, 10003, 10009, 10014, 10020, 10027, 10032, 10038, 10044, 10052,
   10060, 10069, 10077, 10080, 10088, 10096, 10103, 10110, 10117, 10125,
   10132, 10140, 10147, 10156, 10161, 10168, 10175, 10181, 10187, 10193,
   10199, 10205, 10212, 10219, 10226, 10234, 10250, 10256, 10260, 10284,
   10291, 10298, 10305, 10333, 10340, 10357, 10373, 10382, 10399, 10415,
   10424, 10441, 10457, 10466, 10484, 10490, 10493, 10494, 10495, 10496,
   10497, 10500, 10501, 10502, 10504, 10505, 10507, 10508, 10509, 10510,
   10513, 10517, 10520, 10523, 10524, 10526, 10532, 10539, 10546, 10553,
   10559, 10566, 10572, 10579, 10587, 10588, 10591, 10592, 10593, 10596,
   10601, 10607, 10613, 10618, 10623, 10628, 10633, 10639, 10644, 10649,
   10654, 10661, 10664, 10667, 10668, 10669, 10670, 10671, 10672, 10673,
   10676, 10677, 10678, 10679, 10680, 10681, 10682, 10683, 10684, 10685,
   10686, 10687, 10690, 10693, 10694, 10695, 10696, 10697, 10698, 10699,
   10700, 10701, 10702, 10703, 10706, 10707, 10710, 10711, 10712, 10715,
   10716, 10717, 10718, 10719, 10720, 10721, 10722, 10725, 10728, 10729,
   10730, 10731, 10732, 10733, 10734, 10735, 10736, 10737, 10738, 10739,
   10742, 10743, 10746, 10747, 10750, 10751, 10754, 10755, 10758, 10759,
   10762, 10763, 10766, 10767, 10770, 10771, 10774, 10775, 10778, 10779,
   10782, 10783, 10786, 10787, 10790, 10791, 10792, 10795, 10796, 10799,
   10800, 10803, 10804, 10807, 10808, 10811, 10812, 10815, 10816, 10819,
   10820, 10821, 10824, 10825, 10828, 10829, 10832, 10833, 10836, 10837,
   10840, 10841, 10844, 10845, 10848, 10849, 10852, 10853, 10856, 10857,
   10860, 10861, 10864, 10865, 10867, 10868, 10871, 10872, 10874, 10875,
   10878, 10879, 10882, 10883, 10884, 10887, 10888, 10894, 10895, 10896,
   10897, 10900, 10902, 10904, 10905, 10908, 10918, 10930, 10948, 10961,
   10971, 10972, 10974, 10999, 11000, 11003, 11004, 11005, 11006, 11009,
   11010, 11011, 11012, 11014, 11015, 11017, 11018, 11021, 11023, 11024,
   11026, 11027, 11031, 11033, 11034, 11036, 11040, 11041, 11042, 11043,
   11044
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if 1
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"",
  "\"IDENTIFICATION DIVISION\"", "\"ENVIRONMENT DIVISION\"",
  "\"PROCEDURE DIVISION\"", "\"DATA DIVISION\"", "\"FILE SECTION\"",
  "\"INPUT-OUTPUT SECTION\"", "\"LINKAGE SECTION\"",
  "\"LOCAL-STORAGE SECTION\"", "\"WORKING-STORAGE SECTION\"",
  "\"OBJECT COMPUTER\"", "\"DISPLAY OF\"", "\"END FUNCTION\"",
  "\"END PROGRAM\"", "\"END PROGRAM <contained program>\"", "JUSTIFIED",
  "RETURNING", "\"invalid token\"", "ALNUM", "ALPHED", "ERROR",
  "EXCEPTION", "\"SIZE ERROR\"", "\"EXCEPTION NAME\"", "LEVEL", "\"66\"",
  "\"78\"", "\"88\"", "\"class name\"", "NAME", "\"Level 88 NAME\"",
  "\"Name\"", "\"NUMERIC-EDITED picture\"",
  "\"NUMERIC-EDITED CR picture\"", "\"NUMERIC-EDITED DB picture\"",
  "NINEDOT", "NINES", "NINEV", "PIC_P", "SPACES", "LITERAL", "END", "EOP",
  "FILENAME", "INVALID", "NUMBER", "NEGATIVE", "\"numeric literal\"",
  "\"OVERFLOW\"", "COMPUTATIONAL", "PERFORM", "BACKWARD", "POSITIVE",
  "POINTER", "SECTION", "\"STANDARD ALPHABET\"", "SWITCH", "UPSI", "ZERO",
  "SYSIN", "SYSIPT", "SYSOUT", "SYSLIST", "SYSLST", "SYSPUNCH", "SYSPCH",
  "CONSOLE", "C01", "C02", "C03", "C04", "C05", "C06", "C07", "C08", "C09",
  "C10", "C11", "C12", "CSP", "S01", "S02", "S03", "S04", "S05",
  "\"AFP 5A\"", "STDIN", "STDOUT", "STDERR", "LIST", "MAP", "NOLIST",
  "NOMAP", "NOSOURCE", "\"IS or IS NOT\"", "\"UDF name\"", "\"UDF\"",
  "\"date format\"", "\"time format\"", "\"datetime format\"", "BASIS",
  "CBL", "CONSTANT", "COPY", "DEFINED", "ENTER", "FEATURE", "INSERTT",
  "\"(\"", "\"PARAMETER\"", "OVERRIDE", "READY", "RESET", "\")\"",
  "\"SERVICE RELOAD\"", "\"*CBL\"", "SUBSCRIPT", "SUPPRESS", "TITLE",
  "TRACE", "USE", "\">>COBOL-WORDS\"", "EQUATE", "UNDEFINE",
  "\">>DEFINE\"", "\">>DISPLAY\"", "\">>IF\"", "\">>ELSE\"",
  "\">>END-IF\"", "\">>EVALUATE\"", "\">>WHEN\"", "\">>END-EVALUATE\"",
  "\"CALL\"", "\"CALL (as C)\"", "IF", "THEN", "ELSE", "SENTENCE",
  "ACCEPT", "ADD", "ALTER", "CALL", "CANCEL", "CLOSE", "COMPUTE",
  "CONTINUE", "DELETE", "DISPLAY", "DIVIDE", "EVALUATE", "EXIT",
  "\"FILLER\"", "GOBACK", "GOTO", "INITIALIZE", "INSPECT", "MERGE", "MOVE",
  "MULTIPLY", "OPEN", "PARAGRAPH", "READ", "RELEASE", "RETURN", "REWRITE",
  "SEARCH", "SET", "SELECT", "SORT", "\"SORT-MERGE\"", "\"STRING\"",
  "STOP", "SUBTRACT", "START", "UNSTRING", "WRITE", "WHEN", "ABS",
  "ACCESS", "ACOS", "ACTUAL", "ADVANCING", "AFTER", "ALL", "ALLOCATE",
  "ALPHABET", "ALPHABETIC", "\"ALPHABETIC-LOWER\"", "\"ALPHABETIC-UPPER\"",
  "ALPHANUMERIC", "\"ALPHANUMERIC-EDITED\"", "ALSO", "ALTERNATE",
  "ANNUITY", "ANUM", "ANY", "ANYCASE", "APPLY", "ARE", "AREA", "AREAS",
  "AS", "ASCENDING", "ACTIVATING", "ASIN", "ASSIGN", "AT", "ATAN", "BASED",
  "BASECONVERT", "BEFORE", "BINARY", "BIT", "\"BIT-OF\"",
  "\"BIT-TO-CHAR\"", "BLANK", "BLOCK_kw", "\"BOOLEAN-OF-INTEGER\"",
  "BOTTOM", "BY", "BYTE", "\"BYTE-LENGTH\"", "CF", "CH", "CHANGED", "CHAR",
  "\"CHAR-NATIONAL\"", "CHARACTER", "CHARACTERS", "CHECKING", "CLASS",
  "COBOL", "CODE", "CODESET", "COLLATING", "COLUMN",
  "\"COMBINED-DATETIME\"", "COMMA", "\"COMMAND-LINE\"",
  "\"COMMAND-LINE-COUNT\"", "COMMIT", "COMMON", "CONCAT", "CONDITION",
  "\"CONFIGURATION SECTION\"", "CONTAINS", "CONTENT", "CONTROL",
  "CONTROLS", "CONVERT", "CONVERTING", "CORRESPONDING", "COS", "COUNT",
  "CURRENCY", "CURRENT", "CURRENT_DATE", "DATA", "DATE", "DATE_COMPILED",
  "\"DATE-OF-INTEGER\"", "\"DATE-TO-YYYYMMDD\"", "\"DATE-WRITTEN\"", "DAY",
  "\"DAY-OF-INTEGER\"", "\"DAY-OF-WEEK\"", "\"DAY-TO-YYYYDDD\"", "DBCS",
  "DE", "DEBUGGING", "DECIMAL_POINT", "DECLARATIVES", "DEFAULT",
  "DELIMITED", "DELIMITER", "DEPENDING", "DESCENDING", "DETAIL", "DIRECT",
  "\"DIRECT-ACCESS\"", "DOWN", "DUPLICATES", "DYNAMIC", "E", "EBCDIC",
  "EC", "EGCS", "ENTRY", "ENVIRONMENT", "EQUAL", "EVERY", "EXAMINE",
  "EXHIBIT", "EXP", "EXP10", "EXTEND", "EXTERNAL", "\"EXCEPTION-FILE\"",
  "\"EXCEPTION-FILE-N\"", "\"EXCEPTION-LOCATION\"",
  "\"EXCEPTION-LOCATION-N\"", "\"EXCEPTION-STATEMENT\"",
  "\"EXCEPTION-STATUS\"", "FACTORIAL", "\"False\"", "FD",
  "\"FILE-CONTROL\"", "\"File\"", "\"FILE-LIMIT\"", "FINAL", "FINALLY",
  "\"FIND-STRING\"", "FIRST", "FIXED", "FOOTING", "FOR",
  "\"FORMATTED-CURRENT-DATE\"", "\"FORMATTED-DATE\"",
  "\"FORMATTED-DATETIME\"", "\"FORMATTED-TIME\"", "\"FORM-OVERFLOW\"",
  "FREE", "\"FRACTION-PART\"", "FROM", "FUNCTION", "GENERATE", "GIVING",
  "GLOBAL", "GO", "GROUP", "HEADING", "HEX", "\"HEX-OF\"",
  "\"HEX-TO-CHAR\"", "\"HIGH-VALUES\"", "\"HIGHEST-ALGEBRAIC\"", "HOLD",
  "IBM_360", "IN", "INCLUDE", "INDEX", "INDEXED", "INDICATE",
  "\"INITIAL\"", "INITIATE", "INPUT", "INSTALLATION", "INTERFACE",
  "INTEGER", "\"INTEGER-OF-BOOLEAN\"", "\"INTEGER-OF-DATE\"",
  "\"INTEGER-OF-DAY\"", "\"INTEGER-OF-FORMATTED-DATE\"",
  "\"INTEGER-PART\"", "INTO", "INTRINSIC", "INVOKE", "IO",
  "\"IO-CONTROL\"", "IS", "\"IS NOT\"", "KANJI", "KEY", "LABEL", "LAST",
  "LEADING", "LEFT", "LENGTH", "\"LENGTH-OF\"", "LIMIT", "LIMITS", "LINE",
  "LINES", "\"LINE-COUNTER\"", "LINAGE", "LINKAGE", "LOCALE",
  "\"LOCALE-COMPARE\"", "\"LOCALE-DATE\"", "\"LOCALE-TIME\"",
  "\"LOCALE-TIME-FROM-SECONDS\"", "\"LOCAL-STORAGE\"", "LOCATION", "LOCK",
  "LOCK_ON", "LOG", "LOG10", "\"LOWER-CASE\"", "\"LOW-VALUES\"",
  "\"LOWEST-ALGEBRAIC\"", "\" )\"", "MANUAL", "\"Max\"", "MEAN", "MEDIAN",
  "MIDRANGE", "\"Min\"", "MULTIPLE", "MOD", "MODE", "\"MODULE-NAME \"",
  "NAMED", "NAT", "NATIONAL", "\"NATIONAL-EDITED\"", "\"NATIONAL-OF\"",
  "NATIVE", "NESTED", "NEXT", "NO", "NOTE", "NULLS", "NULLPTR", "NUMERIC",
  "NUMERIC_EDITED", "NUMVAL", "\"NUMVAL-C\"", "\"NUMVAL-F\"", "OCCURS",
  "OF", "OFF", "OMITTED", "ON", "ONLY", "OPTIONAL", "OPTIONS", "ORD",
  "ORDER", "\"ORD-MAX\"", "\"ORD-MIN\"", "ORGANIZATION", "OTHER",
  "OTHERWISE", "OUTPUT", "PACKED_DECIMAL", "PADDING", "PAGE",
  "\"PAGE-COUNTER\"", "PF", "PH", "PI", "PIC", "PICTURE", "PLUS",
  "PRESENT_VALUE", "PRINT_SWITCH", "PROCEDURE", "PROCEDURES", "PROCEED",
  "PROCESS", "\"PROGRAM-ID\"", "\"Program\"", "PROPERTY", "PROTOTYPE",
  "PSEUDOTEXT", "\"QUOTE\"", "RANDOM", "RANDOM_SEED", "RANGE", "RAISE",
  "RAISING", "RD", "RECORD", "RECORDING", "RECORDS", "RECURSIVE",
  "REDEFINES", "REEL", "REFERENCE", "RELATIVE", "REM", "REMAINDER",
  "REMARKS", "REMOVAL", "RENAMES", "REPLACE", "REPLACING", "REPORT",
  "REPORTING", "REPORTS", "REPOSITORY", "RERUN", "RESERVE", "RESTRICTED",
  "RESUME", "REVERSE", "REVERSED", "REWIND", "RF", "RH", "RIGHT",
  "ROUNDED", "RUN", "SAME", "SCREEN", "SD",
  "\"SECONDS-FROM-FORMATTED-TIME\"", "\"SECONDS-PAST-MIDNIGHT\"",
  "SECURITY", "SEPARATE", "SEQUENCE", "SEQUENTIAL", "SHARING",
  "\"(simple) EXIT\"", "SIGN", "SIN", "SIZE", "\"SMALLEST-ALGEBRAIC\"",
  "SOURCE", "\"SOURCE-COMPUTER\"", "SPECIAL_NAMES", "SQRT", "STACK",
  "STANDARD", "\"STANDARD-1\"", "\"STANDARD-DEVIATION \"",
  "\"STANDARD-COMPARE\"", "STATUS", "STRONG", "SUBSTITUTE", "SUM",
  "SYMBOL", "SYMBOLIC", "SYNCHRONIZED", "TALLY", "TALLYING", "TAN",
  "TERMINATE", "TEST", "\"TEST-DATE-YYYYMMDD\"", "\"TEST-DAY-YYYYDDD\"",
  "\"TEST-FORMATTED-DATETIME\"", "\"TEST-NUMVAL\"", "\"TEST-NUMVAL-C\"",
  "\"TEST-NUMVAL-F\"", "THAN", "TIME", "TIMES", "TO", "TOP", "TOP_LEVEL",
  "TRACKS", "TRACK_AREA", "TRAILING", "TRANSFORM", "TRIM", "\"True\"",
  "TRY", "TURN", "TYPE", "TYPEDEF", "ULENGTH", "UNBOUNDED", "UNIT",
  "UNITS", "UNIT_RECORD", "UNTIL", "UP", "UPON", "UPOS", "UPPER_CASE",
  "USAGE", "USING", "USUBSTR", "USUPPLEMENTARY", "UTILITY", "UUID4",
  "UVALID", "UWIDTH", "VALUE", "VARIANCE", "VARYING", "VOLATILE",
  "WHEN_COMPILED", "WITH", "WORKING_STORAGE", "XML", "XMLGENERATE",
  "XMLPARSE", "YEAR_TO_YYYY", "YYYYDDD", "YYYYMMDD", "ARITHMETIC",
  "ATTRIBUTE", "AUTO", "AUTOMATIC", "\"AWAY-FROM-ZERO\"",
  "\"BACKGROUND-COLOR\"", "BELL", "\"BINARY-ENCODING\"", "BLINK",
  "CAPACITY", "CENTER", "CLASSIFICATION", "CYCLE", "\"DECIMAL-ENCODING\"",
  "ENTRY_CONVENTION", "EOL", "EOS", "ERASE", "EXPANDS", "\"FLOAT-BINARY\"",
  "\"FLOAT-DECIMAL\"", "FOREGROUND_COLOR", "FOREVER", "FULL", "HIGHLIGHT",
  "\"HIGH-ORDER-LEFT\"", "\"HIGH-ORDER-RIGHT\"", "IGNORING", "IMPLEMENTS",
  "INITIALIZED", "INTERMEDIATE", "\"LC-ALL\"", "\"LC-COLLATE\"",
  "\"LC-CTYPE\"", "\"LC-MESSAGES\"", "\"LC-MONETARY\"", "\"LC-NUMERIC\"",
  "\"LC-TIME\"", "LOWLIGHT", "\"NEAREST-AWAY-FROM-ZERO\"", "NEAREST_EVEN",
  "\"NEAREST-EVEN NEAREST-TOWARD-ZERO\"", "NONE", "NORMAL", "NUMBERS",
  "PREFIXED", "PREVIOUS", "PROHIBITED", "RELATION", "REQUIRED",
  "REVERSE_VIDEO", "ROUNDING", "SECONDS", "SECURE", "SHORT", "SIGNED_kw",
  "\"STANDARD-BINARY\"", "\"STANDARD-DECIMAL\"", "STATEMENT", "STEP",
  "STRUCTURE", "\"TOWARD-GREATER\"", "\"TOWARD-LESSER\"", "TRUNCATION",
  "\"UCS-4\"", "UNDERLINE", "UNSIGNED_kw", "\"UTF-16\"", "\"UTF-8\"",
  "ADDRESS", "\"END-ACCEPT\"", "\"END-ADD\"", "\"END-CALL\"",
  "\"END-COMPUTE\"", "\"END-DELETE\"", "\"END-DISPLAY\"", "\"END-DIVIDE\"",
  "\"END-EVALUATE\"", "\"END-MULTIPLY\"", "\"END-PERFORM\"",
  "\"END-READ\"", "\"END-RETURN\"", "\"END-REWRITE\"", "\"END-SEARCH\"",
  "\"END-START\"", "\"END-STRING\"", "\"END-SUBTRACT\"",
  "\"END-UNSTRING\"", "\"END-WRITE\"", "\"END-IF\"", "THRU", "OR", "AND",
  "NOT", "'<'", "'>'", "'='", "NE", "LE", "GE", "'-'", "'+'", "'*'", "'/'",
  "POW", "NEG", "'.'", "'&'", "'S'", "'('", "')'", "':'", "$accept", "top",
  "programs", "program", "$@1", "id_div", "cdf_words", "cobol_words",
  "cobol_words1", "program_id", "dot", "program_as", "function_id",
  "options_para", "opt_clauses", "opt_clause", "opt_arith",
  "opt_arith_type", "opt_round", "opt_entry", "opt_binary", "default_kw",
  "opt_decimal", "opt_intermediate", "opt_init", "opt_section",
  "opt_init_sects", "opt_init_sect", "opt_init_value", "namestr",
  "program_attrs", "comminits", "comminit", "env_div", "$@2",
  "env_sections", "env_section", "io_sections", "io_section",
  "io_control_clauses", "io_control_clause", "area", "smerge", "selects",
  "select", "selected_name", "external", "select_clauses", "select_clause",
  "access_clause", "access_mode", "alt_key_clause", "key_source",
  "key_sources", "unique_key", "assign_clause", "collate_clause",
  "collate_claus1", "status_clause", "lock_mode_clause", "lock_how",
  "lock_mode", "multiple", "records", "org_clause", "org_is",
  "org_clause1", "padding_clause", "character", "padding_char",
  "record_delim_clause", "record_key_clause", "relative_key_clause",
  "reserve_clause", "reserve_area", "sharing_clause", "sharing_who",
  "other", "config_paragraphs", "config_paragraph", "repo_members",
  "repo_member", "repo_class", "repo_as", "repo_expands", "repo_interface",
  "repo_func", "repo_func_names", "repo_func_name", "repo_program",
  "repo_property", "with_debug", "collating_sequence", "specials",
  "special_names", "special_name", "locale_spec", "symbolic",
  "is_alphabet", "dev_mnemonic", "device_name", "alphabet_name",
  "alphabet_seqs", "alphabet_seq", "alphabet_etc", "alphabet_lit", "upsi",
  "upsi_entry", "picture_sym", "domains", "domain", "when_set_to",
  "data_div", "$@3", "data_sections", "data_section", "$@4", "$@5", "$@6",
  "$@7", "file_descrs", "file_descr", "$@8", "$@9", "fd_name",
  "fd_clauses", "fd_clause", "block_desc", "rec_contains", "chars_recs",
  "label_desc", "record_is", "fd_values", "fd_value", "alpha_val",
  "fd_labels", "fd_label", "record_desc", "record_vary", "in_size",
  "from_to", "depending", "fd_linage", "with_footings", "with_footing",
  "top_bot", "fd_report", "fields_maybe", "fields", "field",
  "occurs_clause", "cardinal_lb", "cardinal", "depending_on", "bound",
  "key_descrs", "key_descr", "ordering", "key_fields", "key_field1",
  "indexed", "index_fields", "index_field1", "level_name", "data_descr",
  "const_value", "value78", "data_descr1", "literalism", "name66",
  "data_clauses", "data_clause", "picture_clause", "alphanum_pic",
  "alphanum_part", "signed", "nps", "nine", "nines", "count", "numed",
  "usage_clause", "usage_clause1", "value_clause", "global_clause",
  "external_clause", "justified_clause", "redefines_clause", "any_length",
  "based_clause", "blank_zero_clause", "blank_when_zero", "synched_clause",
  "same_clause", "sign_clause", "sign_is", "sign_leading", "sign_separate",
  "type_clause", "typedef_clause", "volatile_clause", "procedure_div",
  "$@10", "procedure_args", "procedure_uses", "procedure_use",
  "by_value_arg", "declaratives", "@11", "sentences", "paragraph_name",
  "sentence", "statements", "statement", "accept", "end_accept",
  "accept_body", "accept_refer", "accept_excepts", "accept_except",
  "envar", "acceptable", "add", "add_impl", "add_cond", "end_add",
  "add_body", "rounded", "rounded_mode", "rounded_type", "round_between",
  "might_be", "posneg", "scalar88s", "name88", "scalar88", "allocate",
  "initialized", "alloc_ret", "compute", "compute_impl", "compute_cond",
  "end_compute", "compute_body", "$@12", "compute_expr", "$@13", "$@14",
  "display", "end_display", "disp_body", "disp_vargs", "disp_target",
  "divide", "divide_impl", "divide_cond", "end_divide", "divide_body",
  "divide_into", "divide_by", "end_program", "end_program1",
  "continue_stmt", "exit", "$@15", "exit_with", "exit_what",
  "exit_raising", "free", "free_tgts", "free_tgt", "simple_cond",
  "kind_of_name", "bool_expr", "log_expr", "log_term", "rel_expr",
  "rel_abbrs", "rel_lhs", "rel_abbr", "rel_term", "rel_term1", "expr",
  "expr_term", "num_term", "value", "factor", "if_stmt", "if_impl",
  "if_verb", "if_test", "if_body", "$@16", "next_statements", "end_if",
  "evaluate", "eval_verb", "eval_subjects", "eval_subject",
  "eval_subject1", "eval_switch", "$@17", "eval_cases", "eval_case",
  "eval_objects", "eval_whens", "eval_when", "$@18", "eval_obj_cols",
  "eval_obj_col", "eval_posneg", "eval_abbrs", "eval_abbr", "end_evaluate",
  "true_false", "scalar", "tableref", "tableish", "refmod", "typename",
  "name", "qname", "inof", "ctx_name", "context_word", "move", "move_tgts",
  "move_tgt", "multiply", "multiply_impl", "multiply_cond", "end_multiply",
  "multiply_body", "arith_errs", "arith_err", "relop", "rnames", "sum",
  "num_operand", "num_value", "cce_expr", "cce_factor", "section_name",
  "@19", "section_kw", "stop", "stop_status", "subscripts", "expr_list",
  "arg_list", "any_arg", "signed_literal", "num_literal", "open", "$@20",
  "open_files", "open_file", "open_io", "close", "$@21", "close_files",
  "close_file", "close_how", "reel_unit", "for_kw", "perform",
  "perform_stmts", "perform_proc", "perform_names", "perform_times",
  "perform_vary", "perform_verb", "perform_until", "perform_cond", "$@22",
  "perform_inline", "perform_start", "perform_except", "$@23", "$@24",
  "perform_when", "perform_when1", "$@25", "perform_ec", "except_names",
  "except_name", "except_files", "perform_ec_other", "$@26",
  "perform_ec_common", "$@27", "perform_ec_finally", "$@28", "test_before",
  "varying", "vary_afters", "vary_after", "vary_by", "reserved_value",
  "spaces_etc", "variable_type", "subtract", "subtract_impl",
  "subtract_cond", "end_subtract", "subtract_body", "vargs", "varg",
  "varg1", "varg1a", "literal", "raise", "read", "read_file", "read_body",
  "read_next", "read_into", "read_eofs", "read_eof", "$@29", "write_eops",
  "write_eop", "$@30", "read_key", "write", "write_file", "write_body",
  "write_what", "file_record", "advance_when", "advancing", "advance_by",
  "io_invalids", "io_invalid", "$@31", "delete", "delete_impl",
  "delete_cond", "delete_body", "end_delete", "rewrite", "rewrite1",
  "rewrite_body", "end_rewrite", "start", "start_impl", "start_cond",
  "end_start", "start_body", "merge", "$@32", "set_tgts", "set_operand",
  "set_tgt", "set", "$@33", "many_switches", "set_switches", "switches",
  "one_switch", "on_off", "search", "search_linear", "end_search",
  "search_1_place", "search_1_body", "search_varying", "search_1_cases",
  "search_1_case", "search_1_when", "search_1_test", "search_binary",
  "search_2_body", "search_2_cases", "search_2_case", "$@34",
  "search_stmts", "search_terms", "search_term", "search_expr", "sort",
  "sort_table", "sort_file", "sort_keys", "sort_key", "forward_order",
  "field_list", "sort_dup", "sort_seq", "sort_input", "sort_output",
  "sort_target", "release", "return_stmt", "return_impl", "return_cond",
  "return_end", "return_body", "return_file", "return_outputs",
  "return_output", "output_atend", "filenames", "filename", "label_name",
  "inspected", "backward", "inspect", "tallies", "$@35", "$@36", "tally",
  "tally_fors", "tally_forth", "tally_matches", "tally_match", "numeref",
  "nume", "qnume", "replacements", "replacement", "replace_oper",
  "x_by_ys", "x_by_y", "insp_mtquals", "insp_quals", "insp_qual",
  "first_leading", "alphaval", "befter", "initialize", "init_clause",
  "init_value", "init_categora", "init_category", "init_replace",
  "init_bys", "init_by", "init_data", "call", "call_impl", "call_cond",
  "end_call", "call_body", "call_returning", "entry", "ffi_name",
  "parameters", "parameter", "ffi_by_ref", "ffi_by_con", "ffi_by_val",
  "scalar_arg", "call_excepts", "call_except", "cancel", "ffi_names",
  "alter", "$@37", "alter_tgts", "alter_tgt", "alter_to", "go_to",
  "resume", "labels", "label_1", "string", "string_impl", "string_cond",
  "end_string", "string_body", "str_delimiteds", "str_delimited",
  "str_input", "str_size", "str_into", "on_overflows", "on_overflow",
  "unstring", "end_unstring", "unstring_impl", "unstring_cond",
  "unstring_body", "unstring_src", "uns_delimited", "uns_delimiters",
  "uns_delimiter", "uns_into", "uns_tgts", "uns_tgt", "intrinsic_call",
  "function", "function_udf", "intrinsic", "module_type", "convert_src",
  "convert_dst", "convert_fmt", "numval_locale", "subst_inputs",
  "subst_input", "intrinsic_locale", "lopper_case", "trim_trailing",
  "intrinsic0", "intrinsic_I", "intrinsic_I2", "intrinsic_N",
  "intrinsic_N2", "intrinsic_X", "intrinsic_X2", "intrinsic_v", "all",
  "anycase", "as", "at", "by", "characters", "collating", "contains", "in",
  "data", "exception", "file", "first_last", "is_global", "global",
  "initial", "is", "key", "last", "lines", "mode", "native", "of", "on",
  "optional", "program_kw", "order", "record", "sign", "start_after",
  "status", "strong", "times", "then", "to", "usage", "with", "cdf",
  "cdf_library", "cdf_basis", "cdf_use", "cdf_use_excepts",
  "cdf_use_except", "cdf_use_files", "io_mode", "globally", "mistake",
  "procedure", "cdf_listing", "star_cbl_opts", "star_cbl_opt",
  "cdf_option", "cbl_options", "cbl_option", "cdf_none", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-2212)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1756)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
     236,   146,   368,  1216, -2212,   -49,   119,   236, -2212,   405,
     547,   683,   725, -2212, 31348, 31673,   742,    67,   208,   798,
     171,   210, -2212, -2212,   425, -2212, -2212,   826, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
     150,   598,   724,   724,   838,   838,   491,   -14, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212,   439,  1133,   -57, -2212,
   44689,  1118,  1148, -2212, -2212, -2212, -2212,   113, -2212,   784,
   -2212,   391,   965, -2212,   724,   724,   724, -2212, -2212,  1259,
     165, -2212,   531, -2212, -2212,  1042, -2212, -2212, -2212,   708,
   -2212, -2212,   724, -2212, -2212, -2212, -2212, -2212, -2212,   644,
     602,   582,  1053,   170,  1253,  1241,  1287,   480, -2212,   621,
     616, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212,   642,  1193,  1296, -2212, -2212, -2212, -2212, -2212,
    1201, -2212,   681,  1053, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212,   693,   699,   704,   722,  1289,   170, -2212,    53, -2212,
    1042, -2212,   210,   482, -2212, -2212,  1354, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212,   663, -2212, -2212, -2212,
    1296, -2212, -2212, -2212,  1201, -2212,   124, -2212,   -70, -2212,
   -2212, -2212,   728, -2212, 48427,     6, -2212,   732,  -203, -2212,
   -2212, -2212, -2212,   593, -2212, -2212,   993,   735,   736,     9,
   -2212,  1251, -2212, -2212, -2212,   737,   739,   741,   744,   124,
   -2212,   366,  2536,  2536,  2536, -2212, -2212,    -2, -2212, -2212,
   -2212,    42, -2212,   -52, 48427,  1162,   815,   746,   647, -2212,
   -2212, -2212,  1406,  1251,    -1, -2212, -2212,  1407,   700,  1409,
    3783, -2212,  1411,  1412,   366, -2212,   304, -2212, 48427,  1414,
    1415,  1418, -2212,  4424, -2212,  2499,   760, -2212,   975, -2212,
   -2212, -2212, -2212, -2212, 48427, 48427, -2212,  1451,   993, 41712,
   -2212, -2212, -2212,  1062,   765,  8469,  8469, -2212,   770,  1523,
    1251,  1221,   223,   -75, -2212,   -28,  1433,   191,  1434,  1439,
    1442,   -82, -2212, -2212, -2212, -2212, -2212, -2212,  -104,   724,
     660, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212,  1446,  1447,   976,   724,  1450,  1254,   793,  3783, -2212,
   -2212,   724, -2212, -2212, -2212, -2212,  1239,   724,   834,   834,
     724,    84,   784, -2212, -2212,  1066, -2212,   678, -2212, -2212,
   -2212, -2212, -2212, -2212,    12, -2212, -2212,   917,  -155, -2212,
       4,  1124, -2212,   228, -2212, 42989,    55,  1463,  1303,   724,
     406,   708,   219,    77, -2212, -2212,  2593, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212,   -83, -2212, -2212, -2212,    85,   217, -2212,
   48427, -2212, -2212, -2212, 48427, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, 29550, -2212,  1107, -2212,
   -2212,  1452, -2212, -2212, -2212, 48427, 34312, -2212, 44985, 44985,
   -2212, 48427,  1323,  1479, 37716, 36411, -2212, -2212,    88, 45312,
   37063,  1458, -2212, 33075, 34641, -2212,  1488,  1489,  1479,   183,
   45608, 38800, 45935, 42039,   144, 35095,  1479, 46262,   183, 30675,
    1480, 40421,   945, 43285, -2212,   330,  6447,   833, -2212,  2338,
   -2212, -2212,    47,  1199, -2212,   874,   874, -2212, -2212,   873,
     873, -2212,  -219,   972, -2212,   875,   875, -2212, -2212, -2212,
   -2212,   860, 27357, -2212, 26982, -2212, -2212,   872,   872, -2212,
   -2212, -2212, -2212, -2212, 15705, -2212,   867,   867, -2212, -2212,
   -2212, -2212, -2212, -2212,   880,   880, -2212, -2212, -2212,   877,
     877, -2212, -2212, -2212,   888,   888, -2212, -2212, -2212, -2212,
   -2212,   876,   876, -2212, -2212, -2212,   884,   884, -2212, -2212,
   -2212, -2212, -2212, -2212,   885,   885, -2212,   871,   871,  7121,
   -2212,   784,  1082,   280, -2212, -2212,   724,   784,   724,  1328,
     417,  1509,   983, -2212,  1644, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212,   719, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212,  1058,  1043,  1140, -2212, -2212, -2212,  1366,  1366,
   -2212, -2212,  1063,   -25,   724,   878,  1367, -2212,  1212,   152,
   -2212,  1367,  1367,  1367, -2212, -2212, -2212,   883,  1300,  1544,
    1065,  1065, -2212,  1546,   724,   724, -2212,   724,  1348,   724,
   -2212,   296, -2212, -2212,  1560, -2212,  1543,  1565, -2212, -2212,
   48427,   114, 39175,  1543,  1025,   724,  1570,  1950, -2212, -2212,
     686, -2212,   724, -2212,   625,    83,  1274, -2212, -2212,  1545,
   -2212,  1067,   605,   771,   605,  1327,  1264,   918, -2212, -2212,
   -2212, -2212, -2212,  1588, -2212,  1152, -2212, -2212, 48427, -2212,
   -2212, -2212,  1579,  1581,  1579, -2212, -2212,    51, -2212, -2212,
   -2212,  1112, -2212, -2212, -2212,  1094,  1207,  1076,  1207, -2212,
     369,   943, -2212, -2212, -2212, -2212,  1200, -2212, 48427,  1202,
   30675, 31050, 30675,   930,   634,   655,   939, -2212, -2212, -2212,
   19477, -2212, -2212, 49524, 30675, -2212,  8469,    65,   938, -2212,
   36411, 48427,  1184,  1184,  1606, -2212, 33858, -2212, -2212, -2212,
   -2212, 45312, -2212, -2212,   805,    81, -2212, 44985,  1600,  1606,
    1139, 48427, 30675, -2212,  1587,  1082, -2212, -2212, -2212, -2212,
   -2212, 38047, 48427,  1217,   952, -2212, -2212,  5712, -2212, -2212,
   -2212, -2212, -2212,  1606,  1172,  1180,   513,   133,  1065,   325,
   -2212, -2212,    61, -2212,    -2, 43739, -2212, -2212, -2212,  5038,
   -2212, -2212, -2212, 48754,  1479, 48427,  1114,  1117,   110, -2212,
    1606,  1437,   816,  -110,    52,  1336,  1619,  1312,  1206,    -2,
    1479,  1082,  1346,    36, 48427,  1099,  1497,   193, -2212, 46558,
    1653, 48427,  1269,    54,  1062, -2212, -2212, 39473, -2212,  1634,
    1140,   414, -2212, -2212, -2212,  1643, 40749, -2212,  1419, -2212,
   -2212, -2212,    99, 36411, 35424,  1606,  1587,   546, -2212, -2212,
    1643,  1421, -2212,    28,   661,  1467,    66,  1134,  1278, 40421,
   -2212, -2212,  1669, -2212,  1059, -2212, -2212, 44689,  1014, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,    47, 20612,
    5032, -2212, -2212, -2212, -2212, -2212, -2212,  1524, -2212, -2212,
    5301, -2212, -2212, -2212, -2212, -2212, -2212,  1648, 27732, 27357,
   -2212, -2212, -2212,  1572,   685, -2212, -2212, 28107,   835, -2212,
     295, 10491,   238, -2212, -2212, -2212,   169,   612, -2212, -2212,
   -2212, -2212, -2212, -2212,  1171, -2212, 36411,   -58,  1174, -2212,
   -2212,  9082,   -97,   -97,   -97, -2212, -2212, 18412, -2212,   452,
    1527,  1040,  -123, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212,   724,  1352, 48427,
    4431, 48427,   724, -2212, -2212,   724,   724, -2212,   724,  1165,
     249, -2212, -2212, -2212,  1218, -2212, -2212,   242,   724, -2212,
   48427, -2212,  1401,  1401,   724,  1222,   724,  1688, -2212,  1678,
    1121, -2212, -2212, -2212,  1121, -2212, -2212, -2212,  1324, -2212,
   -2212,   724,   724,   882,   688,   625,  1684, -2212,  1226, -2212,
   -2212,   533, -2212,  1187,   -10, -2212, -2212, 48427, -2212, -2212,
   -2212,  1697, -2212,  1003,  1254,   112,  1454,  1698,   724,  1570,
   -2212,  2848,  1950, -2212,  1690,    74,  1195,    -4, -2212,   -71,
   -2212,  1427,   429,  1705,    91, -2212, -2212, -2212, -2212, -2212,
   -2212,  1516,   605, -2212,  1352, -2212,    60,  1461,   605, -2212,
    1140, -2212,   862, -2212, -2212,  1701,  1701, -2212,  1701, -2212,
   -2212, -2212, -2212, -2212, -2212,    20,    20,    20,   592, -2212,
   -2212,  1511, -2212, -2212, -2212, -2212, -2212,  1740, -2212, -2212,
    1331, 48427, 48427,  1351, 48427, -2212, -2212,  1050, 19852, 30675,
   30675, 30675, 30675, 31050, -2212, -2212,  1052, -2212,  1054, -2212,
   -2212, -2212, -2212, -2212, -2212,  1056,  1057, -2212, -2212, -2212,
    1060, -2212, -2212, -2212,  1061, -2212, -2212, -2212,  1064, -2212,
    1069, -2212, -2212, -2212,  1479, -2212, -2212, -2212, -2212, -2212,
   -2212,  1070,  1071,  1072,  1074,  1075, -2212,  1078, -2212, -2212,
   -2212, -2212, -2212, -2212,  1079, -2212,  1080,  1081,  1083,  1085,
    1086, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212,  1087, -2212, -2212,  1088, -2212,  1090, -2212, -2212, -2212,
    1093, -2212, 30675, -2212, -2212, -2212,  1095, -2212, -2212, -2212,
   -2212, -2212, -2212,  1096,  1097, -2212, -2212, -2212, -2212,  1098,
   -2212,  1100, -2212,  1101, -2212, -2212, -2212,  1104, -2212, -2212,
   -2212, -2212, -2212, -2212,  1110, -2212,  1107, -2212,  1113, -2212,
    1115,  1119,  1123,  1128,  1129,  1130,  1132,   930,  7795, -2212,
   -2212,  1624, 35753,  1351, -2212, -2212, -2212,  1606, 20612, 48427,
   36411, -2212, 45312, -2212,  1220, -2212, -2212,   805, 20612, -2212,
   -2212, 39798, 48427, -2212,   575,  1600, -2212,  1606,  1355, -2212,
    -128,  1139,  1116,  1352,  1587, -2212, -2212, -2212,  1351, 48427,
    1713, -2212,  1606, 48427, 48427, 36411, 36411, -2212, -2212, -2212,
    1307, -2212, -2212, 46885, -2212,  1733, -2212,  1065,  1065,  1140,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212,   -22, -2212,  -211, -2212,    11,   319,  1622,
   -2212,   -61, -2212,  1140,  1258, 37063, 37063,  -288,  1265,  1267,
    1606, 36411, -2212, -2212, -2212, -2212,   816, -2212,  1479,  1347,
   -2212,  1365,  1474, -2212, -2212,    34, -2212,    48, 48427, -2212,
    1619, -2212, 20612, 48427, -2212,  1479, -2212, -2212, 42366, -2212,
      36, -2212, -2212,   145, 48427, -2212, -2212,  1497, -2212, 27357,
   -2212,  1767, -2212,  1293, -2212,  1297,  1299, -2212, 48427,   -94,
   -2212, -2212,  1107,  1620, 33529,  1625, -2212, -2212,  1634, -2212,
      72, -2212,   414, -2212,   107,   414,   166,  1557, -2212,  1643,
   20612, 48427, -2212, -2212,  1516, -2212, 36082, 36411,  1606,  1587,
   -2212,   835, -2212,  1643,  1516,  1491, -2212, -2212,    37, -2212,
      27, -2212, -2212, 32143,  1236, -2212,  1834, 39798, 48427, -2212,
   -2212, -2212,  1167, -2212, -2212, 20612,  9155, -2212,  1166, -2212,
    1272,  1276, -2212, 46558, -2212, -2212, -2212,  1203, -2212, -2212,
   -2212, -2212, 28482, 27357, -2212, -2212,   399,   130, -2212, 23977,
   23977, 24727, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212,   158,   879, -2212,   179,  1721,
   12838, -2212,  1723, -2212, -2212, -2212,  3728, 26982,  1204,  1689,
   -2212, 11165,  1691, -2212, 27357,  1547, -2212,  1329, -2212, -2212,
    1340, -2212, 18412,  1487, -2212, -2212, -2212, 17088, -2212,  1527,
   36411,  1527, -2212, 45312, -2212,   730,   517,   724, -2212, -2212,
   -2212, 47181,  1310, -2212,  -161,  1183,  1818, 48427, -2212, -2212,
   -2212,  1456,  1443,  1443, -2212, -2212, -2212,   724,   724, 48427,
   49050, -2212,  1479,  1479,  1846,   724,  1848, -2212, -2212,  1851,
   -2212, -2212, -2212,  1853,  1855, -2212, -2212, -2212, -2212, -2212,
     507, -2212, -2212, -2212,   902, -2212,  1219,  1537,   983, -2212,
   -2212, -2212,  1845, -2212,  1850,  1852, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212,   679, -2212,   190, -2212,   -65, -2212,  1854,
    1392, -2212,  1857,    71, -2212,  1140, -2212, -2212, 42366, -2212,
    3789, -2212,  1269,  1269,  1269, -2212, -2212,   952, -2212,   592,
   -2212,  1362, -2212, -2212,   724,  1235,  1237,  1238, -2212, -2212,
     952, 48427, -2212, -2212,   724,  1067,  1636, -2212, 48427,  1223,
    1224, -2212, -2212,  1876, -2212,  1000, -2212, -2212,   597,    20,
      20,    20,    20, -2212, -2212,  1410, -2212, -2212, 29550, -2212,
   -2212, -2212, -2212,  1225,   655,   655,   939,   939, -2212, 37716,
   29925, 37716, 30675, 30675, 37716, 30675, 30675, -2212, 37716,  1814,
    1823,   303,  1824, 37716,  1215, 38047, 37716, 37716, 37716, 37716,
     467, 37716, 42366, 29550,  1229,  1279, 37716, 37716,  1188, 37716,
    4383, 42366, 30675, -2212, 42366, 30675, 30675, 30675, 30675, 37716,
   37716, 29925,  1652,   637,   210, 48427, -2212, 20612, 13128, 48427,
     -88, 48427,  1598, -2212,  1481, 45312, 20612, 13208, -2212,  1513,
    1727, 37388, -2212, -2212, -2212,   -46, -2212, -2212, -2212, -2212,
    -117,   468, -2212,   724, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212,  1604, 48427,  1607,
   -2212, -2212, -2212, -2212, -2212, -2212, 48427,  1784,  1370,   708,
     729,  1664,   731, 42366,   151, -2212,   -63, 48427,  9756, 10430,
   37063, 37063, 37063, 48427,  1615,  1616, -2212,  1479, -2212, -2212,
   -2212, 48427,  1582, 20612, -2212, -2212, -2212, -2212, -2212, 13398,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212,  1902, -2212, -2212, -2212, 11839, 20612, 42366,  1525,
   48427, -2212, -2212, -2212, 36411, 47508, -2212,  1269, -2212, -2212,
   -2212, -2212, 36411, -2212,   915, -2212, -2212,   166, -2212, -2212,
    1352,   166, -2212,  1457,  1608, 20612, 13802,    49, 41067, 48427,
   48427,  1626, 48427,  1771, 48427, 20612, -2212, -2212, -2212, 32607,
   -2212, -2212,  1003,  1003, -2212, -2212,  1934, 48427, -2212, 38345,
   -2212, -2212, 13990, 30675, -2212, -2212, -2212, -2212,   456, -2212,
    1282, -2212,   835, 28482, -2212, -2212, 24727,   508, -2212, -2212,
    1050, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, 23602, -2212, -2212, -2212,  3073,
   -2212,  1822, 14049, -2212, -2212, 36411, -2212, 19112, -2212,  1786,
    1527,  1637, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   48427, -2212, -2212, 48427, -2212, -2212, -2212,  -176, -2212, -2212,
   -2212, -2212, -2212,  1455, -2212, -2212, -2212, -2212,  1935,  1936,
   48427,  1479,  1479, -2212,  1937, -2212,  1408,  1549,  1552, -2212,
   -2212, -2212, -2212,   822,  1531, -2212, -2212, -2212, -2212,    58,
     162,  1665,  1931, -2212,   -23, -2212,  1254, -2212,  1951, -2212,
   48427, 48427, 48427, -2212,   472,  1771,  1771,  1771, 48427, -2212,
   -2212, 48427, -2212,  1140, -2212, -2212, -2212, -2212, -2212, -2212,
     695,   695, -2212, -2212, -2212, -2212, -2212, 16366, -2212, -2212,
   18727, -2212, 37716,  1290,  1294,  1019, 20227, 20602,  1617,  1295,
   30675,  1298, 30675, 30675,  1302, 37716, 37716,  1304,  1305, 37716,
   16697, 17028, 17359, -2212, -2212, -2212, -2212, -2212,  1308, 16035,
    1309, 20977, -2212, 37716, 37716, 37716,  1792, 37716, 37716, 37716,
   16035,  1311,    23, 30675, 21352,  1316,  1317, 30675,  1319, 30675,
    1321, 37716, 19102,  1314,  1140,  1960, -2212,   -29,  1706, -2212,
    1364, -2212, 48427, 14237, 48427,  1466, -2212, 14454, 48427,  1680,
   48427, -2212, 29175, 40096, 28800,  1590,  1541, -2212,  1528,   616,
   30675, 30675, 20612, 48427, 48427, -2212, -2212,    17,  1744,  1760,
     729, -2212, -2212, -2212,  1482, -2212,  1799, -2212, -2212, -2212,
   -2212,   151, -2212, 42366,    80,  1988,  1459, -2212, 11104, 11778,
   12452, 36709, -2212, -2212,   724, -2212, 14642, 47804, -2212, 20612,
    1885, 14701, -2212, 19862, -2212, -2212, -2212, -2212, -2212, -2212,
   44066, -2212, -2212, -2212, -2212,    95, 48427, -2212,   724, -2212,
    1597, 14889,  1973, -2212, -2212, -2212, -2212, -2212, 48427, 48427,
      79,  1356, -2212, 42039,   828, -2212, 42662, -2212, 15106, -2212,
   -2212, -2212, 48427, -2212,  1338, -2212, -2212,   542, 25102, 25477,
   -2212, 10491, -2212, -2212, -2212, 24352, -2212,     3,  1837, -2212,
   -2212,   720, -2212, 28482, -2212, -2212,  1813,  1301,  1861, -2212,
   36411,  1455, -2212, -2212,  1649,   724, -2212, -2212, -2212, -2212,
   -2212,  2009,  1065,  1065, -2212,  1522, -2212, -2212, -2212, 39175,
    1840,  1254,  2000, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212,  2012,  2013,   846, -2212, 48427, -2212, -2212, 48427,
   -2212,  1374, -2212, -2212, 37716, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212,   881, -2212, -2212, 21727, -2212, 22102, -2212,
    1894, -2212,  1376, -2212, 30675, 22477, -2212,  1379,  1380, -2212,
   -2212, 17690, -2212,  1381, -2212,  1384, -2212,  1385, -2212,  2049,
   -2212,  1792, -2212, -2212,  1388,  1389, 18021, -2212,   -90, -2212,
     434,  1390,  1391,  1393,  1792, -2212, -2212, -2212,  1394, 30675,
   -2212, 22852, -2212, -2212,  1397, -2212,  1398, -2212,  1400, -2212,
   -2212, 44362,  1777,  1585, -2212, -2212, -2212, -2212,  1654, 48427,
   -2212, -2212,  1728, -2212, -2212, -2212, -2212, -2212, -2212, 48427,
    1683, -2212,   592, -2212,  1612, -2212, -2212, -2212, -2212, -2212,
   15294, 48427, 48427, -2212, -2212, -2212,  1884, -2212,  1771, 42366,
   -2212,  1886,  8408, -2212,   151,  1988, -2212, -2212,  1789,  1351,
      -2,  1479, 48427, -2212, 48427, -2212,  1429,  2579, -2212, 20237,
   -2212, 48427, 48131, -2212,  1662,  1479,   -51, 48427, 48427, -2212,
   -2212, 48427, 48427,  1745,  1771, -2212,  1608,  1608,  1608, -2212,
    2058, -2212, -2212, -2212, 25852, -2212, 25852, -2212, -2212,   835,
     562, -2212, 28482, 23602, 26227, 26602, -2212, 20612, 36411,  1558,
     432, -2212, -2212,  2092,  1809, -2212,   172, -2212,  1943,  1813,
     -78,  1724, 48427, -2212,   724,   724,  2082, -2212, 39175, -2212,
    1254, -2212, -2212, -2212, -2212, -2212, -2212, -2212,  1431, -2212,
    1432,  1794, -2212,  1435, -2212,  1436,  1947,  1792, -2212, 23227,
   -2212,  1441, -2212, -2212, -2212,  1444, -2212, -2212, -2212, -2212,
    1445, -2212, -2212, -2212, 18352, -2212, -2212, -2212, -2212, 37716,
   -2212, -2212, -2212,  1448, -2212,  1449, -2212,  1453, -2212, -2212,
   -2212,  1692, 48427,  1479, -2212, -2212, -2212,  1140, -2212, -2212,
   48427, -2212, 41394, 42366,   796, 42366, -2212, -2212, -2212,   534,
   -2212,  2100,   103, -2212, 30300, 47804, -2212,  1959, -2212, -2212,
   -2212,   724,  1479,  1479,  1696, -2212, -2212, -2212, 30675, -2212,
   48427, 48427, 48427, 48427,  1460,  1462, -2212, -2212, -2212, 25852,
   -2212, -2212, 28482, 25852, -2212, 15353, -2212, -2212, -2212, -2212,
   -2212, -2212,  1479, -2212, 20612, -2212,  1479, -2212,  1897, -2212,
    1558, -2212,  1862, -2212,   887, 48427, -2212,  2118,  2119, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, 37716,  1464, -2212,
    1465, -2212, -2212, -2212, -2212,  1468, 37716, -2212, -2212, -2212,
   -2212,  1479,   432, -2212, -2212, -2212, -2212,   796, -2212, -2212,
   -2212,   796, -2212,  1810,   796, 42366,   796, 42366, 42366,   534,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212,  2134,  1479,   724,
   -2212, -2212,  1911, -2212,  1640, -2212, -2212,  1475, -2212,  1476,
    5772,  1479,  2145, -2212,  1859, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,  1479, -2212,
   -2212, -2212, -2212, 42366, -2212,   796,  6386, -2212, 48427,  7060,
    7734, -2212, -2212, -2212,  1498,  2134,  1608,  1608, -2212, -2212,
   -2212, 20612,  2145, -2212,  1510, -2212, -2212, -2212, -2212,  2134,
   -2212, 48427, 48427, 16430, 20612,  2145, -2212, -2212, -2212, -2212,
   17754, 20612, 19487
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
      11,     0,     0,     2,     4,    26,     0,    12,    13,     0,
       0,     0,     0,     1,     0,     0,    11,     0,    28,    77,
       0,    20,     9,    14,     0,    16,    18,     0,   855,    69,
     878,   857,   867,   891,   900,   901,   908,   912,   925,   927,
     936,   937,   858,   859,   860,   861,   862,   863,   864,   865,
     866,   868,   869,   870,   871,   872,   875,   873,   874,   876,
     877,   879,   880,   881,   882,   883,   886,   884,   885,   887,
     888,   889,   890,   892,   893,   894,   895,   896,   897,   898,
     899,   902,   903,   904,   905,   906,   907,   909,   910,   911,
     913,   914,   915,   916,   917,   918,   919,   920,   921,   922,
     923,   924,   926,   928,   929,   930,   931,   932,   933,   935,
     934,   709,   707,    68,   856,   708,   706,     5,   705,   704,
       0,     0,  1713,  1713,    47,    47,     0,     0,    29,    31,
      32,    33,    34,    35,    36,    37,     0,   312,     0,    21,
       0,     0,     0,    57,    60,    61,    62,    55,    58,  1722,
    1714,     0,     0,    48,  1713,  1713,  1713,    27,    30,    79,
     313,     6,     0,     8,    10,    22,    15,    17,    56,  1750,
      59,  1723,  1713,    39,    40,    41,    42,    38,    44,     0,
       0,     0,     0,     0,   530,     0,     0,    70,  1751,     0,
       0,    45,    46,    51,    52,    49,    50,   648,   649,   650,
     651,    53,     0,     0,     0,  1796,  1762,  1797,  1798,  1800,
       0,  1799,     0,    80,    81,    88,  1758,  1761,  1759,  1760,
    1757,     0,     0,     0,     0,     0,   315,   316,     0,     7,
      22,    23,    20,     0,    67,    65,     0,    64,    66,    54,
     643,   644,   645,   646,    43,   647,    83,  1763,  1764,  1795,
    1792,  1793,  1790,  1791,  1787,  1788,    86,    82,   318,   325,
     323,   321,     0,   317,     0,  1730,   531,     0,  1713,    19,
      74,    75,    76,  1732,    72,    63,  1730,     0,     0,    84,
      89,    85,   104,  1794,  1789,     0,     0,     0,     0,    87,
     184,     0,     0,     0,     0,   327,   537,   850,   851,  1689,
    1731,  1730,   538,     0,     0,   547,   547,     0,     0,  1733,
      73,    71,     0,    91,    93,    90,   105,     0,   190,     0,
     186,   185,     0,     0,   320,   328,  1713,   429,   427,     0,
       0,     0,   326,     0,   398,  1752,     0,   428,     0,   400,
     324,   322,   853,   854,     0,     0,   539,     0,  1730,     0,
     540,   841,   842,   846,     0,     0,     0,    24,     0,   159,
      92,     0,  1736,     0,    95,   215,     0,     0,     0,     0,
       0,     0,   192,   194,   195,   196,   197,   198,   213,  1713,
    1713,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,     0,     0,  1738,  1713,     0,  1690,     0,   220,   221,
     223,  1713,   229,   334,   335,   329,  1694,  1713,     0,     0,
    1713,  1694,  1722,   394,   395,     0,   330,  1713,   336,   339,
     340,   338,   348,   349,     0,   426,   449,     0,     0,   399,
    1707,     0,   510,     0,   503,     0,   478,     0,     0,  1713,
     514,  1750,  1753,     0,   529,   458,  1752,   450,   459,   466,
     492,   467,   456,   455,   457,   460,   452,   453,   454,   511,
     463,   461,   462,     0,   464,   465,   468,     0,     0,   401,
       0,   852,   536,   542,     0,  1104,   545,  1102,  1105,  1106,
    1103,  1107,   543,   544,   546,  1101,  1513,   844,   845,   548,
     564,   556,   557,  1060,   787,     0,  1513,  1445,     0,     0,
    1027,     0,   710,     0,  1513,  1513,   797,   714,   717,  1454,
       0,  1326,  1218,  1513,  1513,  1018,     0,     0,     0,     0,
       0,  1240,     0,  1513,     0,  1513,     0,  1513,     0,  1513,
       0,     0,     0,     0,   716,     0,     0,     0,   550,     0,
     562,   565,   607,   609,   566,   633,   633,   567,   572,   674,
     674,   575,   684,   686,   576,   695,   695,   573,   579,   580,
     582,   794,  1513,   578,  1513,   586,   587,   953,   953,   551,
     600,   588,   571,   590,  1513,   602,  1118,  1118,   591,   592,
    1142,   604,  1168,   574,  1199,  1199,   595,  1201,   599,  1211,
    1211,   585,   597,   596,  1253,  1253,   598,  1280,  1281,   593,
     589,  1310,  1310,   584,   583,   569,  1408,  1408,   577,   570,
     568,   581,   594,   601,  1465,  1465,   603,  1487,  1487,     0,
      25,  1722,  1736,  1750,  1693,  1703,  1713,  1722,  1713,   166,
    1715,     0,  1755,   107,   159,   112,   114,   115,   116,   117,
     142,   118,   119,   120,     0,   158,   121,   122,   123,   124,
     125,   126,     0,     0,  1728,   102,   103,  1737,   100,   100,
      94,    96,     0,     0,  1713,     0,   200,   210,     0,   207,
     208,   200,   200,   200,   191,   193,  1756,     0,     0,     0,
    1742,  1742,   285,     0,  1713,  1713,  1739,  1713,     0,  1713,
    1691,     0,   187,   222,     0,  1695,     0,     0,   359,   360,
       0,     0,  1513,     0,     0,  1713,     0,     0,   332,   337,
     346,   345,  1713,   442,  1680,  1684,     0,   509,   513,     0,
     408,  1746,   421,  1746,   421,     0,   421,   486,   474,   489,
     490,   491,   479,   472,   475,   480,   473,   508,     0,   520,
     515,   516,     0,  1754,     0,   504,  1681,     0,   451,   521,
     522,   523,   507,   506,   505,  1744,  1724,   498,  1724,   497,
    1724,   444,   541,  1016,  1017,  1006,     0,  1514,     0,     0,
    1513,  1513,  1513,  1004,   772,   775,   778,   782,   976,   784,
    1513,   978,   977,     0,  1513,   843,     0,     0,   993,   621,
    1513,     0,     0,     0,   631,   973,  1513,   971,   974,  1011,
     975,     0,  1419,  1418,  1406,  1410,  1443,  1442,     0,   672,
     639,   676,  1513,  1322,  1196,  1736,   447,  1136,  1138,  1139,
    1137,  1513,     0,     0,  1135,  1127,  1132,  1513,  1123,  1125,
    1128,  1131,  1130,   693,   698,   700,     0,     0,  1742,     0,
     712,   713,     0,  1460,  1459,  1452,  1457,   948,   946,     0,
     944,   947,  1327,  1513,     0,     0,     0,     0,     0,   959,
     951,     0,     0,  1150,  1143,  1305,  1308,  1312,  1314,  1179,
       0,  1736,  1178,  1205,     0,  1258,     0,  1255,   659,     0,
       0,     0,  1726,     0,   663,   657,  1227,     0,  1220,     0,
    1728,  1294,  1473,  1472,  1474,  1463,  1513,  1468,  1471,  1475,
     999,   998,   717,  1513,  1513,  1116,  1209,  1213,  1494,  1492,
    1489,  1495,  1493,  1169,  1176,     0,   666,  1416,     0,   729,
     730,   732,     0,  1141,     0,  1456,   561,     0,     0,   553,
     554,   552,   559,   558,   563,   624,   608,   605,   607,     0,
       0,   634,   629,   630,   675,   670,   671,     0,   685,   682,
       0,   696,   691,   692,   795,   785,   735,  1681,  1513,  1513,
     741,   752,   734,  1748,   743,   744,   751,  1513,     0,   765,
     770,     0,     0,   840,   839,   801,   652,     0,   798,   800,
     803,   954,   949,   950,  1460,  1063,  1513,  1459,     0,  1043,
    1042,  1513,  1067,  1067,  1067,  1062,  1048,     0,  1044,     0,
    1059,  1053,     0,  1119,  1114,  1115,  1200,  1194,  1195,  1212,
    1207,  1208,  1254,  1250,  1251,  1311,  1306,  1307,  1409,  1404,
    1405,  1466,  1461,  1462,  1488,  1485,  1486,  1713,  1715,     0,
     110,     0,  1713,   160,   167,  1713,  1713,  1716,  1713,   175,
       0,   106,   113,   164,     0,   163,   161,     0,  1713,  1729,
       0,   101,  1040,  1040,  1713,     0,  1713,     0,   189,     0,
     202,   206,   205,   209,   202,   211,   212,   188,     0,   238,
    1743,  1713,  1713,   283,     0,  1680,     0,   227,     0,   233,
     234,  1713,   237,   351,   353,   344,  1292,   341,   368,   357,
     356,   358,   366,  1719,  1690,   374,   384,     0,  1713,   343,
     361,     0,     0,  1685,     0,     0,   306,   305,   307,  1680,
     292,     0,     0,     0,     0,  1708,   512,  1747,   412,   416,
     417,  1688,   421,   413,  1715,   402,     0,   407,   421,   405,
    1728,   406,     0,   477,   476,   482,   482,   481,     0,   517,
     849,   526,   527,   500,   991,     0,     0,     0,   501,   983,
     502,   525,   518,  1745,   528,  1725,   493,     0,   494,   495,
       0,     0,     0,   981,     0,   780,   781,     0,  1513,  1513,
    1513,  1513,  1513,  1513,  1003,  1005,     0,  1512,     0,  1516,
    1643,  1644,  1656,  1645,  1646,     0,     0,  1659,  1621,  1660,
       0,  1622,  1657,  1668,     0,  1647,  1609,  1623,     0,  1624,
       0,  1610,  1648,  1649,  1612,  1611,  1614,  1613,  1615,  1616,
    1625,     0,     0,     0,     0,     0,  1626,     0,  1661,  1627,
    1628,  1629,  1630,  1631,     0,  1632,     0,     0,     0,     0,
       0,  1650,  1651,  1604,  1633,  1669,  1670,  1671,  1672,  1673,
    1642,     0,  1667,  1662,     0,  1663,     0,  1674,  1675,  1617,
       0,  1550,  1513,  1676,  1658,  1664,     0,  1618,  1634,  1652,
    1653,  1654,  1677,     0,     0,  1678,  1655,  1635,  1636,     0,
    1665,     0,  1666,     0,  1637,  1638,  1605,     0,  1639,  1619,
    1640,  1641,  1679,  1620,     0,  1517,  1510,  1575,     0,  1518,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   996,
     992,     0,  1513,  1014,  1013,  1012,   962,   632,     0,     0,
    1513,   972,  1446,  1447,     0,  1440,  1441,  1407,     0,  1414,
    1415,  1688,     0,  1444,  1032,  1028,  1029,   673,   640,   969,
       0,   639,     0,  1715,  1197,  1190,  1198,  1126,  1133,     0,
       0,  1124,   694,     0,     0,  1513,  1513,   725,   723,   724,
     721,   715,   720,  1000,   727,     0,   728,  1742,  1742,  1728,
    1458,  1749,  1388,  1389,  1390,  1391,  1392,  1393,  1394,  1395,
    1396,  1397,   945,  1377,  1380,  1381,  1387,  1385,  1750,     0,
    1324,     0,  1325,  1728,     0,     0,     0,     0,     0,     0,
     952,  1513,  1025,  1023,  1026,  1024,  1019,  1020,     0,  1154,
    1155,  1152,  1156,  1160,  1144,  1145,  1158,  1147,     0,  1319,
    1309,  1316,     0,     0,  1315,     0,  1181,  1204,  1513,  1206,
    1205,  1202,  1267,  1686,     0,  1257,  1263,  1252,  1260,  1513,
    1687,     0,   626,     0,   625,     0,     0,  1727,     0,     0,
     658,   661,   662,     0,     0,     0,  1221,  1247,  1241,  1242,
       0,  1245,  1294,  1286,     0,  1294,  1296,     0,  1484,  1464,
       0,     0,  1469,  1467,  1688,   997,  1513,  1513,  1117,  1210,
    1216,     0,  1217,  1490,  1688,     0,  1164,  1170,  1171,  1162,
    1173,  1183,  1182,     0,   666,   667,   668,  1688,     0,   731,
    1140,  1455,     0,   555,   606,     0,     0,   628,   618,   620,
     610,   612,   614,     0,   615,   627,   616,   684,   690,   689,
     687,   769,  1513,  1513,   753,   771,     0,   770,   788,  1513,
    1513,  1513,   754,   770,   963,   968,   965,   966,   964,   967,
     762,   655,   654,   656,   653,     0,     0,   740,     0,     0,
       0,   786,   789,   766,   768,   767,     0,  1513,   837,   804,
     807,     0,   811,   812,  1513,     0,  1055,     0,  1052,  1051,
       0,  1047,     0,     0,  1046,  1045,  1066,     0,  1061,  1058,
    1513,  1057,  1096,     0,  1068,     0,     0,  1713,   141,   111,
     138,     0,   140,   173,     0,     0,     0,     0,   176,   177,
     174,     0,   182,   182,   178,   162,   143,  1713,  1713,     0,
      99,  1041,     0,     0,     0,  1713,     0,   219,   201,     0,
     199,   204,   214,     0,     0,   284,   273,   281,   282,   269,
       0,   271,   270,   224,   272,   274,   276,   225,  1755,   231,
     232,   228,     0,   230,     0,     0,   354,   355,   350,  1293,
     367,  1720,  1721,   386,   388,   387,   370,  1690,   383,     0,
     376,   377,     0,   373,   372,  1728,   369,   342,  1513,   362,
       0,   347,  1726,  1726,  1726,   435,   441,   434,   436,   430,
     309,   308,   310,   293,  1713,   294,   296,   298,   440,   438,
     439,     0,   414,   403,  1713,  1746,     0,   404,     0,     0,
       0,   484,   471,   483,   470,   480,   989,   988,     0,     0,
       0,     0,     0,   524,   499,     0,   445,   980,  1513,   982,
     979,   783,   848,     0,   774,   773,   776,   777,   779,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1527,  1513,     0,
       0,     0,     0,  1513,     0,  1513,  1513,  1513,  1513,  1513,
       0,  1513,  1513,  1513,     0,     0,  1513,  1513,     0,  1513,
       0,  1513,  1513,  1511,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,     0,  1709,    20,     0,  1015,     0,     0,   637,
     639,   635,     0,  1448,  1450,     0,     0,     0,  1428,     0,
    1436,  1411,  1420,  1422,  1426,     0,  1412,  1038,  1039,  1031,
    1033,     0,  1030,  1713,   641,   680,   678,   677,   970,   711,
    1192,  1191,  1134,  1129,   448,   699,   701,     0,   697,     0,
     722,  1002,  1001,   726,   719,   718,     0,     0,     0,  1750,
       0,     0,  1376,  1513,     0,  1332,  1728,     0,     0,     0,
       0,     0,     0,   955,     0,   956,  1021,  1022,  1320,  1153,
    1151,     0,  1166,     0,  1146,  1159,  1148,  1304,  1317,     0,
    1313,  1180,  1370,  1177,   365,  1371,   364,  1372,  1203,  1270,
    1265,  1268,     0,  1259,  1261,  1264,     0,     0,  1513,     0,
       0,  1228,  1239,   660,  1513,     0,  1230,  1726,  1223,  1231,
    1229,  1222,  1513,  1243,     0,  1246,  1287,  1296,  1290,  1291,
    1715,  1296,  1283,     0,  1696,     0,     0,  1480,     0,     0,
    1120,     0,     0,  1680,     0,     0,  1172,  1163,  1174,     0,
    1188,  1189,  1719,  1719,  1175,  1184,     0,     0,   665,  1417,
     733,   560,     0,  1513,   611,   613,   617,   683,     0,   749,
     746,   745,   763,  1513,   748,   747,  1513,     0,   756,   763,
     770,   737,   739,  1109,  1110,  1111,  1112,  1113,  1108,   742,
     736,   738,   793,   790,   816,  1513,   799,   838,   796,     0,
     808,     0,     0,   813,  1064,  1513,  1050,     0,  1065,     0,
    1056,     0,  1097,  1054,  1094,  1093,   129,   128,   130,   127,
       0,   109,   108,     0,   151,   152,   153,   149,   168,   169,
     170,   165,   171,   132,   181,   183,   179,   180,     0,     0,
     146,    98,    97,   218,     0,   217,     0,   287,   286,   278,
     279,   280,   275,     0,   290,   235,   236,   352,   389,  1686,
       0,     0,     0,   382,  1690,   375,  1690,   371,     0,   363,
       0,     0,     0,   311,     0,  1680,  1680,  1680,   422,   423,
     425,     0,   411,  1728,   410,   488,   487,   485,   469,   990,
     985,   984,   986,   987,   496,  1004,   847,  1513,  1010,  1009,
    1513,  1007,  1513,     0,     0,     0,  1513,  1513,  1717,     0,
    1513,     0,  1513,  1513,     0,  1513,  1513,     0,     0,  1513,
    1513,  1513,  1513,  1576,  1577,  1578,  1579,  1580,     0,  1513,
       0,  1513,  1551,  1513,  1513,  1513,  1682,  1513,  1513,  1513,
    1513,     0,  1606,  1513,  1513,     0,     0,  1513,     0,  1513,
       0,  1513,  1513,     0,  1728,     0,  1710,  1779,  1769,  1770,
       0,   994,   638,     0,     0,     0,  1449,     0,     0,     0,
       0,  1421,  1513,     0,     0,     0,     0,  1037,     0,     0,
    1513,  1513,     0,     0,     0,  1453,  1378,  1382,     0,  1698,
    1398,  1399,  1386,  1379,     0,  1367,     0,  1366,  1368,  1369,
    1330,  1353,  1354,  1513,  1328,  1347,     0,   943,     0,     0,
       0,     0,  1321,  1157,  1713,  1149,     0,     0,  1269,     0,
       0,     0,  1262,     0,  1236,  1237,  1238,  1235,  1233,  1232,
       0,  1234,  1249,  1248,  1244,     0,  1289,  1282,  1713,  1697,
    1734,     0,     0,  1477,  1476,  1478,  1479,  1470,  1122,     0,
    1214,  1496,  1497,  1513,  1506,  1491,  1500,  1504,     0,  1185,
    1186,  1187,     0,   669,     0,   750,   764,     0,  1513,  1513,
     755,     0,   827,   826,   819,  1513,   822,   828,   815,   817,
     821,   823,   820,  1513,   805,   810,  1099,     0,  1084,  1072,
    1513,   132,   139,   148,     0,  1713,   172,   144,   145,   147,
     216,     0,  1742,  1742,   277,     0,   226,   393,   392,  1513,
    1686,  1690,     0,   381,   380,   385,   431,   432,   433,   301,
     303,   302,     0,     0,     0,   424,   415,   418,   420,     0,
    1525,     0,  1515,  1008,  1513,  1522,  1523,  1586,  1587,  1581,
    1582,  1588,  1589,     0,  1583,  1564,  1513,  1567,  1513,  1718,
    1740,  1535,     0,  1532,  1513,  1513,  1543,     0,     0,  1544,
    1545,  1513,  1598,     0,  1600,     0,  1602,     0,  1547,     0,
    1592,  1682,  1549,  1520,     0,     0,  1513,  1683,  1682,  1593,
    1704,     0,     0,     0,  1682,  1557,  1607,  1608,     0,  1513,
    1570,  1513,  1546,  1560,     0,  1561,     0,  1562,     0,  1519,
     549,     0,  1773,  1781,  1780,  1771,  1784,  1783,  1785,   636,
    1451,  1427,     0,  1413,  1430,  1431,  1429,  1424,  1423,     0,
       0,  1432,  1433,  1425,     0,  1034,  1036,   642,   681,   679,
       0,   703,   702,  1383,  1384,  1699,     0,  1400,  1680,  1513,
    1355,     0,  1513,  1358,     0,  1347,  1351,  1333,     0,  1349,
    1350,     0,   957,   958,     0,  1277,     0,     0,  1274,     0,
    1273,     0,     0,  1285,     0,     0,     0,  1288,     0,  1735,
    1295,     0,  1121,     0,  1680,  1499,  1696,  1696,  1696,  1505,
       0,   664,   619,   757,  1513,   758,  1513,   760,   791,   828,
       0,   825,  1513,  1513,  1513,  1513,   829,     0,  1513,     0,
       0,  1082,  1074,  1078,  1080,  1079,     0,  1073,  1087,  1099,
     136,   154,     0,   203,  1713,  1713,     0,   391,  1513,   379,
    1690,   295,   297,   299,   300,   419,   409,  1526,     0,  1585,
       0,     0,  1565,     0,  1568,     0,     0,  1682,  1529,  1513,
    1534,     0,  1539,  1540,  1596,     0,  1599,  1601,  1603,  1591,
       0,  1541,  1542,  1554,  1513,  1555,  1594,  1705,  1706,  1513,
    1536,  1537,  1538,     0,  1558,     0,  1571,     0,  1563,  1573,
    1574,     0,  1765,     0,  1772,  1782,  1786,  1728,  1437,  1435,
       0,  1035,  1513,  1513,  1361,  1513,  1359,  1329,  1335,     0,
    1348,     0,     0,  1167,  1513,     0,  1271,  1266,  1224,  1226,
    1225,  1713,  1298,     0,     0,  1284,  1297,  1481,  1513,  1498,
       0,     0,     0,     0,     0,     0,   830,   824,   818,  1513,
     835,   831,  1513,  1513,   833,     0,  1100,  1095,  1778,  1775,
    1777,  1776,  1076,  1077,     0,  1081,     0,  1085,     0,  1070,
       0,   131,     0,   155,     0,   133,   134,     0,     0,   291,
     390,   378,  1521,  1524,  1584,  1566,  1569,  1513,     0,  1530,
       0,  1533,  1597,  1548,  1553,     0,  1513,  1556,  1559,  1572,
    1766,  1774,     0,  1434,  1403,  1402,  1401,  1361,  1374,  1373,
    1356,  1362,  1363,  1711,  1361,  1513,  1361,  1513,  1513,  1336,
    1337,  1352,  1219,  1279,  1278,  1276,  1275,     0,  1300,  1713,
    1215,  1508,  1507,  1502,  1501,   759,   761,     0,   836,     0,
       0,  1083,  1700,  1088,  1090,  1098,   137,   156,   157,   150,
     135,   288,   289,  1741,  1528,  1531,  1552,  1595,  1767,  1768,
    1331,  1364,  1712,  1513,  1360,  1361,  1513,  1344,  1340,  1513,
    1513,  1338,  1323,  1299,  1302,     0,  1696,  1696,   832,   834,
    1701,     0,  1700,  1091,     0,  1365,  1346,  1345,  1339,     0,
    1301,     0,     0,     0,     0,  1700,  1071,  1303,  1509,  1503,
       0,     0,     0
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2212, -2212, -2212,   991, -2212, -2212, -2212, -2212,  2168,  2038,
    -221,  1949, -2212, -2212, -2212,  2050, -2212, -2212, -2212, -2212,
   -2212,  2055, -2212, -2212, -2212, -2212, -2212,  2034, -2212,    26,
    1914, -2212,  1910, -2212, -2212, -2212,  1971, -2212,  1906, -2212,
    1825,  1507, -2212,  1874,   479, -2212, -2212, -2212,  1536, -2212,
   -2212, -2212,   -79, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212,   580, -2212,  1905,
   -2212,  1826, -2212,   604,  1111, -2212, -2212, -2212,  1514, -2212,
   -2212, -2212, -2212, -2212, -2212,  1781, -2212, -2212, -2212, -2212,
    -915, -2212, -2212,   556, -2212, -1402, -2212,  1109, -2212,  1120,
   -1026, -2212, -2212, -2212, -2212,  1978, -2212, -2212, -2212, -2212,
   -2212,  1881, -2212, -2212, -2212, -2212,  1769, -2212,  1484, -2212,
   -2212,  1779, -2212,  1092, -1385, -2212,  1103, -2212, -2212, -2212,
     536, -2212, -2212, -2212,   549, -2212, -2212,  1105,  -578,  -307,
   -2212, -2212,  1073, -2212,  1077,  1472,   -32, -2212, -2212,   -86,
    -498, -2212,   163, -2212, -2212,  1091, -2212, -2212,  -184, -2212,
   -2212,  1756, -2212, -2212,  1473, -2212,   512,  1084,  1089, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212,  1927,    76,  1923, -2212,  -241,
    -500,  -495,  -213,  -554, -2212,  1275, -2212, -2212, -2212,  1277,
     709, -2212, -2212, -2212, -2212,  1670, -2212,   886, -2212,    82,
    2057, -2212, -2212, -2212, -2212,  -528, -2212,   738, -2212, -2212,
   -2212, -2212,  1673, -2212, -2212, -2212, -2212, -2212, -2212,   717,
   -2212, -2212, -2212, -2212, -2212, -2212,  1672, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212, -2212,  1332, -2212,   896, -2212, -2212,
    1306,  1268, -2212,  -575,  -942, -2212, -2212,   293, -2212, -1477,
    -205, -2212,   848, -2212,   216,  -663,  -653, -2212, -2212, -2212,
   -2212, -2212, -2212,     0, -2212, -2212, -2212, -2212,   689, -2212,
   -2212, -2212, -2212,   684, -2212, -2212,   701, -2212, -2212,  -223,
   -2212,     2, -2211, -2212, -1103,  -300,  1716,   500,  -469,  1508,
    -216,  -515,  -874,   -12, -2212, -2212, -1130,  -833, -2212, -2212,
   -2212,  1686, -2212,   247,  -292,  -948, -1286,  -388,  -509,  -713,
    -737, -2212,  -492, -2212, -2212, -2212,    30,  -885,   514,   490,
   -1240,  -832,  -363, -2212, -2212, -2212,   863, -2212, -2212, -2212,
   -2212,   933, -2212, -2212, -1014, -2212, -2212, -2212, -2212, -2212,
    1270, -2212,  1271, -1011, -2212,   351,  1693, -2212, -2212, -2212,
   -2212,    15, -2212, -2212, -2212,  -199, -2212, -2212, -2212, -2212,
   -2212, -2212, -2212, -2212,  1261,   696, -1435,  -201,  -262,  -824,
   -2212, -2212, -2212, -2212,  1699, -2212, -2212,  -436,  1469,   539,
    -502, -2212, -2212, -2212, -2212, -2212, -2212, -2212,   861, -2212,
   -2212,   791, -2212, -2212, -2212, -2212, -2212,  1747, -2212, -2212,
   -2212,   370,   268,  -318, -2212, -2212, -2212, -2212, -2212,  1700,
   -2212, -2212, -2212,   858, -2212, -2212, -2212,  1694, -2212, -2212,
   -2212, -2212, -2212,  -823, -2212, -2212, -2212,   839, -2212,   832,
   -2212, -2212, -2212,  1702, -2212, -2212, -2212, -2212,   859, -2212,
   -2212, -2212, -2212,  -130, -1828, -2212,  -129, -2212,  -264, -2212,
   -2212, -2212, -2212,  -810, -1219, -2212, -1043,  -386,  -883, -2212,
    -260,  -411, -2212, -2212, -2212, -2212,  1703, -2212, -2212, -2212,
     889, -2212, -1565,  -517,  -423, -2212, -2212, -2212, -2212, -2212,
   -2212,  -105, -2212,  -348, -1257, -1450, -2212, -2212, -2212,  -101,
   -2212,   143, -2212,   -96, -1469, -2212,  -333, -2212, -2212, -2212,
   -2212,   502,   175, -2212, -1528, -2212, -2212,   177, -2212, -2212,
   -2212, -2212,  1722, -2212,   550, -2212,  -316,   843, -1518,   199,
   -2212, -2212,   207, -2212,  1020, -2212, -2212, -2212, -2212, -2212,
    1024, -2212, -2212, -2212,   -21,  -543, -2212, -2212, -2212,  1726,
   -2212, -2212,  1470,   125, -2212, -2212,  1440,  -399, -2212,  1725,
   -2212, -2212, -2212, -2212, -2212, -2212,   -95, -2212, -2212,   126,
     574, -2212, -2212, -2212, -2212, -2212, -2212,    41,   246, -2212,
      13, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212, -2212,
   -2212, -2212,  -421, -2062,  1639,  -877,  -234, -1091,  -131,  1938,
   -1670, -2212, -1687, -2212, -2212, -2212, -2212, -2212,  -122, -1001,
   -2212,  -993,  -190,   594,  -756,  -662,    75, -2212, -2212,   121,
   -2212, -2212,  -683, -2212,  -708,  -851,  -437, -2212,  -273,   157,
   -2212, -2212, -2212, -2212,   237, -2212,  -276, -2212, -2212, -2212,
   -2212, -2212,  2123, -2212, -2212,  2128, -2212
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,     2,     3,   555,   184,     5,     6,     7,     8,    22,
     140,   187,   164,    19,   127,   128,   129,   177,   130,   131,
     132,   154,   133,   134,   135,   169,   147,   148,   239,   112,
     232,   273,   274,   137,   182,   213,   214,   279,   280,   363,
     364,  1072,   678,   281,   282,  1600,  1601,   654,   655,   656,
    1999,   657,  2276,  2625,  2621,   658,   659,   660,   661,   662,
    2273,  2007,  2624,  2699,   663,   664,   665,   666,  1055,  2011,
     667,   668,   669,   670,  1610,   671,  1614,  2016,   289,   290,
     371,   372,   373,  1080,  1630,   374,   375,   689,   690,   376,
     377,   697,   685,   417,   418,   419,  1651,  1101,  1653,   420,
     421,  1643,  1644,  1645,  2029,  1646,   422,   702,  2286,  1129,
    1130,  1131,   161,   183,   226,   227,   291,   294,   293,   292,
     324,   325,   727,  1122,   326,   437,   438,   439,  1104,  1658,
     440,   720,  1119,  1120,  2715,  1111,  1112,   441,  1116,  1673,
    1674,  1676,   442,  1663,  1664,  2289,   443,   332,   333,   334,
     465,   742,   743,   744,   745,  1142,  1143,  1144,  2306,  2307,
    1145,  2058,  2059,   335,   336,  1685,  1686,   337,   844,   338,
     466,   467,   468,   753,   754,   755,  1158,  1712,  1713,  1153,
     756,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   771,  1172,   484,   485,
     486,   229,   305,   267,   301,   302,   502,   355,   806,   556,
     557,   558,   559,   560,   561,   957,   562,   563,   958,   959,
    1453,  1526,   564,   565,   566,   962,   814,  1349,  1814,   244,
     245,  1556,  1557,   903,   904,   980,   567,  1506,  1938,   568,
     569,   570,   965,   829,  1350,  1817,  2161,  2160,   571,   969,
     572,   573,  1530,   574,   575,   576,   972,   853,   854,   855,
      16,    17,   577,   578,   857,   860,  1371,   861,   579,   939,
     940,   981,   982,   995,   984,   985,   986,  1957,   987,  1958,
     988,   989,  1543,   794,   795,   796,   797,   580,   581,   582,
     991,  1561,  2251,  1562,   975,   583,   584,   997,   998,   999,
    1568,  2477,  1569,  1570,  1571,  1572,  1573,  1975,  2258,  2259,
    2260,  2261,  2601,  1978,  1000,   798,   351,   352,   507,  1161,
     353,   297,   344,   298,   114,   585,   869,   870,   586,   587,
     588,  1002,   880,  1327,  1328,  1953,   831,   816,   817,   799,
    1689,  1169,   589,  1321,   808,   590,  1372,   508,   800,  2080,
    2081,   818,   801,   591,   882,  1416,  1417,  1418,   592,   828,
    1345,  1346,  1809,  1810,  1622,   593,  1009,  1010,  1011,  1012,
    1013,   594,  1014,  1015,  1574,  1016,  1582,  1018,  1989,  2694,
    2268,  2269,  2614,  2482,  2483,  2484,  2485,  2488,  2692,  2619,
    2732,  2734,  2745,  1019,  1020,  1591,  1592,  2479,   846,   505,
    1969,   595,   596,   597,  1024,   925,   847,  2350,   849,   850,
     851,   598,   599,   600,   884,  1422,  1862,  1425,  1426,  1863,
    1498,  1499,  1925,  2195,   601,   602,   933,   891,   892,  1503,
    1934,  1935,  1354,  1355,  2162,   603,   604,   605,   834,  1027,
     606,   607,   893,  1441,   608,   609,   610,  1030,   926,   611,
     874,   907,  1900,   908,   612,   909,  1468,  1469,  1470,  1471,
    2214,   613,   614,  1033,   896,   897,  1445,  1447,  1448,  1449,
    1886,   615,  1443,  1880,  1881,  2197,  2202,  2437,  2438,  2675,
     616,   617,   618,  1472,  1473,  1910,  1107,  1476,  1912,  2446,
    2585,  2723,   619,   620,   621,   622,  1036,   886,   887,  1430,
    1431,  1432,  1857,  1858,  2724,  1401,   873,   623,  2184,  2185,
    2425,  2427,  2669,  2670,  2716,  2717,  2428,  2429,  2430,  2180,
    2181,  2182,  2422,  2423,  2660,  2661,  2662,  2183,  1876,  2663,
     624,  1393,  1394,  1395,  1396,  1397,  2170,  2171,  2656,   625,
     626,   627,  1039,   824,  1342,   628,   825,  1801,  1802,  1803,
    2397,  2403,  1804,  1337,  1338,   629,   827,   630,   821,  1332,
    1333,  1795,   631,   632,   865,   866,   633,   634,   635,  1042,
     915,   916,   917,   918,  2227,  1483,  1479,  1480,   636,  1045,
     637,   638,   930,   931,  1495,  2231,  2232,  2235,  2236,  2237,
     802,   803,  1305,  1306,  2108,  2323,  2510,  2324,  2351,  2358,
    2359,  1307,  1308,  2368,  1309,  1310,  1311,  1312,  1313,  1314,
    1315,  1316,   992,  2360,  1124,  2040,  1805,   711,  1913,   716,
    2220,  2416,  2731,   673,  2539,   735,  2137,  2713,  1558,  1058,
    2330,  1665,   172,  1176,  1458,  1474,   304,   311,  2450,   679,
     707,  2517,  1373,  1174,  1138,  1398,   189,   488,  1477,   339,
     216,   217,  1784,  2138,  2139,  2554,  2613,  2140,  2388,  2557,
     218,   254,   255,   219,   250,   251,   220
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     151,   152,   113,   113,   350,   954,   835,   983,  1588,  1113,
     945,   269,  1070,   905,   864,  1435,   856,  1091,  1092,  1462,
    1451,   888,  1688,  1666,   762,   881,   449,  1620,   871,   927,
    1168,   303,   179,   180,   181,  1147,  1392,  1536,   864,   805,
    1550,   116,   767,  1789,  1791,  1525,  1408,  1597,   296,   503,
     190,  1021,  2198,  1873,  1409,  1529,   948,  2021,  2022,  1623,
     345,   949,  1951,  1955,   950,   233,  1319,   303,   118,  1164,
     955,   264,  1496,  1353,  1353,   747,   748,  1423,   765,  1007,
    1828,  1496,  1353,  1377,  1466,  1008,   898,   504,   848,   749,
     750,   751,   495,  1163,  1353,  1423,  2443,  1126,  1353,  1339,
    1164,  1475,   772,  1693, -1755,   698,   858,  1127,  2357,   740,
   -1755,   497,   878, -1334,   766,   639,   836,   858, -1680, -1680,
    1667, -1755,    20,  1164,   361,  1853, -1680,  1185,   113,   492,
    1467, -1755,  1538,   836,   833,  1602,   285, -1680,  1186,   948,
    1164,  2471,   120,  1704,   949,  1108,   308,   950,  1381,  1121,
     366,   495,   836,   819,  1381,  2383,  1992,   924,   150,   783,
   -1713,  1667,   819,  1815,  1691,   710,   165, -1755,  1565,   168,
     784,   819,  -314,   644,  -314,  -314,  -314,   221,  1551,   222,
     223,   224,   819,   687,  1552,  1367,   920,  -995,  1961,  1368,
    1553,  1843,   967,   921,   782,  2480,   347,  2481,   361, -1713,
    1621,  1920,  2152,   826,   444, -1755,  1050,   710,   682,  1970,
   -1755,  1075,   993,   487,   889,   809,   815,  1551,   823,   823,
    1656,   830,   687,  1552,   845,   815,  1554,   299,   672,  1553,
     868,   819,  2004,   876,   815,  -304, -1686,  -319,  2030,   746,
    -973,   906,   725,   913,   367,   815,  1149,   929,  1151,   936,
   -1713,   941,  1850,  1906, -1688,   862,  1906,   699,   703,   733,
     121,  1594,   766,   299,  2604,  1554,  1450,   368,   776,   162,
       9,    10,   777,  1616,   781,  1848,  1849,  2583,  1334,   495,
    1563,   914,   342,  2151,   769, -1748,  1123, -1755,   738,  2530,
   -1688, -1748,   708,  2049,   815,  1369,  -976,  1682,  1729,   714,
    1419,  1668,  2543,  2005,  2091,   717,   864,  1331,   722,   724,
     730,  1908,  2169,  1132,  1682,   444,   445,   277,  -652,  -652,
    -652,  1022,  1380,  1879,   895, -1713,  1374,  1099,   736,   188,
     946,   715,   491, -1713,  -850,   143,  2175,   759,   342,   215,
     764,   731,  1668,  1551,   487,  1100,   947,  -802,  1375,  1552,
     864,   312,  1820,  1450,  1420,  1553,  1892,  1403, -1040,     1,
   -1750,  1069,  -802,   343,   120,   150,   778,   871,    13,   278,
     215,   369,   370,  1436, -1755,  1460,   688,  2110,    18,  1060,
     993,  2176,  2287,   773,  2584,  1909,  2123,   498,  2687,  2125,
    2366,  1554,  2689,   675,   676,    21,  1669, -1334,  1450,  -652,
     696,  1450,   644,  1360,  2092,  1348,   739,  1595,  1133,  1340,
   -1686,  1361,  1611, -1680,   774,  1331,   734,  1844,   348,   343,
     362,  2151,  1322,   494,  2153,   683,  2006,  -319,  1716,  1717,
    1718,  2583,   300,  1617,  1612,  1461,    24,  1669,  1786, -1692,
     968,   499,  2444,  1683,  1684,   150,   498,   819, -1755,  1324,
    1325,  1047,  1670,   819,   994,  2638,  1657,  1052,  2174,  2155,
    1683,  1684,   770,   833,   500,  2177,  1845, -1680,   300,  1128,
     495,  1695,   696,  1822,   684,  2042, -1688,  1076,  1696,   696,
     811,  -850,   121,  -652,  -652,  -652,  2384,   -70,  1708,   497,
   -1680,   150,   890,  -652,   362, -1748,   144,  1575,   696,  2142,
     499, -1296,  1577,  2204,  1106,  1170, -1755,  1180,   501,  1082,
     815,  1343, -1688,   495,  2299,   819,   815,  2292,  2178,   349,
    1421,  2300,   426,   672,  1051,  2154,  1053,   823,  1736,  1737,
     150,  1351,   497,   144, -1680,  1486,  1692,  1109,  2584,   427,
    1738,   845,  1159,  1922,  1680,  -652,  1839,   845,   495,  1637,
     859, -1748,  1816, -1713,   696,  1992,  1638, -1748,  2424,   779,
     819,   819,  1077,   428,  -652,  1318,  1882,   501,  2367,   868,
     122,    21,  1183,  1400,   498,  1404,  2043, -1688,    25,  1855,
     763,  1962,  1094,  1095,   123,  1096,  1370,  1098,  1931,   124,
     125,  1948, -1713,  1846,  1459,  1323,  1399,  1950,  1954,  1454,
     126,  1456,  1971,  1117,  2535,  2617,   286,   906,   694,   145,
    1125,  1672,  1904, -1688,   741,   680,   913,   265, -1728,  -443,
    1671,  1693,   994,   815,   815,   696,  1358,  1906,   499,  1110,
      11,  2284,  1898,  2228,   696,   287,   288,   775,   922,   941,
    1899,  1901,  2169,   819,  1703,  1341,   145,  1618,   819,   862,
    1707,  1564,  1672,   780,   914,   696,   150, -1713,  -652,  2445,
    1613,  -314,   234,   235,   696,   150,   225,    12, -1692,   429,
    2039,  1933,  2103,   322,  1132,   696,   157,  2472,  1442,  1505,
     430,  1544,  1545,  1546,  1547,  1548,  1549,   677,  1378,  1636,
     146,  1376, -1728,  1056,  1407,   501,  2179, -1755,  1864,  1928,
    1497,   956,  1439,  2288,  1165,  1166,   815,  1747,  1132,  1926,
    -652,   815,  1866,  1167,    26, -1755,  1424,  1836, -1713,  2665,
    2188,  2189,  2190, -1713,  2104,   270, -1755,   146, -1684,  2608,
    1637, -1686,  -535,  1652,  1365,  1165,  1166,  1638,  1580,  1583,
    1583,  1583,    -3,   266,  1167,  1639,  1516,   752,  2537,  2198,
    -976,  -976,  -976,  -976,  -976,  -995,    27,   119,  1165,  1166,
     316, -1680, -1680,  1048,  2666,   498,   696,  1167,   431,   432,
   -1680,  2465,  2467,  1535,   760,  1165,  1166,  1175,  1560,  2609,
   -1755,  1057,  1542,   433,  1167,   434,  2590,  2591,  2592,  1334,
    1566,  2610,   122,  1126,   812,   813,  2156,  1840,  2421,   173,
    2538,  1996,   136,  1127,  1587,  1567,   123,  1555,   498,  1139,
     766,   124,   125,  1331,   449,  -534,  2031,   864,   948,   499,
     188,  1792,   126,   949,  1731, -1713,   950,   271,  1335,  -534,
    -534,  -534,   276,  1598,   236,  1603,   270,  1773,  1069,   316,
    2313,   150,   500,   498,  1049,  1501,  1555,  -770,  -770,  -770,
    -770,  -770,  -770,  2157,  1106,  1336,  1827,  1829,  2389,   188,
    1490,   138,   499,   323,  1637,     1,  2572,  2611,  1381,  1366,
    1697,  1638,  2262,  1502,  1885,   435,  2105,  2411,  2412,  2158,
    2582,  1640,  1727,  1140,  1730,   500,   501, -1719,  2503,  1123,
     270,  1659,  2313,  1709,   150,  2504,   426,   499,   761, -1719,
     139,  2667,  1854,   871,   871,  2432,   174,  1701,  2134,  2216,
    1491,  1710,  1492,   427,  1994,  2612,  1382,  1383,  1871,  1383,
    1384,  1385,  1384,  1385,  2135,  1596,  2050,  2051,  2052,   501,
    1604,  -304,   366,  1605,  1606,   113,  1607,   428,   271,  2240,
    2241,  1687,  1995,  2452,  1637,   696,  1619, -1713,  1141,   272,
    1700,  1638,  1624,  2293,  1626,  2294,  1356,   237,  1838,   819,
   -1755,  1841,   954,  2186,   501,  1726,  2136,   819,   942,  1633,
    1634,   277,  1555,  1512,  1641,  1997,   943,  1331,  1921,  1654,
    2658,  2106,  2070,  2071,  2072,  2073, -1755,  2594,  2651,  2595,
     696,     4,   271,  1893,   436, -1719,  1678,  2062,  1386,  1984,
    1386,   141,   819,   819,  1550, -1748,   954,   117,  2659,  2107,
    1005,   238,  1437,  2048,  1931,  1392,  1392,  1387,  2678,  1387,
    1998,   150,   815,   278,  2215,  1006,   367,  2263,  2217,   830,
    1790,   175,   176,   954,  2564,  1787,  1821,  2421,  2067,   150,
    1157,  1800,  1806,   429,  1807,  2744,   309,   142,   819,   368,
    1993,  2691,  1661,  1662,   430,  1787,  2741,  2742,  2751,  1823,
     272,   202,  1063,  1825,  1826,   815,  1790,  1963,  1964,  1965,
    1787,  1811,  2317,  1832,  1539,  1540,  1347,  2318,   864,  2668,
    1915,  1991,   700,  2456,   701,   150,  1907,  2708,   354,  1911,
     820,   149,  1064,  1949,  1915,  1640,  1642,  1933,   852,   820,
    1362,   819,   358,  2509,  2457,   868,   868,   877,   820,  1821,
    1702,  1790,   153,  1412,   272,  1788,  1702,   919,  1787,   820,
    1837,   932,  1821,   819,   819,  1797,   156,  1410,  1867,   159,
    1808,  1539,  1540,  1870,  1388,  1389,  1388,  1389,  1874,   160,
     819,  2210,   431,   432,  1390,  1391,  1390,  1391,  1966,   166,
    2245,   696,  1427,   369,   370,   203,   204,   433,  1891,   434,
     205,  1440,   206,  1413,   906,  1128,   207,   208,   820,   209,
     210,  1821,  1488,  2447,   211,  1414,  1875,  2655,  2657,   167,
    2664,  1917,  1821,  2248,  2249,   171,   815,  1790,  2710,  1155,
    1065,  1156,  1157,   193,  1489,  2714,  1787,  2718,   178,   194,
    2499,  1500,  2250,  1932,   240,   197,   198,  1800,  1940, -1748,
    2317,   195,   196,   199,  2008,  2318,  2319,  2248,  2249,  1869,
   -1719,   185,  1066,  1454,   247,  2009,  1132,   819,  1883,   200,
      14,    15,  2010,   783,   954,   248,  2463,  2474,  2475,   197,
     198,   241,  1967,   954,   784,   186,  2736,   199,   188,   435,
    1918,  1415,  2146,   191,   192, -1719,  2596,  1649,   228,   -78,
    1923,   242,   243,   200,   -78,   -78,  2737,  1916,  1650,  2737,
    2737, -1748,   230,   -78,   -78,   -78,  1719,  1720,  1721,  1722,
     864,  1719,  1720,  1721,  1722,  2321,  2322,  2117,  2118,  2119,
     815,  2069,   252,   253,  1968,  1084,  1085,  1086,   718,   212,
     719,  2002,  1942,  2077,   700,  2082,   701,  2263,  2085,  1550,
    1137,  1146,  2088,  1536,  2095,   954,  2096,  2094,  1189,  1190,
    2099,  2100,  2101,  2102,  2480,  2109,  2481,  1535,  2735,   231,
    2115,  2116,   246,  2120,  1952,  1952,  1959,  2212,   249,  2213,
    2192,  1191,  1192,  2130,  2131,   262,   871,   871,   871,   871,
     871,  2697,  2320,  2698,   793,  1392,  1392,  1392,  1982,  2433,
    1539,  1540,   954,  1581,  1584,  1585,  1608,  1609,   728,  1987,
    2262,   256,  1178,   449,  1179,  2034,  1661,  1662,  1874,  2113,
    2114,  1721,  1722,   258,   820,  2207,  2386,  2387,   954,   259,
     820,  2013,  2041,  2211,   260,  2474,  2475,   935,   340,   341,
    2256,  2309,  2168,  2020,  1659,  1734,  1735,  1834,  1835,  2631,
    2719,  2720,   261,  2498,   275,   852,  1875,  2402,   295,   300,
     276,   852,   306,  2321,  2322,   313,   314,   317,   954,   318,
     990,   319,   996,   954,   320,   354,   357,   359,   365,   845,
     378,   845,   423,   424,   845,   446,   447,  1402,   845,   448,
     489,   490,   493,   845,   506,   509,   845,   845,   845,   845,
     640,   845,  1874,   674,   686,   691,   845,   845,  2607,   845,
     692,  1874,  2381,   693,  1874,  2000,  2266,   704,   705,   845,
     845,   709,   706,   712,   710,   830,   715,   726,   732,  1351,
     919,  1351,  2064,   737,   757,  2018,  2019,   820,   820,   804,
    1875,  1800,  2233,  2024,  2192,  2192,   758,   832,   807,  1875,
     833,   872,  1875,  1544,  1545,  1546,  1547,  1548,  1549,   883,
     885,  1550,   937,   951,   960,  2263,  2602,  2602,  1351,   961,
     964,   819,   970,   974,  1001,   971,  2165,  1023,  1026,   819,
    1038,  1035,  1044,  1874,  2570,  1029,   677,  2187,   868,   868,
     868,   868,   868,  1351,  1041,  1032,  2571,  1054,  1059,   696,
    1067,  2193,  1068,  2141,  1069,  1074,   819,  1071,  1078,  1081,
    1079,  1088,  2054,  1087,  2143,  1089,  2497,  1093, -1680, -1680,
     820,  1875,  2061,  2147,  1090,   820, -1680,  1097,  1874,   954,
    2206,  1102,  1103,   954,   815,  2209,  1105, -1680,  1115,  2494,
    2495,  1118,   815,  1135,  1150,  1136,  1137,  1141,   747,  2695,
    1160,  1152, -1714,  1171,  1173,  1175,  1177,  1181,  2225,   830,
    1351,  1182,   819,  1184,  2234,  1188,  1875,  1193,  1320,  1932,
    1326,  1344,  1348,  1353,  2302,  2303,  2304,  2243,  1359,  1800,
    1187,  2311,   954,  1360,  2222,  1363,  2314,   954,  1195,   954,
    2196,  2602,  1317,  1364,  1405,  2602,  2226,  1406,  1411,  2337,
    2338,  1428,  1429,  2341,  2343,  2345,  2347,   954,  1433,  2435,
    1434,  1438,  1444,  2201,  2203,  1446,  1455,  2354,  2355,  2356,
    1352,  2361,  2362,  2363,   954,   815,   871,   871,   871,  2060,
    1457,  2159,  1467,  1478,  1484,  2378,  1494,  1504,  1507,  1508,
    1510,  1511,  2221,   641,  1513,  1126,  2230,  1527,  1531,  1381,
   -1016,  1590,  2238,  1576,  1593,  1127,  1057,   642,  1621,  1627,
    1628,  1615,   766,  1629,  1625,  1632,  1648,  1655,  1108,  1677,
     643,  1675,  1681,  1694,  2274,  1690,  1698,   299,  -411,  1711,
    1723,  1724,  1725,  1728,  1731,  1739,  1783,  1740,  2246,  1741,
    1742,  1959,  1819,  1743,  1744,  1824,  1813,  1745,  1833,   644,
    1794,  2489,  1746,  1748,  1749,  1750,  2041,  1751,  1752,   859,
    2257,  1753,  1754,  1755,  1756,  1842,  1757,   845,  1758,  1759,
    1760,  1761,   845,  1762,  2271,  2630,  1763,  2272,  1765,  1766,
    1767,  1768,  2301,  1769,  1770,   845,   845,  1771,  1847,   845,
     845,   845,   845,  1772,  2279,  1851,  1774,  1852,  1775,   845,
    1887,  1859,  1776,   845,   845,   845,  1777,   845,   845,   845,
     845,  1778,  1779,  1780,   641,  1781,   990,  1537,   819,  1860,
    1861,   845,   645,  1888,  2296,  2297,  2298,  1889,   642,  1890,
    1914,  1894,  1351,  -304,   830,  2308,  1902,  1924,  1800,  1505,
    2393,   643,  1937,  1800,   503,  1944,   954,  1941,  1945,  1943,
    1972,  1973,   968,   830,   830,  1977,   864,  1979,  1986,  1566,
    1595,  1594,  1985, -1680,  2003,  2012,  2015,  2023,  2508,  2025,
     644,  2014,  2026,  1874,  2027,   954,  2028,   646,   868,   868,
     868,   830,   504,  2033,  2035,  2652,   820,  2436,  2256,  2036,
    2045,  2037,  2053,  2044,   820,  2525,  2046,   819,   647,  2055,
    1891,  2056,  2057,  2063,  2067,  2089,  2074,  2065,  2066,  2076,
    2534,  1875,  2090,  2112,  2093,  2133,  2144, -1680,  1351,   830,
    2149,  2145,  2163,   913,  2148,  2164,  2234,  2166,  2172,   820,
     820,  2167,  2461,  2191,  -974,  2199,  2194,  2205,  2219,  2410,
   -1680,   327,  2242,   645,  2229,   648,   766,  2453,  1540,  2218,
     649,  2265,  2270,  2460,  2267,  2275,  2277,  2278,  2280,  2606,
     815,   914,  2281,  2282,  2283,  2285,   328,   329,   330,   331,
    2291,  2290,  2295,  2329,  2315,   820,  2439,   650,  2316,  2331,
    2357,  2382,  2333,  2135, -1680,  2392,  2336,  2563,  2339,  2340,
    1106,  2404,  2348,  2352,  2380,  2365,  2390,   651,   646,  1380,
    2372,  2373,  1877,  2375,   845,  2377,  2405,  2406,  2414,  2415,
    2419,  2426,  2418,  2431,  2440, -1692,  2449,   652,  2451,   647,
    2473,  2454,  2462,  2233,  2478,  2491,  1733,   864,  1560,  2486,
    2493,   845, -1702,  1959,  1959,  2496,  2060,  2435,  1450,  2500,
    2469,   954,   203,   204,  2501,  2192,   845,   205,  2476,   206,
     820,   820,  2502,   207,   208,  2192,   209,   210,  2507,  2516,
    2518,   211,  2434,  2522,  2523,  2526,   648,  1128,  2527,  2528,
    2529,   649,  2531,  2532,  2540,  2541,  2553,  2542,  2544,  1351,
    2308,  2548,  2549,  2506,  2550,  2192,  2448,  2558,  2645,  2559,
    2555,  2561,  2556,  2646,  2560,  2562,  2569,  2565,   650,  2574,
    2581,  1351,  1351,  2593,  2588,   819,  1005,  2481,  2616,  1874,
    1764,  2618,  1874,  2623,  2629,  2632,  2633,  2634,   651,  2635,
    2636,  2637,  1351,  2671,  2192,  2641,   954,  1879,  2642,  2643,
    2693,  2650,  2647,  2648,  2679,  2696, -1692,  2649,   652,  2701,
    2702,  2587,  1351,  2492,  2685,  2712,  2686,  1875,  2704,  2705,
    1875,  2192,  2706, -1702,   820,  2722,  2726,  2727,  2730,  2728,
    2729,  2733,  2739,  2746,  2192,    23,   163,   158,   815,   268,
     155,   170,   307,   310,   257,   315,  1073,   360,   681,   954,
    1062,  2192,  2490,  2017,   321,  1631,   954,   695,   954,   713,
    2032,  2703,  1635,  1083,   263,   425,   729,  1114,   721,  2047,
    2707,  1679,  2038,   653,  1660,  1647,  1148,  2622,  2573,  1705,
    2505,  2305,   768,  1706,  2201,  1699,  1154,  2068,   346,   356,
    2401,  1659,  1946,  1514,   845,  1515,   963,  1818,   201,   845,
    1714,  2407,  1936,   966,  1947,  1509,  1534,  1715,   973,  2247,
    2598,  2468,  1877,  1980,  1485,  2097,  1976,  2470,   911,  1959,
    2653,  1959,  1874,  1874,  2605,  1874,  1830,  2597,  2257,  2600,
    2600,  2132,  1162,  1983,  1003,  2436,  2626,  2111,  1812,  1856,
    1589,  1578,  1579,  2487,  2615,  1990,  1865,  1017,  2620,  1927,
    2681,  2682,  2683,  2684,  2098,   934,  1025,   990,  1878,  2239,
    1875,  1875,  1905,  1875,  1031,  1028,  1884,  1903,  2576,  2577,
    1357,  2676,  2672,   852,  2740,   852,  2747,  1034,   852,  1868,
    2568,  2721,   852,  2567,  2420,  1037,  2566,   852,  2711,   852,
     852,   852,   852,   852,  1061,   852,  1877,   845,   952,   510,
     852,   852,  2413,   852,  2173,  1877,   845,  2417,  1877,  1040,
    1939,  2150,  2398,   852,   852,  2391,  1793,  1796,  2455,  2589,
    2552,  1043,  2459,  1046,  2511,  1874,  2364,  1874,  1874,   723,
    1493,  2536,  2627,  2628,  1134,  2385,  2709,   284,   283,     0,
       0,  1537,     0,     0,     0,     0,  1482,   990,   990,  1960,
     513,     0,     0,     0,  2600,     0,     0,  2688,  2600,     0,
       0,  2690,     0,  1875,     0,  1875,  1875,     0,     0,  2700,
       0,     0,     0,  1874,     0,   996,  1874,  1877,  2738,  1874,
    1874,     0,   990,     0,     0,     0,     0,     0,     0,  2578,
    2580,     0,     0,     0,     0,     0,  2586,     0,     0,     0,
       0,  2748,  2749,     0,     0,     0,     0,     0,     0,     0,
       0,  1875,     0,     0,  1875,     0,     0,  1875,  1875,  2677,
       0,     0,  1877,     0,     0,     0,     0,     0,   820,     0,
       0,     0,     0,     0,   514,     0,   820,     0,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,     0,   528,   529,   530,   531,   532,   533,   534,   535,
       0,   536,   537,   538,   539,   540,   541,     0,   542,     0,
     543,   544,   545,   546,   547,   548, -1713,     0,  2743,     0,
       0,     0,     0,     0,   549,     0,     0,     0,     0,     0,
       0,  2750,     0,     0,     0,     0,  -396,   327,  2752,     0,
       0,  -396,     0,  -396,     0,  -396,  -396,  -396,     0,     0,
    -396,  -396,  -396,     0,     0,     0,     0,  2725,     0,   820,
       0,     0,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2075,     0,     0,     0,
     510,     0,     0,     0,     0,     0,     0,     0,  2079,     0,
    2083,  2084,     0,  2086,  2087,     0,     0,     0,     0,     0,
       0,     0,     0,   450,     0,     0,     0,     0,     0,     0,
   -1713,  2075,     0,     0,     0,     0,     0,     0,  2122,     0,
    2124,     0,     0,  2126,  2127,  2128,  2129,   550,     0,  2079,
       0,   513,     0,     0,     0,     0,     0,     0,   203,   204,
       0,     0,     0,   205,     0,   206,     0,     0,     0,   207,
     208,   852,   209,   210,     0,     0,   852,   211,     0,     0,
       0,   551,     0,     0,     0,     0,     0,     0,     0,   852,
     852,     0,     0,   852,   852,   852,   852,     0,     0,     0,
       0,     0,     0,   852,     0,     0,     0,   852,   852,   852,
       0,   852,   852,   852,   852,     0,   451,     0,     0,     0,
       0,     0,     0,     0,     0,   852,     0,     0,     0,   452,
       0,     0,     0,     0,     0,   514,   453,     0,     0,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,     0,   528,   529,   530,   531,   532,   533,   534,
     535,     0,   536,   537,   538,   539,   540,   541,     0,   542,
       0,   543,   544,   545,   546,   547,   548,  1877,     0,     0,
       0,     0,     0,     0,     0,   549,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     451,  2244,     0,     0,     0,     0,     0, -1713,     0,   552,
       0,     0,     0,   452,  1960,     0,     0,   919,     0,     0,
     453,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   990,   553,     0,     0,     0, -1713,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   554,   820,     0,     0,     0,  -331,   327,
       0,     0,     0,  -331,     0,  -331,     0,  -331,  -331,  -331,
     150,     0,  -331,  -331,  -331,     0,  -519,     0,   550,     0,
       0,     0,     0,     0,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   852,     0,
       0, -1713,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   454,     0,   852,     0,     0,     0,   455,
       0,     0, -1713,     0,     0,     0,     0,     0,  2079,     0,
     852,     0,     0,     0,  2326,  2328,     0,     0,  2332,     0,
    2334,  2335,   456,     0,     0,     0,     0,     0,     0,     0,
     203,   204,     0,     0,   150,   205,     0,   206,     0,  1195,
    -519,   207,   208,     0,   209,   210,     0,   457,     0,   211,
       0,  2369,  2371,     0,     0,  2374,     0,  2376,     0,     0,
    2079,     0,     0,     0,     0,     0,     0,     0,     0,  2200,
       0,     0,     0,  1877,   458,     0,  1877,     0,     0,     0,
    2396,     0,     0,     0,     0,   459,     0,   454,  2408,  2409,
       0,     0,     0,   455,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   460,     0,     0,     0,   953,     0,
       0,     0,  -396,     0,     0,     0,   456,     0,     0,     0,
     552,     0,     0,     0,  -519,     0,     0,     0,     0,     0,
     461, -1713,   820,     0,     0,     0,     0,     0,     0,     0,
       0,   457,   462,     0,     0,   553,     0,     0,     0,     0,
     463,     0,     0,   464,  1974,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   554,     0,  -814,     0,   458,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   459,
       0,     0,     0,  1537,  -814,  -814,     0,     0,   852,     0,
       0,     0,     0,   852,  -814,  -814,     0,     0,   460,     0,
       0,  -814,  -814,     0,     0,     0,     0,  -814,     0,     0,
       0,  -814,     0,  -814,     0,     0,  1877,  1877,  -519,  1877,
       0,     0,     0,     0,   461, -1713,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -331,   462,     0,     0,     0,
       0,     0,     0,     0,   463,     0,     0,   464,     0,     0,
    -814,  -814,     0,     0,  2513,     0,  2515,     0,     0,     0,
       0,  -814,  2519,  2521,     0,     0,     0,     0,     0,  -437,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   852,     0,     0,     0,     0,     0,  2545,     0,  2547,
     852,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1877,
       0,  1877,  1877,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -814,     0,  -814,  2575,     0,     0,  -814,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -814,     0,
    -814,     0,  -814,     0,     0,     0,     0,     0,     0,  -814,
       0,     0,  -814,  -446,  -814,     0,     0,  1877,  -814,  -814,
    1877,     0,  -814,  1877,  1877,     0,  -814,     0,     0,     0,
    -814,  -814,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -814,  1960,     0,  1960,     0,     0,  -814,     0,     0,
       0,   990,     0,     0,  -814,     0,     0,  -814,     0,     0,
       0,  -814,     0,     0,     0,  -814,  -814,     0,     0,  -814,
       0,  -814,     0,     0,  -331,  -331,     0,     0,     0,     0,
       0,     0,  -814,     0,     0,     0,     0,     0,  -814,     0,
       0,     0,     0,     0,     0,     0,     0,  2640,  -814,  -814,
       0,     0,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
       0,     0,     0,     0,     0,     0,  -814,     0,     0,     0,
       0,  -814,  -814,  -814,  -814,     0,     0,  -814,     0,  -814,
       0,     0,     0,     0,     0,     0,     0,  -814,  -814,  -814,
    -814,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2674,  -814,  -814,  -814,  -814,  -814,  -814,     0,
    -814,     0,     0,     0,     0,     0,  2680,     0,     0,     0,
       0,     0,  -814,  -814,     0,     0,     0,  1960,     0,     0,
       0,  1960,  -814,  -814,  -814,  -814,     0,     0,     0,     0,
    -814,  -814,  -814,  -814,  -814,     0,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,     0,  -814,     0,     0,     0,     0,
    -814,     0,     0,     0,     0,     0,  -814,     0,     0,     0,
    -814,  -814,  -814,     0,     0,     0,     0,     0,  -814,     0,
       0,  -814,     0,  -814,  -814,     0,  2264,     0,     0,     0,
       0,     0,     0,     0,     0,  -814,     0,     0,     0,  -814,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -814,  -814,  -814,  -814,     0,     0,     0,     0,     0,     0,
    -814,     0,     0,     0,     0,  -814,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -814,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -814,  -814,     0,     0,     0,     0,     0,     0,  -814,
    -814,     0,  -814,     0,     0,     0,  -814,     0,     0,     0,
    -814,  -814,     0,  -814,  -814,  -814,  -814,     0,     0,     0,
       0,  -814,     0,     0,  -814,  -814,  -814,  -814,  -814,  -814,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -814,  -814,     0,     0,     0,     0,  -814,     0,     0,     0,
       0,     0,     0,     0,  -814,  -814,     0,     0,  -814,  -814,
       0,  -814,  -814,  -814,     0,  -814,     0,     0,  -814,     0,
       0,     0,     0,     0,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,     0,     0,  1974,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -814,     0,     0,     0,     0,     0,     0,     0,     0,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,     0,     0,     0,     0,     0,  -814,     0,     0,  -814,
    -814,     0,     0,     0,     0,     0,  -814,  -814,     0,     0,
       0,     0,  -814,     0,     0,     0,  -814,     0,  -814,  -333,
     327,     0,     0,     0,  -333,     0,  -333,     0,  -333,  -333,
    -333,     0,     0,  -333,  -333,  -333,     0,     0,     0,     0,
       0,     0,     0,     0,   379,   328,   329,   330,   331,     0,
       0,     0,     0,     0,     0,  -814,  -814,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -814,     0,     0,     0,
       0,     0,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   203,   204,     0,     0,     0,   205,     0,   206,     0,
       0,     0,   207,   208,     0,   209,   210,  -814,     0,  -814,
     211,     0,     0,  -814,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -814,     0,  -814,     0,  -814,     0,     0,
       0,     0,     0,     0,  -814,     0,     0,  -814,     0,  -814,
       0,     0,     0,  -814,  -814,     0,     0,  -814,     0,     0,
       0,  -814,     0,     0,     0,  -814,  -814,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -814,     0,     0,     0,
     411,     0,  -814,     0,     0,     0,     0,     0,     0,  -814,
       0,     0,  -814,     0,     0,     0,  -814,     0,     0,     0,
    -814,  -814,     0,     0,  -814,     0,  -814,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -814,     0,     0,
       0,     0,     0,  -814,     0,   412,     0,     0,     0,     0,
       0,     0,     0,  -814,  -814,     0,     0,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,     0,     0,     0,     0,   413,
       0,  -814,     0,     0,     0,     0,  -814,  -814,  -814,  -814,
       0,     0,  -814,     0,  -814,   414,     0,     0,     0,     0,
       0,     0,  -814,  -814,  -814,  -814,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -814,  -814,
    -814,  -814,  -814,  -814,     0,  -814,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -333,  -814,  -814,     0,
       0,     0,     0,     0,     0,     0,     0,  -814,  -814,  -814,
    -814,     0,     0,     0,     0,  -814,  -814,  -814,  -814,  -814,
       0,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,     0,
    -814,     0,     0,     0,     0,  -814,     0,     0,     0,     0,
       0,  -814,     0,     0,     0,  -814,  -814,  -814,     0,     0,
       0,     0,     0,  -814,     0,     0,  -814,     0,  -814,  -814,
       0,   415,     0,     0,     0,     0,     0,     0,     0,     0,
    -814,     0,     0,     0,  -814,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -814,  -814,  -814,  -814,     0,
       0,     0,     0,     0,     0,  -814,     0,     0,     0,     0,
    -814,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -814,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -814,  -814,     0,     0,
       0,     0,     0,     0,  -814,  -814,     0,  -814,     0,     0,
       0,  -814,     0,     0,     0,  -814,  -814,     0,  -814,  -814,
    -814,  -814,     0,     0,     0,     0,  -814,     0,     0,  -814,
    -814,  -814,  -814,  -814,  -814,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -814,  -814,     0,     0,     0,
       0,  -814,     0,     0,     0,  -333,  -333,     0,     0,  -814,
    -814,     0,     0,  -814,  -814,     0,  -814,  -814,  -814,     0,
    -814,     0,     0,  -814,     0,     0,     0,   416,     0,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,     0,     0,  2121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1513,     0,     0,     0,
       0,     0,     0,     0,     0,  -814,  -814,  -814,  -814,  -814,
    -814,  -814,  -814,  -814,    28,     0,     0,     0,     0,     0,
       0,  -814,     0,     0,  -397,   327,     0,     0,     0,  -397,
       0,  -397,   783,  -397,  -397,  -397,     0,     0,  -397,  -397,
    -397,     0,     0,   784,     0,     0,     0,     0,     0,     0,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1513, -1513,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    30,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,     0,     0,     0,   203,   204,     0,     0,
       0,   205,     0,   206,     0,     0,     0,   207,   208,     0,
     209,   210,     0,     0,     0,   211,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1513,     0, -1513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1513,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0, -1513,
       0,     0, -1513,     0, -1513,     0,     0,     0, -1513, -1513,
       0,     0, -1513,     0,     0,     0, -1513,     0,     0,     0,
   -1513, -1513,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1513,     0,     0,     0,     0,     0, -1513,     0,     0,
       0,     0,     0,     0, -1513,     0,     0, -1513,     0,     0,
       0, -1513,     0,     0,     0, -1513, -1513,     0,     0, -1513,
       0, -1513,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   786,     0,     0,     0,     0,     0, -1513,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1513, -1513,
       0,     0, -1513, -1513, -1513, -1513, -1513, -1513, -1513,     0,
       0,     0,     0,     0,     0,     0, -1513,     0,     0,     0,
       0, -1513, -1513, -1513, -1513,     0,     0, -1513,     0,   787,
       0,     0,     0,     0,     0,     0,     0, -1513, -1513,     0,
   -1513,     0,     0,     0,     0,     0,     0,     0,     0,  1599,
       0,     0,     0, -1513, -1513, -1513, -1513, -1513, -1513,     0,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1513,   788,     0,     0,     0,     0,     0,     0,
       0,     0, -1513, -1513, -1513, -1513,     0,     0,     0,     0,
   -1513, -1513, -1513,     0, -1513,     0,    34, -1513, -1513, -1513,
   -1513, -1513,    35, -1513,     0, -1513,     0,     0,     0,     0,
   -1513,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1513, -1513, -1513,     0,     0,     0,     0,     0,    36,     0,
       0, -1513,     0, -1513, -1513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1513,     0,     0,     0, -1513,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1513, -1513, -1513,     0,     0,     0,     0,     0,     0,
      37,     0,     0,     0,     0, -1513,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1513,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1513, -1513,     0,     0,     0,     0,     0,     0, -1513,
   -1513,     0, -1513,     0,     0,     0, -1513,     0,     0,     0,
   -1513, -1513,     0,    38, -1513, -1513,    39,     0,     0,     0,
       0, -1513,     0,     0, -1513, -1513, -1513, -1513, -1513, -1513,
    -397,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1513,     0,     0,     0,     0,     0, -1513,     0,     0,     0,
       0,     0,     0,     0, -1513, -1513,     0,     0, -1513, -1513,
       0, -1513, -1513, -1513,     0, -1513,     0,     0, -1513,     0,
       0,     0,     0,     0, -1513,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   789,     0, -1375,   867,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1375, -1375,  1517,     0,     0,     0,   790,   791,    28,
       0,     0,     0,     0,     0,     0,   792,     0,     0,     0,
     836, -1375, -1375,     0, -1375,     0,     0,   837, -1375,     0,
   -1375,     0,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   838,   839,   840,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1375,  1381, -1375,     0, -1375, -1375,
   -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1375,
   -1375, -1755, -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1375,
       0, -1375, -1375, -1375, -1375, -1375, -1375,     0, -1375,     0,
   -1375, -1375, -1375, -1375, -1375, -1375, -1375,     0,     0,     0,
       0,     0,     0,  1382, -1375,     0,  1383,     0,     0,  1384,
    1385,     0,     0,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1518,  1519,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1520,     0,     0,     0,     0,  1521,     0,  1522,
       0,     0,     0,     0,     0,     0,     0,  1386,     0,     0,
       0,     0, -1748,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1523,     0,     0,     0,  1387, -1375,     0,     0,
       0,     0,  1528,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1375,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1375,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,     0,     0,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,  1388,  1389,     0,     0,     0,     0,     0,
       0,     0,     0,  1390,  1391,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1375,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1748,     0,     0,     0,
       0,     0,     0,     0, -1375,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1375,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,    39,     0,     0,     0,     0,     0,     0,     0,     0,
    1524,     0,     0,     0,     0,     0,     0,     0, -1748,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   696,     0,     0,     0,     0,     0,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,     0, -1375, -1375, -1375, -1375, -1375,     0, -1375, -1375,
   -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1375,
   -1375, -1375,  -688,  -688,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1375,     0,
       0,     0,     0,     0,     0,  -688,  -688,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   495,   836,  -688,  -688,     0,  -688,     0,
       0,   837,  -688,     0,  -688,     0,     0,     0,     0,     0,
       0,     0,   497,   510,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   838,   839,   840,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,   513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -688,     0,
    -688,     0,  -688,  -688,  -688,  -688,  -688,  -688,  -688,  -688,
    -688,  -688,  -688,  -688,  -688,     0,  -688,  -688,  -688,  -688,
    -688,  -688,  -688,  -688,     0,  -688,  -688,  -688,  -688,  -688,
    -688,     0,  -688,     0,  -688,  -688,  -688,  -688,  -688,  -688,
    -688,     0,     0,     0,     0,     0,     0,   841,  -688,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   514,     0,
       0,    31,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,   528,   529,   530,   531,
     532,   533,   534,   535,     0,   536,   537,   538,   539,   540,
     541,     0,   542,     0,   543,   544,   545,   546,   547,   548,
   -1075,     0,     0,     0,     0,     0,     0,     0,   549,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -688,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -688,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -688,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   550,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   842,     0, -1075,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   551,     0,     0,     0,     0,
       0,     0,   499,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -688,     0,   500,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   501,
       0,     0,     0,  -688,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -688,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -688,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,   552,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -688,     0,     0,     0,     0,   554,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   843,  -688,  -688,  -688,  -688,
    -688,  -688,  -688,  -688,  -688,  -688,  -688,  -688,  -688,  -688,
    -688,  -688,  -688,  -688,  -688,  -688, -1341, -1341,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -688,     0,     0,     0,     0,     0,     0, -1341,
   -1341,     0,     0,     0,     0,     0,     0,    28,     0, -1341,
       0,     0,     0,     0,     0,     0,     0,   495,  1872, -1341,
   -1341,     0, -1341,     0,     0, -1075, -1341,     0, -1341,     0,
       0,     0,     0,     0,     0,     0,   497,  -532,   510,     0,
     -11,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -532,  -532,  -532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   511,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,   512,     0,     0,   513,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1341,     0, -1341,     0, -1341, -1341, -1341, -1341,
   -1341, -1341, -1341, -1341, -1341, -1341, -1341, -1341, -1341,     0,
   -1341, -1341, -1341, -1341, -1341, -1341, -1341, -1341,     0, -1341,
   -1341, -1341, -1341, -1341, -1341,     0, -1341,     0, -1341, -1341,
   -1341, -1341, -1341, -1341, -1341,     0,     0,     0,     0,     0,
       1, -1341, -1341,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   514,     0,    31,     0,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
       0,   528,   529,   530,   531,   532,   533,   534,   535,     0,
     536,   537,   538,   539,   540,   541, -1341,   542,     0,   543,
     544,   545,   546,   547,   548,     0,     0,     0,     0,     0,
       0,     0,     0,   549,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1341,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1341,     0,
       0,     0,     0, -1341,     0,     0,     0,     0,     0, -1341,
       0,     0,   787,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   550,     0,     0,     0,
       0,     0,     0,    33,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1341,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     551,     0,     0,     0,     0,     0,   499,     0,     0,    34,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   500,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   501,     0,     0,     0, -1341,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1341,     0,     0,     0,     0,     0,
       0,     0, -1341,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1341,     0,     0,     0,     0,     0,     0,     0,   -11,
       0,     0,     0,     0,     0,     0,    38,     0,   552,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1341,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   554,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,     0,
   -1341, -1341, -1341, -1341, -1341,     0, -1341, -1341, -1341, -1341,
   -1341, -1341, -1341, -1341, -1341, -1341, -1341, -1341, -1341, -1341,
   -1342, -1342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1341,     0,     0,     0,
       0,     0,     0, -1342, -1342,     0,     0,     0,     0,     0,
       0,    28,     0, -1342,     0,     0,     0,     0,     0,     0,
       0,   495,  1872, -1342, -1342,     0, -1342,     0,     0,     0,
   -1342,     0, -1342,     0,     0,     0,     0,     0,     0,     0,
     497,  -533,   510,     0,   -11,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -533,  -533,  -533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   511,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
     512,     0,     0,   513,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1342,     0, -1342,     0,
   -1342, -1342, -1342, -1342, -1342, -1342, -1342, -1342, -1342, -1342,
   -1342, -1342, -1342,     0, -1342, -1342, -1342, -1342, -1342, -1342,
   -1342, -1342,     0, -1342, -1342, -1342, -1342, -1342, -1342,     0,
   -1342,     0, -1342, -1342, -1342, -1342, -1342, -1342, -1342,     0,
       0,     0,     0,     0,     1, -1342, -1342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   514,     0,    31,
       0,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,     0,   528,   529,   530,   531,   532,
     533,   534,   535,     0,   536,   537,   538,   539,   540,   541,
   -1342,   542,     0,   543,   544,   545,   546,   547,   548,     0,
       0,     0,     0,     0,     0,     0,     0,   549,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1342,     0,     0,     0,     0, -1342,     0,     0,
       0,     0,     0, -1342,     0,     0,   787,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     550,     0,     0,     0,     0,     0,     0,    33,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1342,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   551,     0,     0,     0,     0,     0,
     499,     0,     0,    34,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   500,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   501,     0,     0,
       0, -1342,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1342,     0,
       0,     0,     0,     0,     0,     0, -1342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1342,     0,     0,     0,     0,
       0,     0,     0,   -11,     0,     0,     0,     0,     0,     0,
      38,     0,   552,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1342,     0,   553,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,     0, -1342, -1342, -1342, -1342, -1342,     0,
   -1342, -1342, -1342, -1342, -1342, -1342, -1342, -1342, -1342, -1342,
   -1342, -1342, -1342, -1342, -1343, -1343,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1342,     0,     0,     0,     0,     0,     0, -1343, -1343,     0,
       0,     0,     0,     0,     0,    28,     0, -1343,     0,     0,
       0,     0,     0,     0,     0,   495,  1872, -1343, -1343,     0,
   -1343,     0,     0,     0, -1343,     0, -1343,     0,     0,     0,
       0,     0,     0,     0,   497,     0,   510,     0,   -11,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   511,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1782,     0,
       0,     0,    30,     0,   512,     0,     0,   513,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1343,     0, -1343,     0, -1343, -1343, -1343, -1343, -1343, -1343,
   -1343, -1343, -1343, -1343, -1343, -1343, -1343,     0, -1343, -1343,
   -1343, -1343, -1343, -1343, -1343, -1343,     0, -1343, -1343, -1343,
   -1343, -1343, -1343,     0, -1343,     0, -1343, -1343, -1343, -1343,
   -1343, -1343, -1343,     0,     0,     0,     0,     0,     1, -1343,
   -1343,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   514,     0,    31,     0,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,     0,   528,
     529,   530,   531,   532,   533,   534,   535,     0,   536,   537,
     538,   539,   540,   541, -1343,   542,     0,   543,   544,   545,
     546,   547,   548,     0,     0,     0,     0,     0,     0,     0,
       0,   549,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1343,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1343,     0,     0,     0,
       0, -1343,     0,     0,     0,     0,     0, -1343,     0,     0,
     787,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   550,     0,     0,     0,     0,     0,
       0,    33,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1343,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   551,     0,
       0,     0,     0,     0,   499,     0,     0,    34,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   500,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   501,     0,     0,     0, -1343,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1343,     0,     0,     0,     0,     0,     0,     0,
   -1343,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1343,
       0,     0,     0,     0,     0,     0,     0,   -11,     0,     0,
       0,     0,     0,     0,    38,     0,   552,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1343,
       0,   553,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     554,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,     0, -1343, -1343,
   -1343, -1343, -1343,     0, -1343, -1343, -1343, -1343, -1343, -1343,
   -1343, -1343, -1343, -1343, -1343, -1343, -1343, -1343, -1357, -1357,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1343,     0,     0,     0,     0,     0,
       0, -1357, -1357,     0,     0,     0,     0,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   495,
    1872, -1357, -1357,     0, -1357,     0,     0,     0, -1357,     0,
   -1357,     0,     0,     0,     0,     0,     0,     0,   497,     0,
     510,     0,   -11,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     511,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,   512,     0,
       0,   513,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1357,     0, -1357,     0, -1357, -1357,
   -1357, -1357, -1357, -1357, -1357, -1357, -1357, -1357, -1357, -1357,
   -1357,     0, -1357, -1357, -1357, -1357, -1357, -1357, -1357, -1357,
       0, -1357, -1357, -1357, -1357, -1357, -1357,     0, -1357,     0,
   -1357, -1357, -1357, -1357, -1357, -1357, -1357,     0,     0,     0,
       0,     0,     1, -1357, -1357,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   514,     0,    31,     0,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,     0,   528,   529,   530,   531,   532,   533,   534,
     535,     0,   536,   537,   538,   539,   540,   541, -1357,   542,
       0,   543,   544,   545,   546,   547,   548,     0,     0,     0,
       0,     0,     0,     0,     0,   549,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1357,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1357,     0, -1357,     0,     0,     0,     0,     0,     0,     0,
       0, -1357,     0,     0,   787,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   550,     0,
       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1357,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   551,     0,     0,     0,     0,     0,   499,     0,
       0,    34,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   500,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   501,     0,     0,     0, -1357,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1357,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1357,     0,     0,     0,     0,     0,     0,
       0,   -11,     0,     0,     0,     0,     0,     0,    38,     0,
     552,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1357,     0,   553,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   554,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,     0, -1357, -1357, -1357, -1357, -1357,     0, -1357, -1357,
   -1357, -1357, -1357, -1357, -1357, -1357, -1357, -1357, -1357, -1357,
   -1357, -1357, -1049, -1049,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1357,     0,
       0,     0,     0,     0,     0, -1049, -1049,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1049, -1049,     0, -1049,     0,
       0,   783, -1049,     0, -1049,     0,     0,     0,     0,     0,
       0,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -623,   510,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -623,  -623,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,  -623,  -623,
       0,  -623,     0,     0,     0,  -623,     0,   513,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1049,     0,
   -1049,     0, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049,     0, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049,     0, -1049, -1049, -1049, -1049, -1049,
   -1049,     0, -1049,     0, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049,     0,     0,     0,     0,     0,     0,     0, -1049,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   514,     0,  -623,     0,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,     0,   528,
     529,   530,   531,   532,   533,   534,   535,     0,   536,   537,
     538,   539,   540,   541,     0,   542,     0,   543,   544,   545,
     546,   547,   548,  -623,     0,     0,     0,     0,     0,     0,
       0,   549,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1049,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1049,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1049,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,   550,     0,     0,     0,     0,     0,
       0,     0,   811,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -623,     0,     0,
       0,     0,     0,     0,     0,    34,     0,     0,   551,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1049,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1049,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1049,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0, -1755,     0,     0,     0,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1005,   553,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1006,     0,     0,   696,     0,
     554,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,     0, -1049, -1049, -1049, -1049,
   -1049,     0, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049,  -938,   867,     0,     0,
       0,     0,     0,     0,     0,     0,   812,   813,     0,     0,
       0,     0, -1049,     0,     0,     0,     0,     0,     0,  -938,
    -938,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   836,  -938,
    -938,     0,  -938,     0,     0,   837,  -938,     0,  -938,  -623,
    -623,  -623,  -623,  -623,     0,  -623,  -623,  -623,  -623,  -623,
    -623,  -623,  -623,  -623,  -623,  -623,  -623,  -623,  -623,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -623,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   838,   839,   840,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -938,     0,  -938,     0,  -938,  -938,  -938,  -938,
    -938,  -938,  -938,  -938,  -938,  -938,  -938,  -938,  -938,     0,
    -938,  -938,  -938,  -938,  -938,  -938,  -938,  -938,     0,  -938,
    -938,  -938,  -938,  -938,  -938,     0,  -938,     0,  -938,  -938,
    -938,  -938,  -938,  -938,  -938,     0,     0,     0,     0,     0,
       0,     0,  -938,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -938,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -938,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -938,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    33,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    34,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -938,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -938,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -938,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,     0,
    -938,  -938,  -938,  -938,  -938,     0,  -938,  -938,  -938,  -938,
    -938,  -938,  -938,  -938,  -938,  -938,  -938,  -938,  -938,  -938,
    -942,   867,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -938,     0,     0,     0,
       0,     0,     0,  -942,  -942,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   836,  -942,  -942,     0,  -942,     0,     0,   837,
    -942,     0,  -942,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   510,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   838,
     839,   840,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,   513,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -942,     0,  -942,     0,
    -942,  -942,  -942,  -942,  -942,  -942,  -942,  -942,  -942,  -942,
    -942,  -942,  -942,     0,  -942,  -942,  -942,  -942,  -942,  -942,
    -942,  -942,     0,  -942,  -942,  -942,  -942,  -942,  -942,     0,
    -942,     0,  -942,  -942,  -942,  -942,  -942,  -942,  -942,     0,
       0,     0,     0,     0,     0,     0,  -942,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   514,     0,    31,
       0,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,     0,   528,   529,   530,   531,   532,
     533,   534,   535,    32,   536,   537,   538,   539,   540,   541,
       0,   542,     0,   543,   544,   545,   546,   547,   548,     0,
       0,     0,     0,     0,     0,     0,     0,   549,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -942,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -942,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -942,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     550,     0,     0,     0,     0,     0,     0,    33,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   551,     0,     0,     0,     0,     0,
       0,     0,     0,    34,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -942,     0,     0,     0,     0,     0,    37,     0,     0,
       0,  1559,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -942,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -942,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,   552,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   553,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,     0,  -942,  -942,  -942,  -942,  -942,     0,
    -942,  -942,  -942,  -942,  -942,  -942,  -942,  -942,  -942,  -942,
    -942,  -942,  -942,  -942,  -939,   867,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -942,     0,     0,     0,     0,     0,     0,  -939,  -939,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   836,  -939,  -939,     0,
    -939,     0,     0,   837,  -939,     0,  -939,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   510,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   838,   839,   840,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,   513,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -939,     0,  -939,     0,  -939,  -939,  -939,  -939,  -939,  -939,
    -939,  -939,  -939,  -939,  -939,  -939,  -939,     0,  -939,  -939,
    -939,  -939,  -939,  -939,  -939,  -939,     0,  -939,  -939,  -939,
    -939,  -939,  -939,     0,  -939,     0,  -939,  -939,  -939,  -939,
    -939,  -939,  -939,     0,     0,     0,     0,     0,     0,     0,
    -939,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   514,     0,    31,     0,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,     0,   528,
     529,   530,   531,   532,   533,   534,   535,    32,   536,   537,
     538,   539,   540,   541,     0,   542,     0,   543,   544,   545,
     546,   547,   548,     0,     0,     0,     0,     0,     0,     0,
       0,   549,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -939,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -939,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -939,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   550,     0,     0,     0,     0,     0,
       0,    33,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   551,     0,
       0,     0,     0,     0,     0,     0,     0,    34,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -939,     0,     0,     0,     0,
       0,    37,     0,     0,     0,  1981,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -939,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -939,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    38,     0,   552,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   553,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     554,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,     0,  -939,  -939,
    -939,  -939,  -939,     0,  -939,  -939,  -939,  -939,  -939,  -939,
    -939,  -939,  -939,  -939,  -939,  -939,  -939,  -939,  -941,   867,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -939,     0,     0,     0,     0,     0,
       0,  -941,  -941,     0,     0,     0,     0,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     836,  -941,  -941,     0,  -941,     0,     0,   837,  -941,     0,
    -941,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   838,   839,   840,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,   513,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -941,     0,  -941,     0,  -941,  -941,
    -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,
    -941,     0,  -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,
       0,  -941,  -941,  -941,  -941,  -941,  -941,     0,  -941,     0,
    -941,  -941,  -941,  -941,  -941,  -941,  -941,     0,     0,     0,
       0,     0,     0,     0,  -941,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   514,     0,    31,     0,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,     0,   528,   529,   530,   531,   532,   533,   534,
     535,    32,   536,   537,   538,   539,   540,   541,     0,   542,
       0,   543,   544,   545,   546,   547,   548,     0,     0,     0,
       0,     0,     0,     0,     0,   549,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -941,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -941,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -941,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   550,     0,
       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   551,     0,     0,     0,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -941,
       0,     0,     0,     0,     0,    37,     0,     0,     0,  2200,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -941,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -941,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
     552,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   553,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   554,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,     0,  -941,  -941,  -941,  -941,  -941,     0,  -941,  -941,
    -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,
    -941,  -941,  -940,   867,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -941,     0,
       0,     0,     0,     0,     0,  -940,  -940,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   836,  -940,  -940,     0,  -940,     0,
       0,   837,  -940,     0,  -940,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   838,   839,   840,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -940,     0,
    -940,     0,  -940,  -940,  -940,  -940,  -940,  -940,  -940,  -940,
    -940,  -940,  -940,  -940,  -940,     0,  -940,  -940,  -940,  -940,
    -940,  -940,  -940,  -940,     0,  -940,  -940,  -940,  -940,  -940,
    -940,     0,  -940,     0,  -940,  -940,  -940,  -940,  -940,  -940,
    -940,     0,     0,     0,     0,     0,     0,     0,  -940,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -940,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -940,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -940,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -792,   510,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -792,  -792,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,  -792,  -792,     0,  -792,     0,     0,     0,  -792,     0,
     513,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -940,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -940,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -940,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,   514,    39,  -792,     0,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,     0,   528,   529,   530,   531,   532,   533,   534,   535,
       0,   536,   537,   538,   539,   540,   541,     0,   542,     0,
     543,   544,   545,   546,   547,   548,  -792,     0,     0,     0,
       0,     0,     0,     0,   549,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,     0,  -940,  -940,  -940,  -940,
    -940,     0,  -940,  -940,  -940,  -940,  -940,  -940,  -940,  -940,
    -940,  -940,  -940,  -940,  -940,  -940,     0,   550,  -960,   510,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -940,     0,     0,     0,     0,     0,     0,     0,
    -792,  -960,  -960,     0,     0,     0,     0,     0,     0,     0,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -960,  -960,     0,  -960,     0,     0,     0,  -960,     0,
     513,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1439,   510,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1439, -1439,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1439, -1439,     0, -1439,     0,     0,     0, -1439,     0,
     513,     0,     0,     0,   514,     0,  -960,     0,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,     0,   528,   529,   530,   531,   532,   533,   534,   535,
       0,   536,   537,   538,   539,   540,   541,     0,   542,   552,
     543,   544,   545,   546,   547,   548,  -960,     0,     0,     0,
       0,     0,     0,     0,   549,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   554,   514,     0, -1439,     0,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,     0,   528,   529,   530,   531,   532,   533,   534,   535,
       0,   536,   537,   538,   539,   540,   541,     0,   542,     0,
     543,   544,   545,   546,   547,   548, -1439,     0,     0,     0,
       0,     0,     0,     0,   549,     0,     0,     0, -1318,   510,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   550,     0,     0,
       0, -1318, -1318,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -960, -1318, -1318,     0, -1318,     0,     0,     0, -1318,     0,
     513,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -792,  -792,  -792,  -792,  -792,   550,  -792,  -792,
    -792,  -792,  -792,  -792,  -792,  -792,  -792,  -792,  -792,  -792,
    -792,  -792,     0,     0,     0,     0,     0,     0,     0,     0,
   -1439,     0,     0,     0,     0,     0,     0,     0,  -792,     0,
       0,   551,     0,     0,   514,     0, -1318,     0,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,     0,   528,   529,   530,   531,   532,   533,   534,   535,
       0,   536,   537,   538,   539,   540,   541,     0,   542,     0,
     543,   544,   545,   546,   547,   548, -1318,     0,     0,     0,
       0,     0,     0,     0,   549,     0,     0,     0,     0,   552,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   554,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   552,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   550,     0,     0,
       0,     0,     0,     0,   553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1318,     0,     0,   554,     0,     0,     0,     0,     0,     0,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -960,  -960,  -960,  -960,  -960,     0,  -960,  -960,
    -960,  -960,  -960,  -960,  -960,  -960,  -960,  -960,  -960,  -960,
    -960,  -960, -1482,   510,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -960,     0,
       0,     0,     0,     0,     0, -1482, -1482,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1482, -1482,     0, -1482,     0,
       0,     0, -1482,     0,   513,     0,     0,     0,     0,   552,
       0,     0, -1439, -1439, -1439, -1439, -1439,     0, -1439, -1439,
   -1439, -1439, -1439, -1439, -1439, -1439, -1439, -1439, -1439, -1439,
   -1439, -1439,     0,     0,   553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1439,     0,
       0,     0,     0,   554,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   514,     0,
   -1482,     0,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,   528,   529,   530,   531,
     532,   533,   534,   535,     0,   536,   537,   538,   539,   540,
     541,     0,   542,     0,   543,   544,   545,   546,   547,   548,
   -1482,     0,     0,     0,     0,     0,     0,     0,   549,     0,
    -622,   510,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -622,  -622,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -622,  -622,     0,  -622,     0,     0,     0,
    -622,     0,   513,     0,     0,     0,     0,     0,     0,  -809,
     510,     0, -1318, -1318, -1318, -1318, -1318,     0, -1318, -1318,
   -1318, -1318, -1318, -1318, -1318, -1318, -1318, -1318, -1318, -1318,
   -1318, -1318,  -809,  -809,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1318,     0,
       0,   550,  -809,  -809,     0,  -809,     0,     0,     0,  -809,
       0,   513,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1482,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   551,   514,     0,  -622,     0,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,     0,   528,   529,   530,   531,   532,   533,
     534,   535,     0,   536,   537,   538,   539,   540,   541,     0,
     542,     0,   543,   544,   545,   546,   547,   548,  -622,     0,
       0,     0,     0,     0,     0,     0,   549,     0,     0,     0,
       0,     0,     0,     0,     0,   514,     0,  -809,     0,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,     0,   528,   529,   530,   531,   532,   533,   534,
     535,     0,   536,   537,   538,   539,   540,   541,     0,   542,
       0,   543,   544,   545,   546,   547,   548,  -809,     0,     0,
       0,     0,     0,     0,     0,   549,     0,  -961,   510,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -961,  -961,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   550,
    -961,  -961,     0,  -961,     0,     0,     0,  -961,   553,   513,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -622,     0,     0,     0,     0,   554,     0,     0,
       0,     0,     0,   551,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   550,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -809,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   551,   514,     0,  -961,     0,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
       0,   528,   529,   530,   531,   532,   533,   534,   535,     0,
     536,   537,   538,   539,   540,   541,     0,   542,     0,   543,
     544,   545,   546,   547,   548,  -961,     0,     0,     0,     0,
       0,     0,     0,   549,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   552,     0,     0, -1438,   510, -1482, -1482, -1482, -1482,
   -1482,     0, -1482, -1482, -1482, -1482, -1482, -1482, -1482, -1482,
   -1482, -1482, -1482, -1482, -1482, -1482,   553, -1438, -1438,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1482,     0,     0,   554,     0, -1438, -1438,     0,
   -1438,     0,     0,     0, -1438,     0,   513,     0,     0,     0,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   550,     0,     0,     0,
       0,     0,     0,     0,     0,   553,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -961,
       0,     0,     0,     0,   554,     0,     0,     0,     0,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     514,     0, -1438,     0,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,     0,   528,   529,
     530,   531,   532,   533,   534,   535,     0,   536,   537,   538,
     539,   540,   541,     0,   542,     0,   543,   544,   545,   546,
     547,   548, -1438,     0,     0,     0,     0,     0,     0,     0,
     549,     0, -1161,   510,  -622,  -622,  -622,  -622,  -622,     0,
    -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,
    -622,  -622,  -622,  -622,     0, -1161, -1161,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -622,     0,     0,     0,     0, -1161, -1161,     0, -1161,     0,
       0,     0, -1161,     0,   513,     0,     0,     0,   552,     0,
       0, -1272,   510,  -809,  -809,  -809,  -809,  -809,     0,  -809,
    -809,  -809,  -809,  -809,  -809,  -809,  -809,  -809,  -809,  -809,
    -809,  -809,  -809,   553, -1272, -1272,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -809,
       0,     0,   554,   550, -1272, -1272,     0, -1272,     0,     0,
       0, -1272,     0,   513,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1438,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   551,   514,     0,
   -1161,     0,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,   528,   529,   530,   531,
     532,   533,   534,   535,     0,   536,   537,   538,   539,   540,
     541,     0,   542,     0,   543,   544,   545,   546,   547,   548,
   -1161,     0,     0,     0,     0,     0,     0,     0,   549,     0,
       0,     0,     0,     0,     0,     0,     0,   514,     0, -1272,
       0,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,     0,   528,   529,   530,   531,   532,
     533,   534,   535,     0,   536,   537,   538,   539,   540,   541,
       0,   542,     0,   543,   544,   545,   546,   547,   548, -1272,
       0,     0,     0,     0,     0,     0,     0,   549,     0, -1483,
     510,  -961,  -961,  -961,  -961,  -961,     0,  -961,  -961,  -961,
    -961,  -961,  -961,  -961,  -961,  -961,  -961,  -961,  -961,  -961,
    -961,     0, -1483, -1483,     0,   552,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -961,     0,     0,
       0,   550, -1483, -1483,     0, -1483,     0,     0,     0, -1483,
     553,   513,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1161,     0,     0,     0,     0,   554,
       0,     0,     0,     0,     0,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     550,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1272,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   551,   514,     0, -1483,     0,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,     0,   528,   529,   530,   531,   532,   533,   534,
     535,     0,   536,   537,   538,   539,   540,   541,     0,   542,
       0,   543,   544,   545,   546,   547,   548, -1483,     0,     0,
       0,     0,     0,     0,     0,   549,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   552,     0,     0, -1165,   510, -1438, -1438,
   -1438, -1438, -1438,     0, -1438, -1438, -1438, -1438, -1438, -1438,
   -1438, -1438, -1438, -1438, -1438, -1438, -1438, -1438,   553, -1165,
   -1165,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1438,     0,     0,   554,     0, -1165,
   -1165,     0, -1165,     0,     0,     0, -1165,     0,   513,     0,
       0,     0,   552,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   550,     0,
       0,     0,     0,     0,     0,     0,     0,   553,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1483,     0,     0,     0,     0,   554,     0,     0,     0,
       0,     0,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   514,     0, -1165,     0,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,     0,
     528,   529,   530,   531,   532,   533,   534,   535,     0,   536,
     537,   538,   539,   540,   541,     0,   542,     0,   543,   544,
     545,   546,   547,   548, -1165,     0,     0,     0,     0,     0,
       0,     0,   549,     0, -1193,   510, -1161, -1161, -1161, -1161,
   -1161,     0, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161,
   -1161, -1161, -1161, -1161, -1161, -1161,     0, -1193, -1193,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1161,     0,     0,     0,     0, -1193, -1193,     0,
   -1193,     0,     0,     0, -1193,     0,   513,     0,     0,     0,
     552,     0,     0,  -806,   510, -1272, -1272, -1272, -1272, -1272,
       0, -1272, -1272, -1272, -1272, -1272, -1272, -1272, -1272, -1272,
   -1272, -1272, -1272, -1272, -1272,   553,  -806,  -806,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1272,     0,     0,   554,   550,  -806,  -806,     0,  -806,
       0,     0,     0,  -806,     0,   513,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1165,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   551,
     514,     0, -1193,     0,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,     0,   528,   529,
     530,   531,   532,   533,   534,   535,     0,   536,   537,   538,
     539,   540,   541,     0,   542,     0,   543,   544,   545,   546,
     547,   548, -1193,     0,     0,     0,     0,     0,     0,     0,
     549,     0,     0,     0,     0,     0,     0,     0,     0,   514,
       0,  -806,     0,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,     0,   528,   529,   530,
     531,   532,   533,   534,   535,     0,   536,   537,   538,   539,
     540,   541,     0,   542,     0,   543,   544,   545,   546,   547,
     548,  -806,     0,     0,     0,     0,     0,     0,     0,   549,
       0,     0,     0, -1483, -1483, -1483, -1483, -1483,     0, -1483,
   -1483, -1483, -1483, -1483, -1483, -1483, -1483, -1483, -1483, -1483,
   -1483, -1483, -1483,     0,     0,     0,     0,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1483,
       0,     0,     0,   550,     0,     0,     0,     0,     0,     0,
       0,     0,   553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1193,     0,     0,     0,
       0,   554,     0,     0,     0,     0,     0,   551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   550,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -806,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   551,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1067,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1004,   552,     0, -1067,     0,     0,
   -1165, -1165, -1165, -1165, -1165,   784, -1165, -1165, -1165, -1165,
   -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,
     553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1165,     0,     0,   554,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,   552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   553,
       0, -1067,     0,     0,     0, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,   554, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067,     0, -1067, -1067,
   -1067, -1067, -1067, -1067,     0, -1067,     0, -1067, -1067, -1067,
   -1067, -1067, -1067,     0,     0,     0,     0,     0,     0,     0,
       0, -1067,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1193, -1193,
   -1193, -1193, -1193,     0, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1193,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1067,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -806,  -806,  -806,
    -806,  -806,     0,  -806,  -806,  -806,  -806,  -806,  -806,  -806,
    -806,  -806,  -806,  -806,  -806,  -806,  -806,     0, -1067,     0,
       0,   787,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -806,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,   811,   495,   836,     0,     0,
       0,     0,     0,     0,   837,     0,     0,     0,     0, -1755,
       0,     0,     0,     0,     0,   497,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,   838,   839,   840,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1067,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1067,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1067,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     841,     0,     0,     0,     0,    38,     0,     0,    39,     0,
       0,     0,     0, -1590,    31, -1755,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1005,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1006,     0,
       0,   696,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,     0,     0,
       0,   787,     0,     0,     0,     0,     0,     0, -1067,     0,
       0,   498,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   812,
     813,     0,    33,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,   842,     0,   495,   836,     0,
       0,     0,     0,  2349,     0,   837,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   499,   497,     0,    34,     0,
       0,   510,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   500,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,   838,   839,   840,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,   513,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   501,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   841,     0,     0,     0,    38,     0,     0,    39,     0,
       0,     0,     0,     0,     0,    31,   514,     0,     0,     0,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,     0,   528,   529,   530,   531,   532,   533,
     534,   535,     0,   536,   537,   538,   539,   540,   541,     0,
     542,     0,   543,   544,   545,   546,   547,   548, -1086,     0,
       0,     0,     0,     0,     0,     0,   549,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   843,     0,
       0,     0,   787,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   550,
       0,     0,     0,    33,     0,     0,     0,     0,    28, -1590,
       0,     0,     0,     0,     0,     0,   842,     0,   495,   836,
       0,     0, -1086,     0,     0,     0,   837,     0,     0,     0,
       0,     0,     0,   551,     0,     0,   499,   497,     0,    34,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   500,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,   838,   839,   840,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   501,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   841,     0,     0,     0,    38,     0,     0,    39,
       0,   552,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   553,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   554,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   843,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   498,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,    28,
    2310,     0,     0,     0,     0,     0,     0,   842,     0,   495,
     836,     0,     0,     0,     0,     0,     0,   837,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   499,   497,   510,
      34,     0,     0, -1086,     0,     0,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     500,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,   838,   839,   840,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
     513,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   501,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   841,     0,     0,     0,    38,     0,     0,
      39,     0,     0,     0,   514,     0,     0,    31,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,     0,   528,   529,   530,   531,   532,   533,   534,   535,
       0,   536,   537,   538,   539,   540,   541,     0,   542,     0,
     543,   544,   545,   546,   547,   548, -1069,     0,     0,     0,
       0,     0,     0,     0,   549,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     843,     0,     0,     0,   787,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   550,     0,     0,
       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
      28,  2342,     0,     0,     0,     0,     0,     0,   842,     0,
     495,   836,     0,     0,     0,     0,     0,     0,   837,     0,
       0,   551,     0,     0,     0,     0,     0,     0,   499,   497,
       0,    34,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   500,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,   838,   839,
     840,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   501,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   841,     0,     0,     0,    38,   552,
       0,    39,     0,     0,     0,     0,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   554,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   843,     0,     0,     0,   787,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   498,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    33,     0,     0,     0,
       0,    28,  2344,     0,     0,     0,     0,     0,     0,   842,
       0,   495,   836,     0,     0,     0,     0,     0,     0,   837,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   499,
     497,  1988,    34,     0,     0,   510,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   500,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,     0,   838,
     839,   840,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,   513,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   501,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   841,     0,     0,     0,    38,
       0,     0,    39,     0,     0,     0,     0,     0,     0,    31,
     514,     0,     0,     0,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,     0,   528,   529,
     530,   531,   532,   533,   534,   535,     0,   536,   537,   538,
     539,   540,   541,     0,   542,     0,   543,   544,   545,   546,
     547,   548,     0,     0,     0,     0,     0,     0,     0,     0,
     549,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   843,     0,     0,     0,   787,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   550,     0,     0,     0,    33,     0,     0,
       0,     0,    28,  2346,     0,     0,     0,     0,     0,     0,
     842,     0,   495,   836,     0,     0, -1089,     0,     0,     0,
     837,     0,     0,     0,     0,     0,     0,   551,     0,     0,
     499,   497,     0,    34,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   500,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    36,     0,     0,     0,     0,
     838,   839,   840,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   501,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   841,     0,     0,     0,
      38,     0,     0,    39,     0,   552,     0,     0,     0,     0,
      31,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   554,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   843,     0,     0,     0,   787,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   498,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    33,     0,
       0,     0,     0,    28,  2524,     0,     0,     0,     0,     0,
       0,   842,     0,   495,   836,     0,     0,     0,     0,     0,
       0,   837,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   499,   497,   510,    34,     0,     0, -1089,     0,     0,
      35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   500,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
       0,   838,   839,   840,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,   513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   501,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   841,     0,     0,
       0,    38,     0,     0,    39,     0,     0,     0,   514,     0,
       0,    31,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,   528,   529,   530,   531,
     532,   533,   534,   535,     0,   536,   537,   538,   539,   540,
     541,     0,   542,     0,   543,   544,   545,   546,   547,   548,
       0,     0,     0,     0,     0,     0,     0,     0,   549,     0,
       0,     0,     0,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   843,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   550,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,  2533,     0,     0,     0,     0,
       0,     0,   842,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   551,     0,     0,     0,     0,
       0,     0,   499,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,   500,     0,     0,     0,  2078,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   501,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,   552,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   554,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   843,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2644,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1586,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   510,     0,     0,     0,     0,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2078,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,   513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,   514,     0,
      39,     0,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,   528,   529,   530,   531,
     532,   533,   534,   535,     0,   536,   537,   538,   539,   540,
     541,     0,   542,     0,   543,   544,   545,   546,   547,   548,
       0,     0,     0,     0,     0,     0,     0,     0,   549,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   550,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   790,   791,     0,     0,     0,     0,     0,     0,     0,
     792,  2312,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   510,     0,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   784,     0,   513,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   554,     0,     0,
       0,     0,    38,   514,     0,    39,     0,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
       0,   528,   529,   530,   531,   532,   533,   534,   535,     0,
     536,   537,   538,   539,   540,   541,     0,   542,     0,   543,
     544,   545,   546,   547,   548,     0,     0,     0,     0,     0,
       0,     0,     0,   549,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1988,   550,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
       0,     0,     0,     0,     0,   792,  2379,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   510,     0,     0,     0,     0,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,   513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,   552,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   554,     0,     0,     0,     0,    38,   514,     0,
      39,     0,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,   528,   529,   530,   531,
     532,   533,   534,   535,     0,   536,   537,   538,   539,   540,
     541,     0,   542,     0,   543,   544,   545,   546,   547,   548,
   -1256,     0,     0,     0,     0,     0,     0,     0,   549,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1092,   550,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   790,   791,     0,     0,     0,     0,     0,     0,     0,
     792,  1194,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   510,     0,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   784,     0,   513,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   554,     0,     0,
       0,     0,    38,   514,     0,    39,     0,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
       0,   528,   529,   530,   531,   532,   533,   534,   535,     0,
     536,   537,   538,   539,   540,   541,     0,   542,     0,   543,
     544,   545,   546,   547,   548,  1879,     0,     0,     0,     0,
       0,     0,     0,   549,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   550,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
       0,     0,     0,     0,     0,   792,  1732,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   510,     0,     0,     0,     0,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,   513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,   552,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   554,     0,     0,     0,     0,    38,   514,     0,
      39,     0,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,   528,   529,   530,   531,
     532,   533,   534,   535,     0,   536,   537,   538,   539,   540,
     541,     0,   542,     0,   543,   544,   545,   546,   547,   548,
       0,     0,     0,     0,     0,     0,     0,     0,   549,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   550,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   790,   791,     0,     0,     0,     0,     0,     0,     0,
     792,  2325,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   554,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
       0,     0,     0,     0,     0,   792,  2327,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   790,   791,     0,     0,     0,     0,     0,     0,     0,
     792,  2353,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
       0,     0,     0,     0,     0,   792,  2370,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   790,   791,     0,     0,     0,     0,     0,     0,     0,
     792,  2512,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
       0,     0,     0,     0,     0,   792,  2514,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   790,   791,     0,     0,     0,     0,     0,     0,     0,
     792,  2520,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
       0,     0,     0,     0,     0,   792,  2546,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,   898,     0,     0,     0,     0,     0,
       0,     0,     0, -1680, -1680,     0,     0,     0,     0,     0,
    2252,   783,    36,     0,     0,     0,  2253,     0,     0,     0,
     976,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   977,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2254,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   993,     0,
       0,   790,   791,     0,     0,     0,     0,     0,     0,     0,
     792,  2639,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1680,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1680,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,   898,
       0,     0,     0,     0,     0, -1680,     0,     0, -1680, -1680,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,   976,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1680,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     994,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   977,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   978,
    1544,  1545,  1546,  1547,  1548,  1549,   790,   791,     0,     0,
       0,     0,     0,     0,     0,  2255,     0,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1680,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1680,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,   898,     0,     0,     0,     0,     0,
   -1680,     0,     0, -1680, -1680,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
     976,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1680,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   977,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   978,  1544,  1545,  1546,  1547,  1548,
    1549,   790,   791,     0,     0,     0,     0,     0,     0,     0,
     979,     0,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1680,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1680,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0, -1680,     0,     0, -1680, -1680,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1680,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   977,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   978,
    1544,  1545,  1546,  1547,  1548,  1549,   790,   791,     0,     0,
       0,     0,     0,     0,     0,  2255,     0,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1680,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1680,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
   -1680,     0,     0, -1680, -1680,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1680,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   977,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1532,  1544,  1545,  1546,  1547,  1548,
    1549,   790,   791,     0,     0,     0,     0,     0,     0,     0,
    1956,     0,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1680,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1680,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0, -1680,     0,     0, -1680, -1680,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1680,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   977,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1532,
    1544,  1545,  1546,  1547,  1548,  1549,   790,   791,     0,     0,
       0,     0,     0,     0,     0,  2464,     0,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1680,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1680,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
   -1680,     0,     0, -1680, -1680,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1680,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   977,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1532,  1544,  1545,  1546,  1547,  1548,
    1549,   790,   791,     0,     0,     0,     0,     0,     0,     0,
    2466,     0,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1680,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1680,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0, -1680,     0,     0, -1680, -1680,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1680,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   977,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1532,
    1544,  1545,  1546,  1547,  1548,  1549,   790,   791,     0,     0,
       0,     0,     0,     0,     0,   792,     0,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1680,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1680,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
   -1680,     0,     0, -1680, -1680,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1680,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   977,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1532,  1544,  1545,  1546,  1547,  1548,
    1549,   790,   791,     0,     0,     0,     0,     0,     0,     0,
    2599,     0,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1680,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1680,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,   898, -1680,     0,     0,     0,     0,
       0,     0,     0, -1680, -1680,     0,     0,    36,     0,     0,
       0,   783,     0,     0,     0,     0,     0,     0,     0,     0,
     976,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1680,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   977,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,     0,     0,     0,     0,
       0,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1532,
    1544,  1545,  1546,  1547,  1548,  1549,   790,   791,   993,     0,
       0,     0,     0,     0,     0,  2603,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1680,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1680,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,   898,
       0,     0,     0,     0,     0, -1680,     0,     0, -1680, -1680,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,   976,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1680,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     994,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   977,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   978,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
       0,     0,     0,     0,     0,   979,     0,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1680,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1680,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,   898,     0,     0,     0,     0,     0,
   -1680,     0,     0, -1680, -1680,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
     976,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1680,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   977,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   978,     0,     0,     0,     0,     0,
       0,   790,   791,     0,     0,     0,     0,     0,     0,     0,
     979,     0,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1680,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1680,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0, -1680,     0,     0, -1680, -1680,
       0,     0,     0,     0,     0,     0,   783,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1680,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   977,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1532,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
       0,     0,     0,     0,     0,  1533,     0,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1680,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1680,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
   -1680,     0,     0, -1680, -1680,     0,     0,     0,     0,     0,
       0,   783,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1680,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   977,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     789,   786,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1532,     0,     0,     0,     0,     0,
       0,   790,   791,     0,     0,     0,     0,     0,     0,     0,
    1541,     0,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1680,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,    33,
       0,   495,   496,     0,     0,     0,     0,     0,     0,  1164,
       0,     0,   788,     0,     0,     0,     0,     0,     0,     0,
     497,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1680,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1680,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1680,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    32,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   789,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    33,     0,  1532,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
    2399,     0,     0,     0,     0,   792,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     499,     0,     0,    34,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,   500,     0,     0,     0,  2394,     0,     0,
       0,     0,     0,     0,   783,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   784,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   501,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,  2400,   786,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1165,  1166,     0,     0,     0,     0,
       0,     0,     0,  1167,     0,     0,     0,     0,     0,     0,
       0,   787,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   788,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2395,   783,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     784,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   785,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   789,   786,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   790,
     791,     0,     0,     0,     0,     0,     0,     0,   792,     0,
       0,     0,     0,     0,     0,     0,   787,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    33,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     788,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    34,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2078,     0,     0,
       0,     0,     0,     0,   783,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   784,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   789,   786,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   790,   791,     0,     0,     0,     0,
       0,     0,     0,   792,     0,     0,     0,     0,     0,     0,
       0,   787,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   788,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2673,     0,     0,     0,     0,     0,     0,   783,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     784,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   789,   786,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   790,
     791,     0,     0,     0,     0,     0,     0,     0,   792,     0,
       0,     0,     0,     0,     0,     0,   787,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    33,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     788,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    34,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   783,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   784,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   789,   786,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   790,   791,     0,     0,     0,     0,
       0,     0,     0,   792,     0,     0,     0,     0,     0,     0,
       0,   787,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   788,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   783,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     784,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   789,   786,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   790,
     791,     0,     0,     0,     0,     0,     0,     0,   792,     0,
       0,     0,     0,     0,     0,     0,   787,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    33,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     788,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    34,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,    32,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   789,    28,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    34,     0,   792,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,    39,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    32,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      33,     0,     0,     0,     0,     0,     0,     0,   111,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    34,     0,     0,     0,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   783,    38,     0,     0,    39,     0,     0,     0,
       0,     0,     0,   784,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,  1929,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   115,     0,     0,    32,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   811,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    34,     0,     0,     0,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1930,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   783,     0,     0,     0,
       0,     0,     0,    38,     0,     0,    39,   784,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   812,   813,     0,
      32,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   811,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1930,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1680, -1680,     0,     0,
       0,     0,     0,     0, -1680,     0,     0,    38,     0,     0,
      39,     0,     0,     0,     0, -1680,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     766,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   812,   813,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   875,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   787,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1680,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1680,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1680,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1680,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     495,     0,     0,     0,     0,     0,     0,     0,   783,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   784,
       0,     0,     0,     0,     0,    38,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    32,     0,     0,     0,     0,     0,     0, -1680,
   -1680,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1895,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   498,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    33,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   811,
       0,     0,     0,     0,     0,     0,     0,   783,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   784,   499,
       0,     0,    34,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1896,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   501,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
       0,     0,    39,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,  1897,     0,   787,     0,  1329,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   812,   813,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   811,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   783,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,     0,     0,     0,     0,    38,     0,
       0,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   812,   813,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   810,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   811,   879,     0,     0,     0,     0,     0,     0,
     783,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   784,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
      31,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,     0,     0,   787,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   812,   813,    33,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   811,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    34,     0,     0,     0,     0,     0,
      35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   783,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   784,     0,     0,     0,     0,
       0,    38,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   812,   813,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   923,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   787,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,     0,     0,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   811,     0,     0,     0,     0,
       0,     0,     0,   783,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   784,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,    39,     0,
       0,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,     0,  1487,
     787,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   812,
     813,    33,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   811,     0,     0,     0,     0,     0,
       0,     0,   783,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   784,     0,     0,     0,    34,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    38,     0,     0,    39,     0,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,     0,     0,   787,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   812,   813,
      33,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   811,     0,     0,     0,     0,     0,     0,
       0,   783,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   784,     0,     0,     0,    34,     0,     0,     0,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,    39,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1785,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,     0,  1919,   787,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   812,   813,    33,
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   811,     0,     0,     0,     0,     0,     0,     0,
     783,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   784,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,     0,     0,
      31,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,     0,     0,   787,     0,     0,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   783,     0,
       0,     0,     0,     0,     0,     0,   812,   813,    33,   784,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   811,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    34,     0,     0,     0,     0,     0,
      35,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    38,    32,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   867,     0,    33,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   811,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,   812,   813,     0,     0,     0,
       0,     0,    34,     0,     0,   836,     0,     0,    35,     0,
       0,     0,   837,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   838,   839,   840,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    32,     0,     0,     0,
       0,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   812,   813,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1339,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    28,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    34,     0,     0,     0,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,    39,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   299,
       0,    32,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1688,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,  1340,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    33,     0,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   495,   836,     0,
       0,     0,     0,     0,     0,   837,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   497,     0,     0,     0,
       0,    34,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1798,     0,    36,     0,   838,   839,   840,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0, -1688,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   841,     0,     0,     0,     0,     0,     0,    38,     0,
       0,    39,     0,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1688,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,  1799,   787,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    33,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,     0,   842,     0,   495,   836,
       0,     0,     0,     0,     0,     0,   837,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   499,   497,     0,    34,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   500,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,   838,   839,   840,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   501,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,     0,    39,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   843,
       0,     0,     0,   787,     0,     0,    28,     0,     0,     0,
       0,     0,     0,   498,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   842,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   499,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
     500,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   501,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   299,    38,    32,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1688,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     843,     0,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1798,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0, -1688,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,   898,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0, -1688,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,  1799,    31,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    32,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     899,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    33,     0,     0,
       0,     0,     0,     0,     0,     0,   900,     0,     0,     0,
     901,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    34,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   783,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   784,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   902,   786,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   787,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   788,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,    32,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1463,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   789,    28,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    34,     0,     0,     0,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,    39,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1464,     0,     0,     0,     0,     0,   299,
       0,    32,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1465,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   902,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1798,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,    32,
       0,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,  1799,    28,    33,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    34,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1798,
       0,    36,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,     0,    39,
      31,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,  1799,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    33,     0,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     495,   912,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   497,
       0,     0,     0,     0,    34,     0,     0,     0,     0,     0,
      35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    38,     0,     0,    39,     0,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   938,   787,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   498,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,  1481,    33,     0,   495,  2223,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   497,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   499,
       0,     0,    34,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   500,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   501,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,    38,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      32,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,     0,   498,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   495,  1872,     0,     0,     0,
       0,     0,     0,  2654,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   497,     0,     0,   499,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     500,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   501,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2224,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     787,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,    33,     0,   495,   496,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   497,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   499,     0,     0,    34,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   500,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   501,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,    38,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,     0,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     495,   912,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   497,
       0,     0,   499,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   500,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   501,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   787,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   498,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    33,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   495,  1872,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   497,     0,     0,   499,
       0,     0,    34,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   500,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   501,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
       0,     0,    39,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   787,    28,     0,     0,     0,     0,     0,     0,
       0,     0,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1755,     0,     0,
       0,     0,     0,    33,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   499,     0,     0,    34,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,   500,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   501,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    32,    38,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,    33,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   740,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,    31,  2458,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   696,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   863,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    33,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    34,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    32,    38,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   741,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   944,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   863,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1379,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    33,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    34,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
       0,     0,    39,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,  2441,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   863,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    33,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    34,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2442,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    32,    38,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,    33,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    39,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   822,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    33,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    34,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    32,    38,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,    33,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   863,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,    39,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   894,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    32,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,    33,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     910,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,    39,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   928,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,    39,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   787,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1452,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    32,    38,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,    33,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1831,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,    39,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,     0,    28,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2001,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      31,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    32,    38,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,    33,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2208,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    34,     0,     0,     0,     0,     0,
      35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    38,     0,     0,    39,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,     0,    28,   898,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    32,    38,     0,
       0,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,    33,    28,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2579,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    34,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    38,     0,     0,    39,     0,     0,
      31,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    33,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    34,     0,     0,     0,     0,     0,
      35,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      32,    38,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,    33,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      34,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     787,    28,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    33,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    34,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    32,    38,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,    33,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    34,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1196,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1197,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1198,  1199,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,  1200,     0,  1201,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1202,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1203,     0,     0,  1204,     0,  1205,     0,     0,     0,  1206,
    1207,     0,     0,  1208,     0,     0,     0,  1209,     0,     0,
       0,  1210,  1211,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1212,     0,     0,     0,     0,     0,  1213,     0,
       0,     0,     0,     0,     0,  1214,     0,     0,  1215,     0,
       0,     0,  1216,     0,     0,     0,  1217,  1218,     0,     0,
    1219,     0,  1220,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1221,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1222,
    1223,     0,     0,  1224,  1225,  1226,  1227,  1228,  1229,  1230,
       0,     0,     0,     0,     0,     0,     0,  1231,     0,     0,
       0,     0,  1232,  1233,  1234,  1235,     0,     0,  1236,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1237,  1238,
       0,  1239,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1240,  1241,  1242,  1243,  1244,  1245,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1247,  1248,  1249,  1250,     0,     0,     0,
       0,  1251,  1252,  1253,     0,  1254,     0,     0,  1255,  1256,
    1257,  1258,  1259,     0,  1260,     0,  1261,     0,     0,     0,
       0,  1262,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1263,  1264,  1265,     0,     0,     0,     0,     0,     0,
       0,     0,  1266,     0,  1267,  1268,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1269,     0,     0,     0,
    1270,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1271,  1272,  1273,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1274,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1275,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1276,  1277,     0,     0,     0,     0,     0,     0,
    1278,  1279,     0,  1280,     0,     0,     0,  1281,     0,     0,
       0,  1282,  1283,     0,     0,  1284,  1285,     0,     0,     0,
       0,     0,  1286,     0,     0,  1287,  1288,  1289,  1290,  1291,
    1292,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1293,     0,     0,     0,     0,     0,  1294,     0,     0,
       0,     0,     0,     0,     0,  1295,  1296,     0,     0,  1297,
    1298,     0,  1299,  1300,  1301,     0,  1302,     0,     0,  1303,
       0,     0,     0,     0,     0,  1304
};

static const yytype_int16 yycheck[] =
{
     122,   123,    14,    15,   304,   559,   523,   582,  1019,   722,
     553,   232,   674,   541,   529,   889,   525,   700,   701,   904,
     897,   538,  1125,  1114,   461,   534,   333,  1070,   530,   546,
     767,   265,   154,   155,   156,   743,   869,   979,   553,   508,
     988,    15,   463,  1329,  1330,   960,   878,  1048,   264,   349,
     172,   594,  1880,  1438,   878,   970,   556,  1622,  1623,  1073,
      18,   556,  1539,  1540,   556,   187,     1,   301,     1,    49,
      23,    18,    44,    46,    46,    20,    21,    43,     1,   594,
    1366,    44,    46,    22,   907,   594,    32,   349,   524,    34,
      35,    36,    41,    42,    46,    43,     1,   168,    46,    18,
      49,   911,    17,  1129,    55,   378,    18,   178,   198,    49,
      22,    60,   533,    33,   185,   356,    42,    18,    41,    42,
      49,    22,     3,    49,   199,  1411,    49,   790,   140,   345,
      58,   153,   983,    42,    31,  1050,    12,    60,   791,   639,
      49,   138,   156,  1144,   639,    31,   268,   639,   137,   727,
     232,    41,    42,   516,   137,   184,  1591,   545,   361,    49,
      30,    49,   525,   291,   168,   230,   140,   271,   992,    56,
      60,   534,     7,   236,     9,    10,    11,     7,    48,     9,
      10,    11,   545,    31,    54,    52,    42,   122,    30,    56,
      60,   252,   411,    49,   494,    23,   248,    25,   199,    30,
     317,  1487,   248,   519,   326,   283,   643,   230,   236,    30,
     386,   236,   306,   335,    31,   515,   516,    48,   518,   519,
     230,   521,    31,    54,   524,   525,    96,   221,   359,    60,
     530,   594,   393,   533,   534,   306,    43,   307,  1640,   455,
     328,   541,   432,   543,   326,   545,   744,   547,   746,   549,
      31,   551,   540,  1472,   248,   528,  1475,   379,   380,   414,
     274,   384,   185,   221,  2475,    96,   208,   349,    51,   326,
     124,   125,    55,    31,   490,  1405,  1406,   328,   821,    41,
      42,   543,   340,  1801,   367,   274,   203,   384,    60,  2351,
     248,   274,   414,  1678,   594,   162,   230,   223,  1183,   421,
     410,   230,  2364,   464,     1,   427,   821,   816,   430,   431,
     298,   204,  1840,   734,   223,   437,   328,   308,   188,   189,
     190,   594,   865,   178,   540,    30,     1,    31,   450,   540,
       0,   247,   344,   329,   392,   185,   185,   459,   340,   182,
     462,   329,   230,    48,   466,    49,    16,   178,    23,    54,
     865,   276,  1353,   208,   464,    60,  1459,   874,   475,   123,
     571,   424,   193,   421,   156,   361,   149,   869,     0,   360,
     213,   453,   454,   890,   316,   903,   185,  1762,   427,   652,
     306,   230,   220,   298,   435,   278,  1771,   336,  2599,  1774,
     367,    96,  2603,   170,   171,   452,   325,   317,   208,   269,
     576,   208,   236,   691,   101,   493,   178,   530,   325,   328,
     220,   847,   163,   336,   329,   924,   571,   478,   470,   421,
     495,  1939,   810,   348,   470,   453,   587,   497,  1165,  1166,
    1167,   328,   426,   191,   185,   904,    31,   325,  1323,   502,
     659,   390,   347,   369,   370,   361,   336,   810,   369,   812,
     813,   641,   340,   816,   548,  2517,   466,   647,  1843,   576,
     369,   370,   545,    31,   413,   314,   527,   390,   426,   540,
      41,    42,   576,  1358,   502,   540,   470,   502,    49,   576,
     370,   539,   274,   188,   189,   190,   515,   690,  1150,    60,
     413,   361,   309,   363,   495,   478,   383,  1006,   576,  1785,
     390,   564,  1011,  1888,   720,   767,   316,   780,   457,   357,
     810,   827,   470,    41,    42,   878,   816,   540,   367,   571,
     630,    49,   218,   654,   646,   571,   648,   827,  1191,  1192,
     361,   831,    60,   383,   457,   923,   540,   423,   435,   235,
    1193,   841,   758,  1491,  1122,   415,  1397,   847,    41,    42,
     462,   540,   680,   423,   576,  1990,    49,   540,   478,   342,
     923,   924,   684,   259,   269,   806,  1443,   457,   545,   869,
     584,   452,   788,   873,   336,   875,  1667,   571,    31,  1411,
     361,   423,   704,   705,   598,   707,   453,   709,  1503,   603,
     604,  1533,   423,  1403,   540,   811,   869,  1539,  1540,   899,
     614,   901,   423,   725,   694,   433,   482,   907,   690,   496,
     732,   540,   540,   571,   554,   690,   916,   564,   204,   690,
     508,  1647,   548,   923,   924,   576,   842,  1846,   390,   515,
     484,  2033,  1464,  1919,   576,   511,   512,   552,   494,   939,
    1464,  1464,  2170,  1006,  1142,   564,   496,   405,  1011,   922,
    1148,   413,   540,   436,   916,   576,   361,   573,   363,   564,
     411,   496,    41,    42,   576,   361,   496,   521,   502,   365,
    1663,  1503,   205,   307,  1095,   576,   690,   674,   894,   613,
     376,   678,   679,   680,   681,   682,   683,   464,   627,     1,
     577,   366,   278,   276,   878,   457,   545,   283,   664,   672,
     672,   654,   666,   541,   684,   685,  1006,  1224,  1129,   672,
     415,  1011,   664,   693,    31,   627,   664,  1379,   423,   185,
    1850,  1851,  1852,   243,   257,   243,   627,   577,    42,   297,
      42,   541,   690,   200,   221,   684,   685,    49,  1011,  1012,
    1013,  1014,     0,   690,   693,    57,   959,   692,   314,  2577,
     684,   685,   686,   687,   688,   690,    31,   690,   684,   685,
     281,   684,   685,   642,   230,   336,   576,   693,   464,   465,
     693,  2248,  2249,   978,   368,   684,   685,   408,   991,   347,
     411,   364,   987,   479,   693,   481,  2456,  2457,  2458,  1332,
     178,   359,   584,   168,   684,   685,  1810,   478,  2183,   408,
     366,   284,     4,   178,  1017,   193,   598,   677,   336,   204,
     185,   603,   604,  1322,  1121,     0,  1640,  1332,  1318,   390,
     540,  1330,   614,  1318,   694,   345,  1318,   345,    23,    14,
      15,    16,   169,  1049,   213,  1051,   243,  1306,   424,   360,
    2080,   361,   413,   336,   564,   184,   677,   678,   679,   680,
     681,   682,   683,   385,  1070,    50,  1365,  1366,  2144,   540,
     314,   690,   390,   497,    42,   123,  2431,   435,   137,   356,
    1132,    49,  1975,   212,  1449,   571,   409,  2163,  2164,   411,
    2445,   193,  1182,   278,  1184,   413,   457,   208,    42,   203,
     243,  1107,  2132,    31,   361,    49,   218,   390,   492,   220,
     690,   367,  1411,  1405,  1406,  2191,   515,  1141,   271,  1910,
     364,    49,   366,   235,   184,  2480,   185,   188,  1435,   188,
     191,   192,   191,   192,   287,  1047,  1682,  1683,  1684,   457,
    1052,   306,   232,  1055,  1056,   947,  1058,   259,   345,  1932,
    1933,  1125,   212,  2229,    42,   576,  1068,   467,   343,   467,
    1134,    49,  1074,  2044,  1076,  2046,   835,   336,  1395,  1322,
     385,  1398,  1516,  1846,   457,  1181,   329,  1330,    23,  1091,
    1092,   308,   677,   947,   286,   458,    31,  1486,  1487,  1101,
     184,   514,  1719,  1720,  1721,  1722,   411,  2464,  2553,  2466,
     576,     0,   345,  1462,   690,   316,  1118,  1705,   269,  1574,
     269,   576,  1365,  1366,  1952,   274,  1560,    16,   212,   542,
     558,   390,   891,  1675,  1929,  1848,  1849,   288,  2583,   288,
     503,   361,  1322,   360,  1907,   573,   326,  1975,  1911,  1329,
    1330,   640,   641,  1587,  2419,  1327,  1354,  2422,    38,   361,
      40,  1341,  1342,   365,   469,  2732,   453,   221,  1411,   349,
    1593,  2616,   373,   374,   376,  1347,  2726,  2727,  2745,  1359,
     467,     8,   343,  1363,  1364,  1365,  1366,   188,   189,   190,
    1362,  1344,   191,  1373,   675,   676,   829,   196,  1593,   545,
    1479,  1590,   422,   255,   424,   361,  1472,  2652,   273,  1475,
     516,   493,   373,   694,  1493,   193,   408,  1929,   524,   525,
     853,  1464,   455,   222,   276,  1405,  1406,   533,   534,  1427,
    1142,  1411,   274,   297,   467,  1328,  1148,   543,  1410,   545,
    1393,   547,  1440,  1486,  1487,  1338,   635,   880,  1428,   690,
     555,   675,   676,  1433,   405,   406,   405,   406,  1438,     6,
    1503,  1897,   464,   465,   415,   416,   415,   416,   269,    31,
     694,   576,   884,   453,   454,   102,   103,   479,  1458,   481,
     107,   893,   109,   347,  1464,   540,   113,   114,   594,   116,
     117,  1489,   925,  2216,   121,   359,  1438,  2562,  2563,    31,
    2565,  1481,  1500,   675,   676,   401,  1486,  1487,  2657,    37,
     471,    39,    40,   591,   926,  2664,  1488,  2666,   233,   597,
    2291,   933,   694,  1503,   588,   623,   624,  1507,  1508,   478,
     191,   609,   610,   631,    31,   196,   197,   675,   676,  1432,
     541,   690,   503,  1523,    31,    42,  1647,  1590,  1444,   647,
      14,    15,    49,    49,  1788,    42,   694,   675,   676,   623,
     624,   625,   363,  1797,    60,   203,  2715,   631,   540,   571,
    1484,   435,  1795,   609,   610,   576,   694,    31,     5,     0,
    1494,   645,   646,   647,     5,     6,  2716,  1480,    42,  2719,
    2720,   540,    31,    14,    15,    16,   684,   685,   686,   687,
    1795,   684,   685,   686,   687,   404,   405,    99,   100,   101,
    1590,   694,    91,    92,   415,   691,   692,   693,   464,   246,
     466,  1601,  1515,  1739,   422,  1741,   424,  2255,  1744,  2257,
     539,   540,  1748,  2255,    99,  1869,   101,  1753,   684,   685,
    1756,  1757,  1758,  1759,    23,  1761,    25,  1532,  2713,    42,
    1766,  1767,   690,  1769,  1539,  1540,  1541,   422,    42,   424,
    1857,   686,   687,  1779,  1780,    56,  1848,  1849,  1850,  1851,
    1852,   464,   333,   466,   506,  2188,  2189,  2190,  1571,  2191,
     675,   676,  1916,  1012,  1013,  1014,   201,   202,   690,  1582,
    2473,   690,   778,  1680,   780,  1648,   373,   374,  1678,   100,
     101,   686,   687,   690,   810,  1894,    22,    23,  1942,   690,
     816,  1607,  1665,  1902,   690,   675,   676,   549,   293,   294,
    1975,  2063,  1839,  1619,  1620,  1189,  1190,  1377,  1378,  2500,
    2667,  2668,   690,  2290,    60,   841,  1678,  2154,   690,   426,
     169,   847,   690,   404,   405,   690,   690,   690,  1982,   690,
     582,   690,   584,  1987,   690,   273,   690,    31,    31,  1739,
      31,  1741,    31,    31,  1744,    31,    31,   873,  1748,    31,
     690,   476,     1,  1753,   392,   690,  1756,  1757,  1758,  1759,
     690,  1761,  1762,   242,    31,    31,  1766,  1767,  2479,  1769,
      31,  1771,  2134,    31,  1774,  1597,  1985,    31,    31,  1779,
    1780,    31,   506,   690,   230,  1785,   247,   421,   571,  1789,
     916,  1791,  1708,   369,    31,  1617,  1618,   923,   924,   392,
    1762,  1801,  1923,  1625,  2021,  2022,   203,   184,    56,  1771,
      31,    53,  1774,   678,   679,   680,   681,   682,   683,    31,
      31,  2469,    42,   690,   325,  2473,  2474,  2475,  1828,   655,
     657,  1894,   560,   673,   662,   660,  1836,   670,   658,  1902,
     656,   665,   671,  1843,  2429,   668,   464,  1847,  1848,  1849,
    1850,  1851,  1852,  1853,   669,   667,  2430,   229,    49,   576,
     502,  1861,   519,  1784,   424,   502,  1929,   201,   690,   357,
     203,   271,  1694,   690,  1787,    31,  2289,    31,    41,    42,
    1006,  1843,  1704,  1796,   519,  1011,    49,   239,  1888,  2143,
    1890,    31,    49,  2147,  1894,  1895,    31,    60,   573,  2282,
    2283,    31,  1902,   329,   277,    60,   539,   343,    20,  2620,
      31,   693,    31,   501,   520,   408,   540,   674,  1918,  1919,
    1920,   421,  1985,   421,  1924,   695,  1888,   688,   690,  1929,
      24,    31,   493,    46,  2055,  2056,  2057,  1937,   421,  1939,
     792,  2077,  2196,   691,  1917,   473,  2082,  2201,   800,  2203,
    1863,  2599,   804,   473,   540,  2603,  1918,   540,   221,  2095,
    2096,   325,    43,  2099,  2100,  2101,  2102,  2221,   356,  2197,
     464,   325,   573,  1886,  1887,   178,    23,  2113,  2114,  2115,
     832,  2117,  2118,  2119,  2238,  1985,  2188,  2189,  2190,  1701,
     421,  1813,    58,    50,   275,  2131,   275,   230,   564,   421,
      31,   642,  1915,   180,   690,   168,  1922,   183,    60,   137,
     539,   184,  1925,   539,   674,   178,   364,   194,   317,    31,
      42,   503,   185,   602,   502,   401,    42,   540,    31,    31,
     207,   277,    42,   306,  2007,   540,    31,   221,   277,    38,
     229,     1,   411,   392,   694,   693,   122,   693,  1953,   693,
     693,  1956,   636,   693,   693,    42,   401,   693,    25,   236,
     540,  2270,   693,   693,   693,   693,  2039,   693,   693,   462,
    1975,   693,   693,   693,   693,   153,   693,  2077,   693,   693,
     693,   693,  2082,   693,  2000,  2498,   693,  2003,   693,   693,
     693,   693,  2054,   693,   693,  2095,  2096,   693,   540,  2099,
    2100,  2101,  2102,   693,  2020,   540,   693,   540,   693,  2109,
      43,   464,   693,  2113,  2114,  2115,   693,  2117,  2118,  2119,
    2120,   693,   693,   693,   180,   693,   978,   979,  2191,   464,
     356,  2131,   309,   540,  2050,  2051,  2052,   540,   194,   540,
     283,   221,  2142,   306,  2144,  2061,   221,   356,  2148,   613,
    2150,   207,    18,  2153,  2154,   583,  2410,   690,   582,   693,
     139,   138,   659,  2163,  2164,   661,  2381,   178,   539,   178,
     530,   384,   325,   336,   564,    57,   433,    31,  2314,    31,
     236,   425,    31,  2183,    31,  2439,    31,   364,  2188,  2189,
    2190,  2191,  2154,   674,    49,  2557,  1322,  2197,  2473,    49,
     508,    49,   540,    49,  1330,  2341,    49,  2270,   385,   674,
    2210,   674,   674,   277,    38,   101,   506,   694,   694,   694,
    2356,  2183,    99,   694,   100,   273,   328,   390,  2228,  2229,
     203,   450,   328,  2233,   421,   328,  2236,   153,   274,  1365,
    1366,   571,  2242,   328,   328,    43,   364,   422,   340,  2162,
     413,     1,    18,   309,   328,   432,   185,  2230,   676,   502,
     437,   139,   325,  2236,   178,   510,    31,    31,    31,  2478,
    2270,  2233,   564,   424,   422,   444,    26,    27,    28,    29,
      49,   316,    31,   366,   694,  1411,  2199,   464,   694,   694,
     198,    31,   694,   287,   457,   315,   694,  2418,   694,   694,
    2216,   411,   694,   694,   690,   694,   540,   484,   364,  2552,
     694,   694,  1438,   694,  2314,   694,   475,   489,   274,   259,
     221,    33,   540,   564,   139,   502,   429,   504,    55,   385,
     193,   675,   694,  2454,   221,   386,  1188,  2552,  2251,   178,
      31,  2341,   519,  2248,  2249,   523,  2058,  2575,   208,    49,
    2255,  2605,   102,   103,    42,  2572,  2356,   107,  2263,   109,
    1486,  1487,    49,   113,   114,  2582,   116,   117,   694,   175,
     694,   121,  2194,   694,   694,   694,   432,   540,   694,   694,
      31,   437,   694,   694,   694,   694,   309,   694,   694,  2389,
    2306,   694,   694,  2309,   694,  2612,  2218,   369,  2534,  2399,
     515,   489,   448,  2539,   421,   221,   317,   221,   464,   680,
     448,  2411,  2412,    55,   369,  2478,   558,    25,   309,  2419,
    1272,   178,  2422,   399,    42,   694,   694,   333,   484,   694,
     694,   184,  2432,    33,  2651,   694,  2690,   178,   694,   694,
     243,   449,   694,   694,   448,   283,   502,   694,   504,    31,
      31,  2451,  2452,  2275,   694,   345,   694,  2419,   694,   694,
    2422,  2678,   694,   519,  1590,    31,   255,   527,    23,   694,
     694,   312,   674,   663,  2691,     7,   138,   127,  2478,   230,
     125,   147,   268,   273,   213,   279,   679,   313,   363,  2743,
     654,  2708,  2271,  1613,   289,  1084,  2750,   371,  2752,   418,
    1644,  2637,  1093,   689,   226,   324,   437,   723,   429,  1673,
    2646,  1119,  1663,   690,  1111,  1095,   744,  2490,  2434,  1146,
    2306,  2058,   466,  1146,  2437,  1134,   753,  1715,   301,   306,
    2154,  2447,  1523,   958,  2534,   958,   566,  1351,   181,  2539,
    1156,  2159,  1504,   570,  1527,   939,   978,  1158,   576,  1956,
    2473,  2251,  1678,  1569,   922,  1755,  1567,  2255,   542,  2464,
    2560,  2466,  2562,  2563,  2477,  2565,  1370,  2472,  2473,  2474,
    2475,  1781,   764,  1572,   588,  2575,  2492,  1763,  1345,  1416,
    1019,  1011,  1011,  2268,  2483,  1589,  1425,   594,  2489,  1498,
    2590,  2591,  2592,  2593,  1755,   548,   597,  1449,  1440,  1929,
    2562,  2563,  1470,  2565,   610,   605,  1447,  1468,  2437,  2439,
     841,  2575,  2572,  1739,  2725,  1741,  2739,   615,  1744,  1430,
    2425,  2669,  1748,  2424,  2181,   622,  2422,  1753,  2661,  1755,
    1756,  1757,  1758,  1759,   690,  1761,  1762,  2637,     0,     1,
    1766,  1767,  2167,  1769,  1842,  1771,  2646,  2170,  1774,   627,
    1507,  1801,  2153,  1779,  1780,  2148,  1332,  1337,  2233,  2454,
    2381,   635,  2236,   638,  2323,  2665,  2120,  2667,  2668,   431,
     930,  2358,  2494,  2495,   735,  2138,  2652,   254,   250,    -1,
      -1,  1533,    -1,    -1,    -1,    -1,   916,  1539,  1540,  1541,
      52,    -1,    -1,    -1,  2599,    -1,    -1,  2602,  2603,    -1,
      -1,  2614,    -1,  2665,    -1,  2667,  2668,    -1,    -1,  2625,
      -1,    -1,    -1,  2713,    -1,  1567,  2716,  1843,  2718,  2719,
    2720,    -1,  1574,    -1,    -1,    -1,    -1,    -1,    -1,  2441,
    2442,    -1,    -1,    -1,    -1,    -1,  2448,    -1,    -1,    -1,
      -1,  2741,  2742,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2713,    -1,    -1,  2716,    -1,    -1,  2719,  2720,  2581,
      -1,    -1,  1888,    -1,    -1,    -1,    -1,    -1,  1894,    -1,
      -1,    -1,    -1,    -1,   136,    -1,  1902,    -1,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,   174,   175,   176,   177,    17,    -1,  2731,    -1,
      -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,
      -1,  2744,    -1,    -1,    -1,    -1,     0,     1,  2751,    -1,
      -1,     5,    -1,     7,    -1,     9,    10,    11,    -1,    -1,
      14,    15,    16,    -1,    -1,    -1,    -1,  2679,    -1,  1985,
      -1,    -1,    26,    27,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1728,    -1,    -1,    -1,
       1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1740,    -1,
    1742,  1743,    -1,  1745,  1746,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,
      17,  1763,    -1,    -1,    -1,    -1,    -1,    -1,  1770,    -1,
    1772,    -1,    -1,  1775,  1776,  1777,  1778,   289,    -1,  1781,
      -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,
      -1,    -1,    -1,   107,    -1,   109,    -1,    -1,    -1,   113,
     114,  2077,   116,   117,    -1,    -1,  2082,   121,    -1,    -1,
      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2095,
    2096,    -1,    -1,  2099,  2100,  2101,  2102,    -1,    -1,    -1,
      -1,    -1,    -1,  2109,    -1,    -1,    -1,  2113,  2114,  2115,
      -1,  2117,  2118,  2119,  2120,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2131,    -1,    -1,    -1,   210,
      -1,    -1,    -1,    -1,    -1,   136,   217,    -1,    -1,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,   174,   175,   176,   177,  2183,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     197,  1943,    -1,    -1,    -1,    -1,    -1,   298,    -1,   461,
      -1,    -1,    -1,   210,  1956,    -1,    -1,  2233,    -1,    -1,
     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1975,   486,    -1,    -1,    -1,   329,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,  2270,    -1,    -1,    -1,     0,     1,
      -1,    -1,    -1,     5,    -1,     7,    -1,     9,    10,    11,
     361,    -1,    14,    15,    16,    -1,   367,    -1,   289,    -1,
      -1,    -1,    -1,    -1,    26,    27,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2314,    -1,
      -1,   298,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   414,    -1,  2341,    -1,    -1,    -1,   420,
      -1,    -1,   329,    -1,    -1,    -1,    -1,    -1,  2080,    -1,
    2356,    -1,    -1,    -1,  2086,  2087,    -1,    -1,  2090,    -1,
    2092,  2093,   443,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,   103,    -1,    -1,   361,   107,    -1,   109,    -1,  2111,
     367,   113,   114,    -1,   116,   117,    -1,   468,    -1,   121,
      -1,  2123,  2124,    -1,    -1,  2127,    -1,  2129,    -1,    -1,
    2132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   410,
      -1,    -1,    -1,  2419,   495,    -1,  2422,    -1,    -1,    -1,
    2152,    -1,    -1,    -1,    -1,   506,    -1,   414,  2160,  2161,
      -1,    -1,    -1,   420,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   525,    -1,    -1,    -1,   690,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   443,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   545,    -1,    -1,    -1,    -1,    -1,
     551,   552,  2478,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   468,   563,    -1,    -1,   486,    -1,    -1,    -1,    -1,
     571,    -1,    -1,   574,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    13,    -1,   495,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,
      -1,    -1,    -1,  2255,    31,    32,    -1,    -1,  2534,    -1,
      -1,    -1,    -1,  2539,    41,    42,    -1,    -1,   525,    -1,
      -1,    48,    49,    -1,    -1,    -1,    -1,    54,    -1,    -1,
      -1,    58,    -1,    60,    -1,    -1,  2562,  2563,   545,  2565,
      -1,    -1,    -1,    -1,   551,   552,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   307,   563,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   571,    -1,    -1,   574,    -1,    -1,
      97,    98,    -1,    -1,  2326,    -1,  2328,    -1,    -1,    -1,
      -1,   108,  2334,  2335,    -1,    -1,    -1,    -1,    -1,   690,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2637,    -1,    -1,    -1,    -1,    -1,  2369,    -1,  2371,
    2646,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2665,
      -1,  2667,  2668,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   179,    -1,   181,   676,    -1,    -1,   185,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,   206,
      -1,    -1,   209,   690,   211,    -1,    -1,  2713,   215,   216,
    2716,    -1,   219,  2719,  2720,    -1,   223,    -1,    -1,    -1,
     227,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   238,  2464,    -1,  2466,    -1,    -1,   244,    -1,    -1,
      -1,  2473,    -1,    -1,   251,    -1,    -1,   254,    -1,    -1,
      -1,   258,    -1,    -1,    -1,   262,   263,    -1,    -1,   266,
      -1,   268,    -1,    -1,   496,   497,    -1,    -1,    -1,    -1,
      -1,    -1,   279,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2519,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,    -1,    -1,   324,    -1,   326,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   334,   335,   336,
     337,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2574,   350,   351,   352,   353,   354,   355,    -1,
     357,    -1,    -1,    -1,    -1,    -1,  2588,    -1,    -1,    -1,
      -1,    -1,   369,   370,    -1,    -1,    -1,  2599,    -1,    -1,
      -1,  2603,   379,   380,   381,   382,    -1,    -1,    -1,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,    -1,    -1,    -1,    -1,
     407,    -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,
     417,   418,   419,    -1,    -1,    -1,    -1,    -1,   425,    -1,
      -1,   428,    -1,   430,   431,    -1,   433,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     457,   458,   459,   460,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,    -1,    -1,   472,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,    -1,   513,    -1,    -1,    -1,
     517,   518,    -1,   520,   521,   522,   523,    -1,    -1,    -1,
      -1,   528,    -1,    -1,   531,   532,   533,   534,   535,   536,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     547,   548,    -1,    -1,    -1,    -1,   553,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   561,   562,    -1,    -1,   565,   566,
      -1,   568,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,    -1,    -1,   581,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,    -1,    -1,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     677,   678,   679,   680,   681,   682,   683,   684,   685,    31,
      32,    -1,    -1,    -1,    -1,    -1,   693,    -1,    -1,    41,
      42,    -1,    -1,    -1,    -1,    -1,    48,    49,    -1,    -1,
      -1,    -1,    54,    -1,    -1,    -1,    58,    -1,    60,     0,
       1,    -1,    -1,    -1,     5,    -1,     7,    -1,     9,    10,
      11,    -1,    -1,    14,    15,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    26,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,   103,    -1,    -1,    -1,   107,    -1,   109,    -1,
      -1,    -1,   113,   114,    -1,   116,   117,   179,    -1,   181,
     121,    -1,    -1,   185,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,   206,    -1,    -1,   209,    -1,   211,
      -1,    -1,    -1,   215,   216,    -1,    -1,   219,    -1,    -1,
      -1,   223,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     187,    -1,   244,    -1,    -1,    -1,    -1,    -1,    -1,   251,
      -1,    -1,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,
     262,   263,    -1,    -1,   266,    -1,   268,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   279,    -1,    -1,
      -1,    -1,    -1,   285,    -1,   232,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   256,
      -1,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
      -1,    -1,   324,    -1,   326,   272,    -1,    -1,    -1,    -1,
      -1,    -1,   334,   335,   336,   337,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   350,   351,
     352,   353,   354,   355,    -1,   357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   307,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,
     382,    -1,    -1,    -1,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,    -1,    -1,    -1,    -1,   407,    -1,    -1,    -1,    -1,
      -1,   413,    -1,    -1,    -1,   417,   418,   419,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,   428,    -1,   430,   431,
      -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     442,    -1,    -1,    -1,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   457,   458,   459,   460,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
     472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,
      -1,   513,    -1,    -1,    -1,   517,   518,    -1,   520,   521,
     522,   523,    -1,    -1,    -1,    -1,   528,    -1,    -1,   531,
     532,   533,   534,   535,   536,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   547,   548,    -1,    -1,    -1,
      -1,   553,    -1,    -1,    -1,   496,   497,    -1,    -1,   561,
     562,    -1,    -1,   565,   566,    -1,   568,   569,   570,    -1,
     572,    -1,    -1,   575,    -1,    -1,    -1,   524,    -1,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   677,   678,   679,   680,   681,
     682,   683,   684,   685,    31,    -1,    -1,    -1,    -1,    -1,
      -1,   693,    -1,    -1,     0,     1,    -1,    -1,    -1,     5,
      -1,     7,    49,     9,    10,    11,    -1,    -1,    14,    15,
      16,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      26,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    -1,    -1,    -1,   102,   103,    -1,    -1,
      -1,   107,    -1,   109,    -1,    -1,    -1,   113,   114,    -1,
     116,   117,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   179,    -1,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,   206,
      -1,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,
      -1,    -1,   219,    -1,    -1,    -1,   223,    -1,    -1,    -1,
     227,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   238,    -1,    -1,    -1,    -1,    -1,   244,    -1,    -1,
      -1,    -1,    -1,    -1,   251,    -1,    -1,   254,    -1,    -1,
      -1,   258,    -1,    -1,    -1,   262,   263,    -1,    -1,   266,
      -1,   268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   279,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,    -1,    -1,   324,    -1,   326,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   334,   335,    -1,
     337,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,
      -1,    -1,    -1,   350,   351,   352,   353,   354,   355,    -1,
     357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,   382,    -1,    -1,    -1,    -1,
     387,   388,   389,    -1,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,    -1,    -1,    -1,    -1,
     407,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     417,   418,   419,    -1,    -1,    -1,    -1,    -1,   425,    -1,
      -1,   428,    -1,   430,   431,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   458,   459,   460,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,    -1,    -1,   472,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,    -1,   513,    -1,    -1,    -1,
     517,   518,    -1,   520,   521,   522,   523,    -1,    -1,    -1,
      -1,   528,    -1,    -1,   531,   532,   533,   534,   535,   536,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     547,    -1,    -1,    -1,    -1,    -1,   553,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   561,   562,    -1,    -1,   565,   566,
      -1,   568,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,    -1,    -1,   581,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,    -1,     0,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    31,    -1,    -1,    -1,   684,   685,    31,
      -1,    -1,    -1,    -1,    -1,    -1,   693,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    -1,    49,    50,    -1,
      52,    -1,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   136,   137,   138,    -1,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
      -1,    -1,    -1,   185,   186,    -1,   188,    -1,    -1,   191,
     192,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,   241,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   260,    -1,    -1,    -1,    -1,   265,    -1,   267,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,
      -1,    -1,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   290,    -1,    -1,    -1,   288,   289,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   323,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,    -1,   405,   406,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   415,   416,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   576,    -1,    -1,    -1,    -1,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,    -1,   654,   655,   656,   657,   658,    -1,   660,   661,
     662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
     672,   673,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    -1,    46,    -1,
      -1,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,     1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,
     138,    -1,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,
      -1,   199,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,   312,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,
      -1,    -1,   390,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   411,    -1,   413,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   461,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   560,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,   663,   664,   665,   666,   667,
     668,   669,   670,   671,   672,   673,     0,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    -1,    46,    -1,    -1,   663,    50,    -1,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,     0,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    14,    15,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,    49,    -1,    -1,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   136,    -1,   138,    -1,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
     123,   185,   186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,   199,    -1,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,   167,   168,   230,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,
      -1,    -1,    -1,   317,    -1,    -1,    -1,    -1,    -1,   323,
      -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,
      -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     323,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,   393,
      -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   413,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   457,    -1,    -1,    -1,   461,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   478,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   452,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,   461,   523,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   545,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,    -1,
     654,   655,   656,   657,   658,    -1,   660,   661,   662,   663,
     664,   665,   666,   667,   668,   669,   670,   671,   672,   673,
       0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    -1,    46,    -1,    -1,    -1,
      50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,     0,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    14,    15,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
      49,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,   138,    -1,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,    -1,    -1,    -1,   123,   185,   186,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,   199,
      -1,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,   167,   168,
     230,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   312,    -1,    -1,    -1,    -1,   317,    -1,    -1,
      -1,    -1,    -1,   323,    -1,    -1,   326,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,    -1,
     390,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,    -1,
      -1,   461,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   452,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,   461,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   545,    -1,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,    -1,   654,   655,   656,   657,   658,    -1,
     660,   661,   662,   663,   664,   665,   666,   667,   668,   669,
     670,   671,   672,   673,     0,     1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     690,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    50,    -1,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
      -1,    -1,   108,    -1,    49,    -1,    -1,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     136,    -1,   138,    -1,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,    -1,    -1,    -1,   123,   185,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   136,    -1,   199,    -1,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,   167,   168,   230,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,
      -1,   317,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,
     326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,
      -1,    -1,    -1,    -1,   390,    -1,    -1,   393,    -1,    -1,
      -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   478,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   452,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,   461,   523,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   545,
      -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,    -1,   654,   655,
     656,   657,   658,    -1,   660,   661,   662,   663,   664,   665,
     666,   667,   668,   669,   670,   671,   672,   673,     0,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    49,    -1,
      -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   136,    -1,   138,    -1,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
      -1,    -1,   123,   185,   186,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   136,    -1,   199,    -1,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,   167,   168,   230,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     312,    -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   323,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   323,    -1,    -1,    -1,    -1,    -1,   390,    -1,
      -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,   461,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   452,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
     461,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   545,    -1,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,    -1,   654,   655,   656,   657,   658,    -1,   660,   661,
     662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
     672,   673,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    -1,
      -1,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     0,     1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    -1,    -1,    -1,    50,    -1,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,
     138,    -1,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   136,    -1,   138,    -1,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,   323,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   461,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,    -1,   461,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     558,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   573,    -1,    -1,   576,    -1,
     505,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,    -1,   654,   655,   656,   657,
     658,    -1,   660,   661,   662,   663,   664,   665,   666,   667,
     668,   669,   670,   671,   672,   673,     0,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,    -1,    -1,
      -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    -1,    49,    50,    -1,    52,   654,
     655,   656,   657,   658,    -1,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   690,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   136,    -1,   138,    -1,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
      -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,    -1,
     654,   655,   656,   657,   658,    -1,   660,   661,   662,   663,
     664,   665,   666,   667,   668,   669,   670,   671,   672,   673,
       0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,    49,
      50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,   138,    -1,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,   199,
      -1,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,   155,   156,   157,   158,
     159,   160,   161,   223,   163,   164,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   461,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,   410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,   461,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,    -1,   654,   655,   656,   657,   658,    -1,
     660,   661,   662,   663,   664,   665,   666,   667,   668,   669,
     670,   671,   672,   673,     0,     1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     690,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    49,    50,    -1,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     136,    -1,   138,    -1,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   136,    -1,   199,    -1,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
     155,   156,   157,   158,   159,   160,   161,   223,   163,   164,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,
      -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,   410,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,   461,   523,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,    -1,   654,   655,
     656,   657,   658,    -1,   660,   661,   662,   663,   664,   665,
     666,   667,   668,   669,   670,   671,   672,   673,     0,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    -1,    49,    50,    -1,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   136,    -1,   138,    -1,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   136,    -1,   199,    -1,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,   155,   156,   157,   158,   159,   160,
     161,   223,   163,   164,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,   410,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
     461,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,    -1,   654,   655,   656,   657,   658,    -1,   660,   661,
     662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
     672,   673,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,
     138,    -1,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,
      -1,    43,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   461,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,   136,   523,   138,    -1,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,    -1,   654,   655,   656,   657,
     658,    -1,   660,   661,   662,   663,   664,   665,   666,   667,
     668,   669,   670,   671,   672,   673,    -1,   289,     0,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     312,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
      52,    -1,    -1,    -1,   136,    -1,   138,    -1,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,   170,   461,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,   136,    -1,   138,    -1,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,     0,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
      -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     312,    43,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
      52,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   654,   655,   656,   657,   658,   289,   660,   661,
     662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
     672,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,
      -1,   323,    -1,    -1,   136,    -1,   138,    -1,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,   461,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     312,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   654,   655,   656,   657,   658,    -1,   660,   661,
     662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
     672,   673,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    -1,
      -1,    -1,    50,    -1,    52,    -1,    -1,    -1,    -1,   461,
      -1,    -1,   654,   655,   656,   657,   658,    -1,   660,   661,
     662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
     672,   673,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,
     138,    -1,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
       0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    -1,    -1,    -1,
      50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,     0,
       1,    -1,   654,   655,   656,   657,   658,    -1,   660,   661,
     662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
     672,   673,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,
      -1,   289,    43,    44,    -1,    46,    -1,    -1,    -1,    50,
      -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   323,   136,    -1,   138,    -1,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   136,    -1,   138,    -1,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   186,    -1,     0,     1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    -1,   461,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,
      43,    44,    -1,    46,    -1,    -1,    -1,    50,   486,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   312,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   323,   136,    -1,   138,    -1,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   461,    -1,    -1,     0,     1,   654,   655,   656,   657,
     658,    -1,   660,   661,   662,   663,   664,   665,   666,   667,
     668,   669,   670,   671,   672,   673,   486,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   690,    -1,    -1,   505,    -1,    43,    44,    -1,
      46,    -1,    -1,    -1,    50,    -1,    52,    -1,    -1,    -1,
     461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,
      -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,
     323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     136,    -1,   138,    -1,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     186,    -1,     0,     1,   654,   655,   656,   657,   658,    -1,
     660,   661,   662,   663,   664,   665,   666,   667,   668,   669,
     670,   671,   672,   673,    -1,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     690,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    -1,
      -1,    -1,    50,    -1,    52,    -1,    -1,    -1,   461,    -1,
      -1,     0,     1,   654,   655,   656,   657,   658,    -1,   660,
     661,   662,   663,   664,   665,   666,   667,   668,   669,   670,
     671,   672,   673,   486,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,
      -1,    -1,   505,   289,    43,    44,    -1,    46,    -1,    -1,
      -1,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,   136,    -1,
     138,    -1,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,   138,
      -1,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,     0,
       1,   654,   655,   656,   657,   658,    -1,   660,   661,   662,
     663,   664,   665,   666,   667,   668,   669,   670,   671,   672,
     673,    -1,    23,    24,    -1,   461,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,    -1,
      -1,   289,    43,    44,    -1,    46,    -1,    -1,    -1,    50,
     486,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,   505,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   323,   136,    -1,   138,    -1,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   461,    -1,    -1,     0,     1,   654,   655,
     656,   657,   658,    -1,   660,   661,   662,   663,   664,   665,
     666,   667,   668,   669,   670,   671,   672,   673,   486,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   690,    -1,    -1,   505,    -1,    43,
      44,    -1,    46,    -1,    -1,    -1,    50,    -1,    52,    -1,
      -1,    -1,   461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   312,    -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,
      -1,    -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   136,    -1,   138,    -1,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   186,    -1,     0,     1,   654,   655,   656,   657,
     658,    -1,   660,   661,   662,   663,   664,   665,   666,   667,
     668,   669,   670,   671,   672,   673,    -1,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   690,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    -1,    -1,    -1,    50,    -1,    52,    -1,    -1,    -1,
     461,    -1,    -1,     0,     1,   654,   655,   656,   657,   658,
      -1,   660,   661,   662,   663,   664,   665,   666,   667,   668,
     669,   670,   671,   672,   673,   486,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   690,    -1,    -1,   505,   289,    43,    44,    -1,    46,
      -1,    -1,    -1,    50,    -1,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,
     136,    -1,   138,    -1,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,
      -1,   138,    -1,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
      -1,    -1,    -1,   654,   655,   656,   657,   658,    -1,   660,
     661,   662,   663,   664,   665,   666,   667,   668,   669,   670,
     671,   672,   673,    -1,    -1,    -1,    -1,   461,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,
      -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,
      -1,   505,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    49,   461,    -1,    52,    -1,    -1,
     654,   655,   656,   657,   658,    60,   660,   661,   662,   663,
     664,   665,   666,   667,   668,   669,   670,   671,   672,   673,
     486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,    -1,   505,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,   461,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,
      -1,   136,    -1,    -1,    -1,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   505,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   654,   655,
     656,   657,   658,    -1,   660,   661,   662,   663,   664,   665,
     666,   667,   668,   669,   670,   671,   672,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   654,   655,   656,
     657,   658,    -1,   660,   661,   662,   663,   664,   665,   666,
     667,   668,   669,   670,   671,   672,   673,    -1,   323,    -1,
      -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,    41,    42,    -1,    -1,
      -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,   384,
      -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     425,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
      -1,    -1,    -1,   198,   199,   530,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   558,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   573,    -1,
      -1,   576,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,    -1,    -1,
      -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,   663,    -1,
      -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   684,
     685,    -1,   357,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,    -1,    41,    42,    -1,
      -1,    -1,    -1,   378,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,    60,    -1,   393,    -1,
      -1,     1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   413,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     425,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   185,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
      -1,    -1,    -1,    -1,    -1,   199,   136,    -1,    -1,    -1,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   186,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,    -1,
      -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,
      -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    31,   694,
      -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    41,    42,
      -1,    -1,   312,    -1,    -1,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    -1,   323,    -1,    -1,   390,    60,    -1,   393,
      -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   413,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   425,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   461,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    31,
     694,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    41,
      42,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    60,     1,
     393,    -1,    -1,   663,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   425,    -1,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   185,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,   136,    -1,    -1,   199,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,    -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,
      31,   694,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,
      41,    42,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,   390,    60,
      -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,    -1,    -1,    -1,   520,   461,
      -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,    -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,
      -1,    31,   694,    -1,    -1,    -1,    -1,    -1,    -1,   370,
      -1,    41,    42,    -1,    -1,    -1,    -1,    -1,    -1,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
      60,   663,   393,    -1,    -1,     1,    -1,    -1,   399,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,    -1,   520,
      -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,   199,
     136,    -1,    -1,    -1,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     186,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,    -1,    -1,    -1,   326,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,    -1,   357,    -1,    -1,
      -1,    -1,    31,   694,    -1,    -1,    -1,    -1,    -1,    -1,
     370,    -1,    41,    42,    -1,    -1,   312,    -1,    -1,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,
     390,    60,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,    -1,
     520,    -1,    -1,   523,    -1,   461,    -1,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,    -1,    -1,    -1,   326,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,
      -1,    -1,    -1,    31,   694,    -1,    -1,    -1,    -1,    -1,
      -1,   370,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   390,    60,     1,   393,    -1,    -1,   663,    -1,    -1,
     399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,    -1,    -1,   136,    -1,
      -1,   199,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
      -1,    -1,    -1,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,   653,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,   694,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,
      -1,    -1,   390,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   461,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   694,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   663,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,   136,    -1,
     523,    -1,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,   694,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,   461,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      -1,    -1,   520,   136,    -1,   523,    -1,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   186,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   663,   289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,   694,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
     323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,   461,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    -1,    -1,    -1,    -1,   520,   136,    -1,
     523,    -1,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     663,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,   694,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,   461,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      -1,    -1,   520,   136,    -1,   523,    -1,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   186,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,   694,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
     323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,   461,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    -1,    -1,    -1,    -1,   520,   136,    -1,
     523,    -1,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,   694,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,   461,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,   694,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,   694,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,   694,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,   694,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,   694,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,   694,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,   694,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      48,    49,   425,    -1,    -1,    -1,    54,    -1,    -1,    -1,
      58,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   306,    -1,
      -1,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,   694,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    32,
      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,
     678,   679,   680,   681,   682,   683,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
     413,    -1,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   677,   678,   679,   680,   681,   682,
     683,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,
     678,   679,   680,   681,   682,   683,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
     413,    -1,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   677,   678,   679,   680,   681,   682,
     683,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,
     678,   679,   680,   681,   682,   683,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
     413,    -1,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   677,   678,   679,   680,   681,   682,
     683,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,
     678,   679,   680,   681,   682,   683,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
     413,    -1,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   677,   678,   679,   680,   681,   682,
     683,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    32,   413,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    -1,    -1,   425,    -1,    -1,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,    -1,    -1,    -1,    -1,
      -1,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,
     678,   679,   680,   681,   682,   683,   684,   685,   306,    -1,
      -1,    -1,    -1,    -1,    -1,   693,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    32,
      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
     413,    -1,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   677,    -1,    -1,    -1,    -1,    -1,
      -1,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   677,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   693,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
     413,    -1,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   677,    -1,    -1,    -1,    -1,    -1,
      -1,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    41,    42,    -1,    -1,    -1,    -1,    -1,    -1,    49,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,   677,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,    -1,    -1,
     370,    -1,    -1,    -1,    -1,   693,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,   413,    -1,    -1,    -1,    42,    -1,    -1,
      -1,    -1,    -1,    -1,    49,   425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   684,   685,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   693,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,    49,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   279,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   684,
     685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   693,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      -1,    -1,    -1,    -1,    49,   425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   684,   685,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   693,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,    49,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   279,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   684,
     685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   693,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    49,   425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   684,   685,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   693,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   279,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   684,
     685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   693,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   223,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,    31,   357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,    -1,   693,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   523,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,
      -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    49,   520,    -1,    -1,   523,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,    -1,    -1,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   183,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   690,    -1,    -1,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,
      -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,   523,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   684,   685,    -1,
     223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   438,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    -1,    -1,
      -1,    -1,    -1,    -1,    49,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,   684,
     685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,   390,
      -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,   523,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,    -1,   326,    -1,   328,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   684,   685,   357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   684,   685,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    42,    -1,    -1,    -1,    -1,    -1,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,    -1,    -1,   326,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,   357,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,
     399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   684,   685,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,    -1,   325,
     326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   684,
     685,   357,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    -1,    -1,    -1,   393,    -1,    -1,
      -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,    -1,    -1,   326,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   684,   685,
     357,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,   393,    -1,    -1,    -1,
      -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   540,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,    -1,   325,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   684,   685,   357,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,    -1,    -1,   326,    -1,    -1,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   684,   685,   357,    60,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,
     399,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   223,    -1,   523,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,     1,    -1,   357,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    31,   684,   685,    -1,    -1,    -1,
      -1,    -1,   393,    -1,    -1,    42,    -1,    -1,   399,    -1,
      -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   684,   685,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
     357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,
      -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,   523,   199,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,
      -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   328,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   357,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    -1,
      -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,
      -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   423,    -1,   425,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,   470,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   185,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   523,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   571,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,    60,    -1,   393,
      -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   413,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   425,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
      -1,    -1,    -1,   326,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
     413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   221,   520,   223,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,    -1,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,   470,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   571,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   199,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   366,    -1,    -1,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    49,   425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   326,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   223,    -1,   523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,    31,
     357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,
      -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,   523,   199,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   540,    -1,    -1,    -1,    -1,    -1,   221,
      -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   559,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   423,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,   223,
      -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,    31,   357,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
      -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,
      -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
     199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,
     399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,   653,   326,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
      -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   425,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,   520,
      -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    -1,    -1,    -1,
      -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    -1,    -1,   390,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   508,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   357,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,    -1,    -1,   393,    -1,    -1,
      -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,   520,    -1,    -1,   523,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      -1,    -1,   390,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   326,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   357,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,   390,
      -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,   523,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   326,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,   393,
      -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   413,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   223,   520,    -1,    -1,   523,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   357,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,   199,   527,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   576,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,   520,
      -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   554,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   410,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   357,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,   523,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   326,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
      -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   453,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   223,   520,    -1,    -1,   523,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   357,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,   520,
      -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   357,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   185,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   223,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   357,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   523,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   326,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,   399,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   223,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   357,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   523,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   223,   520,    -1,    -1,   523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   357,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,
     399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,    -1,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,   520,    -1,
      -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   357,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,
      -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,
     399,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     223,   520,    -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,   357,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     326,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,
      -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   223,   520,    -1,    -1,   523,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   357,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,   399,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   179,    -1,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   195,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     206,    -1,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,
     216,    -1,    -1,   219,    -1,    -1,    -1,   223,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,   244,    -1,
      -1,    -1,    -1,    -1,    -1,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,    -1,   262,   263,    -1,    -1,
     266,    -1,   268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,    -1,    -1,   324,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   334,   335,
      -1,   337,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   350,   351,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,   382,    -1,    -1,    -1,
      -1,   387,   388,   389,    -1,   391,    -1,    -1,   394,   395,
     396,   397,   398,    -1,   400,    -1,   402,    -1,    -1,    -1,
      -1,   407,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   417,   418,   419,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   428,    -1,   430,   431,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   442,    -1,    -1,    -1,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   458,   459,   460,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   472,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,    -1,   509,    -1,    -1,    -1,   513,    -1,    -1,
      -1,   517,   518,    -1,    -1,   521,   522,    -1,    -1,    -1,
      -1,    -1,   528,    -1,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   547,    -1,    -1,    -1,    -1,    -1,   553,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,    -1,    -1,   581
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,   123,   697,   698,   699,   701,   702,   703,   704,   124,
     125,   484,   521,     0,    14,    15,   956,   957,   427,   709,
       3,   452,   705,   704,    31,    31,    31,    31,    31,    42,
     108,   199,   223,   357,   393,   399,   425,   467,   520,   523,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   690,   725,  1019,  1020,   690,   725,   699,     1,   690,
     156,   274,   584,   598,   603,   604,   614,   710,   711,   712,
     714,   715,   716,   718,   719,   720,     4,   729,   690,   690,
     706,   576,   221,   185,   383,   496,   577,   722,   723,   493,
     361,  1324,  1324,   274,   717,   717,   635,   690,   711,   690,
       6,   808,   326,   705,   708,   725,    31,    31,    56,   721,
     723,   401,  1328,   408,   515,   640,   641,   713,   233,  1324,
    1324,  1324,   730,   809,   700,   690,   203,   707,   540,  1342,
    1324,   609,   610,   591,   597,   609,   610,   623,   624,   631,
     647,   926,     8,   102,   103,   107,   109,   113,   114,   116,
     117,   121,   246,   731,   732,  1345,  1346,  1347,  1356,  1359,
    1362,     7,     9,    10,    11,   496,   810,   811,     5,   897,
      31,    42,   726,  1324,    41,    42,   213,   336,   390,   724,
     588,   625,   645,   646,   925,   926,   690,    31,    42,    42,
    1360,  1361,    91,    92,  1357,  1358,   690,   732,   690,   690,
     690,   690,    56,   811,    18,   564,   690,   899,   707,   706,
     243,   345,   467,   727,   728,    60,   169,   308,   360,   733,
     734,   739,   740,  1361,  1358,    12,   482,   511,   512,   774,
     775,   812,   815,   814,   813,   690,  1016,  1017,  1019,   221,
     426,   900,   901,  1312,  1332,   898,   690,   726,  1324,   453,
     728,  1333,  1332,   690,   690,   734,   740,   690,   690,   690,
     690,   775,   307,   497,   816,   817,   820,     1,    26,    27,
      28,    29,   843,   844,   845,   859,   860,   863,   865,  1345,
     843,   843,   340,   421,  1018,    18,   901,   248,   470,   571,
    1011,  1012,  1013,  1016,   273,   903,   903,   690,   455,    31,
     739,   199,   495,   735,   736,    31,   232,   326,   349,   453,
     454,   776,   777,   778,   781,   782,   785,   786,    31,    31,
      59,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,   187,   232,   256,   272,   378,   524,   789,   790,   791,
     795,   796,   802,    31,    31,   817,   218,   235,   259,   365,
     376,   464,   465,   479,   481,   571,   690,   821,   822,   823,
     826,   833,   838,   842,  1324,  1019,    31,    31,    31,   845,
     104,   197,   210,   217,   414,   420,   443,   468,   495,   506,
     525,   551,   563,   571,   574,   846,   866,   867,   868,   877,
     878,   879,   880,   881,   882,   883,   884,   885,   886,   887,
     888,   889,   890,   891,   894,   895,   896,  1324,  1343,   690,
     476,  1019,  1016,     1,  1332,    41,    42,    60,   336,   390,
     413,   457,   902,  1011,  1094,  1095,   392,  1014,  1043,   690,
       1,    31,    49,    52,   136,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   154,   155,
     156,   157,   158,   159,   160,   161,   163,   164,   165,   166,
     167,   168,   170,   172,   173,   174,   175,   176,   177,   186,
     289,   323,   461,   486,   505,   699,   905,   906,   907,   908,
     909,   910,   912,   913,   918,   919,   920,   932,   935,   936,
     937,   944,   946,   947,   949,   950,   951,   958,   959,   964,
     983,   984,   985,   991,   992,  1021,  1024,  1025,  1026,  1038,
    1041,  1049,  1054,  1061,  1067,  1097,  1098,  1099,  1107,  1108,
    1109,  1120,  1121,  1131,  1132,  1133,  1136,  1137,  1140,  1141,
    1142,  1145,  1150,  1157,  1158,  1167,  1176,  1177,  1178,  1188,
    1189,  1190,  1191,  1203,  1226,  1235,  1236,  1237,  1241,  1251,
    1253,  1258,  1259,  1262,  1263,  1264,  1274,  1276,  1277,   905,
     690,   180,   194,   207,   236,   309,   364,   385,   432,   437,
     464,   484,   504,   690,   743,   744,   745,   747,   751,   752,
     753,   754,   755,   760,   761,   762,   763,   766,   767,   768,
     769,   771,  1314,  1319,   242,   170,   171,   464,   738,  1335,
     690,   736,   236,   453,   502,   788,    31,    31,   185,   783,
     784,    31,    31,    31,   690,   777,   576,   787,  1344,  1324,
     422,   424,   803,  1324,    31,    31,   506,  1336,  1324,    31,
     230,  1313,   690,   791,  1324,   247,  1315,  1324,   464,   466,
     827,   827,  1324,  1315,  1324,  1328,   421,   818,   690,   822,
     298,   329,   571,   414,   571,  1321,  1324,   369,    60,   178,
      49,   554,   847,   848,   849,   850,  1016,    20,    21,    34,
      35,    36,   692,   869,   870,   871,   876,    31,   203,  1324,
     368,   492,  1342,   361,  1324,     1,   185,  1308,   867,   367,
     545,   892,    17,   298,   329,   552,    51,    55,   149,   342,
     436,  1016,  1011,    49,    60,   185,   279,   326,   370,   653,
     684,   685,   693,   978,   979,   980,   981,   982,  1011,  1035,
    1044,  1048,  1286,  1287,   392,  1014,   904,    56,  1040,  1011,
     253,   370,   684,   685,   922,  1011,  1033,  1034,  1047,  1048,
    1286,  1254,    42,  1011,  1239,  1242,  1242,  1252,  1055,   939,
    1011,  1032,   184,    31,  1134,  1199,    42,    49,    99,   100,
     101,   185,   370,   653,   864,  1011,  1094,  1102,  1103,  1104,
    1105,  1106,  1286,   953,   954,   955,  1034,   960,    18,   462,
     961,   963,  1344,    49,  1017,  1260,  1261,     1,  1011,  1022,
    1023,  1106,    53,  1202,  1146,   253,  1011,  1286,  1308,    42,
    1028,  1034,  1050,    31,  1110,    31,  1193,  1194,  1199,    31,
     309,  1123,  1124,  1138,   185,  1016,  1160,  1161,    32,   290,
     366,   370,   653,   929,   930,   931,  1011,  1147,  1149,  1151,
      45,  1012,    42,  1011,  1094,  1266,  1267,  1268,  1269,  1286,
      42,    49,   494,   253,  1033,  1101,  1144,  1199,    42,  1011,
    1278,  1279,  1286,  1122,  1123,   978,  1011,    42,   653,   965,
     966,  1011,    23,    31,   410,  1261,     0,    16,   906,   907,
    1038,   690,     0,   690,   909,    23,   654,   911,   914,   915,
     325,   655,   921,   921,   657,   938,   938,   411,   659,   945,
     560,   660,   952,   952,   673,   990,    58,   185,   677,   693,
     931,   967,   968,   969,   970,   971,   972,   974,   976,   977,
     978,   986,  1308,   306,   548,   969,   978,   993,   994,   995,
    1010,   662,  1027,  1027,    49,   558,   573,  1017,  1034,  1062,
    1063,  1064,  1065,  1066,  1068,  1069,  1071,  1072,  1073,  1089,
    1090,  1261,  1344,   670,  1100,  1100,   658,  1135,  1135,   668,
    1143,  1143,   667,  1159,  1159,   665,  1192,  1192,   656,  1238,
    1238,   669,  1265,  1265,   671,  1275,  1275,  1328,  1335,   564,
    1342,  1324,  1328,  1324,   229,   764,   276,   364,  1325,    49,
    1344,   690,   744,   343,   373,   471,   503,   502,   519,   424,
    1331,   201,   737,   737,   502,   236,   502,  1324,   690,   203,
     779,   357,   357,   784,   779,   779,   779,   690,   271,    31,
     519,  1338,  1338,    31,  1324,  1324,  1324,   239,  1324,    31,
      49,   793,    31,    49,   824,    31,  1016,  1182,    31,   423,
     515,   831,   832,  1035,   824,   573,   834,  1324,    31,   828,
     829,   844,   819,   203,  1310,  1324,   168,   178,   540,   805,
     806,   807,  1308,   325,  1310,   329,    60,   539,  1340,   204,
     278,   343,   851,   852,   853,   856,   540,  1340,   851,   856,
     277,   856,   693,   875,   870,    37,    39,    40,   872,  1016,
      31,  1015,  1015,    42,    49,   684,   685,   693,  1036,  1037,
    1094,   501,   893,   520,  1339,   408,  1329,   540,  1329,  1329,
    1344,   674,   421,  1016,   421,   981,   982,   978,   695,   684,
     685,   686,   687,   688,   694,   978,    13,    31,    97,    98,
     179,   181,   195,   206,   209,   211,   215,   216,   219,   223,
     227,   228,   238,   244,   251,   254,   258,   262,   263,   266,
     268,   285,   295,   296,   299,   300,   301,   302,   303,   304,
     305,   313,   318,   319,   320,   321,   324,   334,   335,   337,
     350,   351,   352,   353,   354,   355,   369,   379,   380,   381,
     382,   387,   388,   389,   391,   394,   395,   396,   397,   398,
     400,   402,   407,   417,   418,   419,   428,   430,   431,   442,
     446,   458,   459,   460,   472,   487,   498,   499,   506,   507,
     509,   513,   517,   518,   521,   522,   528,   531,   532,   533,
     534,   535,   536,   547,   553,   561,   562,   565,   566,   568,
     569,   570,   572,   575,   581,  1288,  1289,  1297,  1298,  1300,
    1301,  1302,  1303,  1304,  1305,  1306,  1307,   978,   905,     1,
     690,  1039,  1033,  1016,  1048,  1048,    24,  1029,  1030,   328,
     540,  1034,  1255,  1256,  1261,    23,    50,  1249,  1250,    18,
     328,   564,  1240,  1242,    31,  1056,  1057,  1029,   493,   923,
     940,  1011,   978,    46,  1128,  1129,  1335,  1104,  1016,   421,
     691,  1103,  1029,   473,   473,   221,   356,    52,    56,   162,
     453,   962,  1042,  1338,     1,    23,   366,    22,   627,   277,
    1261,   137,   185,   188,   191,   192,   269,   288,   405,   406,
     415,   416,  1023,  1227,  1228,  1229,  1230,  1231,  1341,  1344,
    1011,  1201,  1286,  1199,  1011,   540,   540,   864,  1047,  1095,
    1029,   221,   297,   347,   359,   435,  1051,  1052,  1053,   410,
     464,   630,  1111,    43,   664,  1113,  1114,  1128,   325,    43,
    1195,  1196,  1197,   356,   464,  1018,  1199,  1335,   325,   666,
    1128,  1139,  1016,  1168,   573,  1162,   178,  1163,  1164,  1165,
     208,  1311,    42,   916,  1011,    23,  1011,   421,  1330,   540,
     931,  1014,  1043,   282,   540,   559,  1149,    58,  1152,  1153,
    1154,  1155,  1179,  1180,  1331,  1179,  1183,  1344,    50,  1272,
    1273,   356,  1268,  1271,   275,   961,  1033,   325,  1029,  1128,
     314,   364,   366,  1272,   275,  1280,    44,   672,  1116,  1117,
    1128,   184,   212,  1125,   230,   613,   933,   564,   421,   966,
      31,   642,   725,   690,   911,   915,   908,    31,   240,   241,
     260,   265,   267,   290,   538,   796,   917,   183,    31,   796,
     948,    60,   677,   693,   967,   976,   970,   978,  1341,   675,
     676,   693,   976,   978,   678,   679,   680,   681,   682,   683,
    1031,    48,    54,    60,    96,   677,   927,   928,  1324,   410,
     908,   987,   989,    42,   413,  1095,   178,   193,   996,   998,
     999,  1000,  1001,  1002,  1070,  1034,   539,  1034,  1066,  1068,
    1344,  1071,  1072,  1344,  1071,  1071,   663,   908,  1069,  1090,
     184,  1091,  1092,   674,   384,   530,  1324,  1325,  1016,   298,
     741,   742,   796,  1016,  1324,  1324,  1324,  1324,   201,   202,
     770,   163,   185,   411,   772,   503,    31,   191,   405,  1324,
    1182,   317,  1060,  1060,  1324,   502,  1324,    31,    42,   602,
     780,   780,   401,  1324,  1324,   803,     1,    42,    49,    57,
     193,   286,   408,   797,   798,   799,   801,   805,    42,    31,
      42,   792,   200,   794,  1324,   540,   230,   466,   825,  1016,
     832,   373,   374,   839,   840,  1327,  1313,    49,   230,   325,
     340,   508,   540,   835,   836,   277,   837,    31,  1324,   829,
     844,    42,   223,   369,   370,   861,   862,   864,  1010,  1036,
     540,   168,   540,   806,   306,    42,    49,  1094,    31,   861,
     864,  1312,   852,   856,  1325,   848,   850,   856,  1331,    31,
      49,    38,   873,   874,   873,   874,  1036,  1036,  1036,   684,
     685,   686,   687,   229,     1,   411,  1016,  1011,   392,  1043,
    1011,   694,   694,   978,   980,   980,   981,   981,   982,   693,
     693,   693,   693,   693,   693,   693,   693,  1199,   693,   693,
     693,   693,   693,   693,   693,   693,   693,   693,   693,   693,
     693,   693,   693,   693,   978,   693,   693,   693,   693,   693,
     693,   693,   693,  1014,   693,   693,   693,   693,   693,   693,
     693,   693,    43,   122,  1348,   540,  1043,  1030,   908,  1032,
    1011,  1032,  1034,  1256,   540,  1257,  1250,   908,   423,   653,
    1011,  1243,  1244,  1245,  1248,  1312,  1011,   469,   555,  1058,
    1059,  1344,  1057,   401,   924,   291,   680,   941,   923,   636,
    1325,  1129,  1043,  1011,    42,  1011,  1011,  1034,  1032,  1034,
     963,    49,  1011,    25,  1042,  1042,  1331,  1344,  1342,  1341,
     478,  1342,   153,   252,   478,   527,  1179,   540,  1022,  1022,
     540,   540,   540,  1032,  1034,  1047,  1052,  1198,  1199,   464,
     464,   356,  1112,  1115,   664,  1114,   664,  1011,  1196,   908,
    1011,  1199,    42,   830,  1011,  1094,  1224,  1286,  1139,   178,
    1169,  1170,  1311,  1016,  1164,   969,  1166,    43,   540,   540,
     540,  1011,  1010,  1014,   221,   289,   413,   653,  1047,  1095,
    1148,  1149,   221,  1153,   540,  1155,  1180,  1183,   204,   278,
    1181,  1183,  1184,  1314,   283,  1273,   908,  1011,  1312,   325,
    1032,  1034,  1031,  1312,   356,  1118,   672,  1117,   672,   183,
     438,   796,  1011,  1047,  1126,  1127,   933,    18,   934,  1243,
    1011,   690,   908,   693,   583,   582,   916,   945,   970,   694,
     970,   975,   976,  1031,   970,   975,   693,   973,   975,   976,
     978,    30,   423,   188,   189,   190,   269,   363,   415,  1096,
      30,   423,   139,   138,     1,  1003,   994,   661,  1009,   178,
     999,   410,   908,  1002,   969,   325,   539,   908,   663,  1074,
    1091,  1034,  1092,  1261,   184,   212,   284,   458,   503,   746,
    1324,    42,  1011,   564,   393,   464,   587,   757,    31,    42,
      49,   765,    57,  1016,   425,   433,   773,   773,  1324,  1324,
    1016,  1198,  1198,    31,  1324,    31,    31,    31,    31,   800,
     801,  1095,   799,   674,  1344,    49,    49,    49,   840,  1327,
    1311,  1344,   540,  1313,    49,   508,    49,   836,  1331,   830,
    1330,  1330,  1330,   540,  1324,   674,   674,   674,   857,   858,
    1019,  1324,  1340,   277,  1016,   694,   694,    38,   872,   694,
    1036,  1036,  1036,  1036,   506,   978,   694,  1103,    42,   978,
    1045,  1046,  1103,   978,   978,  1103,   978,   978,  1103,   101,
      99,     1,   101,   100,  1103,    99,   101,  1013,  1105,  1103,
    1103,  1103,  1103,   205,   257,   409,   514,   542,  1290,  1103,
     830,  1044,   694,   100,   101,  1103,  1103,    99,   100,   101,
    1103,     1,   978,   830,   978,   830,   978,   978,   978,   978,
    1103,  1103,  1045,   273,   271,   287,   329,  1322,  1349,  1350,
    1353,   706,  1032,   908,   328,   450,  1261,   908,   421,   203,
    1240,  1244,   248,   470,   571,   576,  1060,   385,   411,  1324,
     943,   942,  1130,   328,   328,  1011,   153,   571,  1342,  1230,
    1232,  1233,   274,  1227,   830,   185,   230,   314,   367,   545,
    1215,  1216,  1217,  1223,  1204,  1205,  1184,  1011,  1022,  1022,
    1022,   328,  1199,  1011,   364,  1119,   908,  1171,  1170,    43,
     410,   908,  1172,   908,   830,   422,  1011,  1034,    42,  1011,
    1330,  1034,   422,   424,  1156,  1184,  1325,  1184,   502,   340,
    1316,   908,  1344,    42,   508,  1011,  1094,  1270,  1032,   328,
    1016,  1281,  1282,  1308,  1011,  1283,  1284,  1285,   908,  1127,
    1327,  1327,    18,  1011,   978,   694,   976,   973,   675,   676,
     694,   988,    48,    54,   197,   693,   969,   976,  1004,  1005,
    1006,  1007,  1010,  1031,   433,   139,  1034,   178,  1076,  1077,
     325,  1016,  1016,   756,  1344,   510,   748,    31,    31,  1016,
      31,   564,   424,   422,   801,   444,   804,   220,   541,   841,
     316,    49,   540,  1313,  1313,    31,  1016,  1016,  1016,    42,
      49,  1094,  1308,  1308,  1308,   858,   854,   855,  1016,  1331,
     694,  1103,   694,  1046,  1103,   694,   694,   191,   196,   197,
     333,   404,   405,  1291,  1293,   694,   978,   694,   978,   366,
    1326,   694,   978,   694,   978,   978,   694,  1103,  1103,   694,
     694,  1103,   694,  1103,   694,  1103,   694,  1103,   694,   378,
    1103,  1294,   694,   694,  1103,  1103,  1103,   198,  1295,  1296,
    1309,  1103,  1103,  1103,  1294,   694,   367,   545,  1299,   978,
     694,   978,   694,   694,   978,   694,   978,   694,  1103,   694,
     690,  1331,    31,   184,   515,  1350,    22,    23,  1354,  1032,
     540,  1248,   315,  1011,    42,   423,   978,  1246,  1245,   370,
     653,   902,  1036,  1247,   411,   475,   489,   925,   978,   978,
     908,  1032,  1032,  1228,   274,   259,  1317,  1233,   540,   221,
    1217,   830,  1218,  1219,   478,  1206,    33,  1207,  1212,  1213,
    1214,   564,  1032,  1047,  1324,   931,  1011,  1173,  1174,   908,
     139,   326,   453,     1,   347,   564,  1185,  1182,  1324,   429,
    1334,    55,  1032,  1344,   675,  1269,   255,   276,   527,  1285,
    1344,  1011,   694,   694,   693,   975,   693,   975,   989,   976,
    1007,   138,   674,   193,   675,   676,   976,   997,   221,  1093,
      23,    25,  1079,  1080,  1081,  1082,   178,  1077,  1083,  1034,
     748,   386,  1324,    31,  1338,  1338,   523,  1035,  1311,  1313,
      49,    42,    49,    42,    49,   855,  1016,   694,  1103,   222,
    1292,  1293,   694,   978,   694,   978,   175,  1337,   694,   978,
     694,   978,   694,   694,   694,  1103,   694,   694,   694,    31,
    1309,   694,   694,   694,  1103,   694,  1296,   314,   366,  1320,
     694,   694,   694,  1309,   694,   978,   694,   978,   694,   694,
     694,   185,  1260,   309,  1351,   515,   448,  1355,   369,  1011,
     421,   489,   221,  1308,   830,   221,  1219,  1215,  1207,   317,
    1043,  1018,  1198,  1016,   680,   676,  1172,  1169,  1019,    42,
    1019,   448,  1198,   328,   435,  1186,  1019,  1011,   369,  1282,
    1316,  1316,  1316,    55,   975,   975,   694,   976,  1005,   693,
     976,  1008,  1031,   693,  1008,   908,  1034,  1069,   297,   347,
     359,   435,  1198,  1352,  1078,  1081,   309,   433,   178,  1085,
    1093,   750,  1344,   399,   758,   749,  1016,  1324,  1324,    42,
    1035,  1313,   694,   694,   333,   694,   694,   184,  1309,   694,
     978,   694,   694,   694,   694,  1103,  1103,   694,   694,   694,
     449,  1198,  1331,  1011,    49,   830,  1234,   830,   184,   212,
    1220,  1221,  1222,  1225,   830,   185,   230,   367,   545,  1208,
    1209,    33,  1186,    42,   978,  1175,  1174,  1324,  1198,   448,
     978,  1011,  1011,  1011,  1011,   694,   694,  1008,   976,  1008,
     908,  1198,  1084,   243,  1075,  1069,   283,   464,   466,   759,
    1016,    31,    31,  1103,   694,   694,   694,  1103,  1198,  1352,
    1220,  1222,   345,  1323,  1220,   830,  1210,  1211,  1220,  1210,
    1210,  1209,    31,  1187,  1200,  1324,   255,   527,   694,   694,
      23,  1318,  1086,   312,  1087,   830,  1220,  1211,  1011,   674,
    1187,  1316,  1316,   908,  1318,  1088,   663,  1200,  1011,  1011,
     908,  1318,   908
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   696,   697,   697,   698,   698,   700,   699,   701,   701,
     701,   702,   702,   703,   703,   704,   704,   704,   704,   705,
     706,   706,   707,   707,   708,   708,   709,   709,   709,   710,
     710,   711,   711,   711,   711,   711,   711,   711,   712,   713,
     713,   713,   713,   714,   715,   716,   716,   717,   717,   718,
     718,   718,   718,   719,   720,   721,   721,   722,   722,   722,
     723,   723,   723,   724,   724,   724,   724,   724,   725,   725,
     726,   726,   727,   727,   728,   728,   728,   729,   729,   730,
     729,   731,   731,   732,   732,   732,   732,   732,   732,   733,
     733,   734,   734,   734,   734,   735,   735,   736,   736,   736,
     737,   737,   738,   738,   739,   739,   740,   740,   741,   741,
     742,   742,   743,   743,   744,   744,   744,   744,   744,   744,
     744,   744,   744,   744,   744,   744,   744,   745,   746,   746,
     746,   747,   748,   748,   749,   749,   750,   750,   751,   751,
     751,   751,   752,   753,   753,   753,   754,   754,   755,   756,
     756,   757,   757,   757,   758,   758,   759,   759,   760,   761,
     761,   762,   762,   762,   762,   763,   764,   764,   765,   765,
     765,   766,   767,   768,   769,   770,   770,   770,   771,   772,
     772,   772,   773,   773,   774,   774,   775,   775,   775,   775,
     775,   775,   776,   776,   777,   777,   777,   777,   777,   778,
     779,   779,   780,   780,   781,   782,   782,   782,   783,   783,
     784,   785,   786,   787,   787,   788,   788,   788,   788,   788,
     789,   790,   790,   791,   791,   791,   791,   791,   791,   791,
     791,   792,   792,   793,   793,   794,   794,   795,   795,   796,
     796,   796,   796,   796,   796,   796,   796,   796,   796,   796,
     796,   796,   796,   796,   796,   796,   796,   796,   796,   796,
     796,   796,   796,   796,   796,   796,   796,   796,   796,   797,
     797,   797,   797,   797,   798,   798,   799,   799,   799,   800,
     800,   801,   801,   802,   802,   802,   803,   803,   803,   803,
     804,   804,   805,   805,   806,   806,   806,   806,   806,   806,
     806,   806,   806,   806,   807,   807,   807,   807,   807,   807,
     807,   807,   808,   808,   809,   808,   810,   810,   811,   812,
     811,   813,   811,   814,   811,   815,   811,   811,   816,   816,
     818,   817,   819,   817,   820,   820,   821,   821,   822,   822,
     822,   822,   822,   822,   822,   822,   822,   822,   822,   822,
     823,   824,   824,   825,   825,   825,   826,   826,   826,   827,
     827,   828,   828,   829,   830,   830,   831,   831,   832,   833,
     833,   834,   834,   834,   834,   835,   835,   835,   836,   836,
     836,   836,   836,   836,   837,   837,   838,   838,   839,   839,
     840,   840,   841,   841,   842,   842,   843,   843,   844,   844,
     845,   845,   846,   846,   846,   846,   846,   847,   848,   849,
     849,   850,   850,   851,   851,   852,   853,   853,   854,   854,
     855,   856,   856,   857,   857,   858,   859,   859,   860,   860,
     861,   861,   861,   861,   862,   862,   862,   863,   863,   863,
     863,   863,   863,   863,   863,   863,   863,   864,   864,   865,
     866,   866,   867,   867,   867,   867,   867,   867,   867,   867,
     867,   867,   867,   867,   867,   867,   867,   867,   867,   868,
     868,   868,   868,   868,   868,   869,   869,   870,   871,   871,
     872,   872,   873,   873,   874,   874,   875,   875,   875,   876,
     876,   876,   877,   878,   878,   878,   878,   878,   878,   878,
     879,   879,   879,   879,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   887,   888,   888,   888,   889,   890,   891,
     891,   892,   892,   893,   893,   893,   894,   894,   895,   896,
     897,   898,   897,   897,   897,   899,   899,   899,   900,   900,
     901,   901,   901,   901,   902,   902,   902,   903,   904,   903,
     905,   905,   905,   905,   905,   905,   906,   906,   907,   907,
     907,   907,   908,   908,   909,   909,   909,   909,   909,   909,
     909,   909,   909,   909,   909,   909,   909,   909,   909,   909,
     909,   909,   909,   909,   909,   909,   909,   909,   909,   909,
     909,   909,   909,   909,   909,   909,   909,   909,   909,   909,
     909,   909,   909,   909,   909,   910,   910,   911,   911,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   913,   914,   914,   915,   916,   916,   917,   917,   918,
     918,   919,   920,   921,   921,   922,   922,   922,   922,   923,
     923,   923,   924,   925,   925,   925,   925,   925,   926,   926,
     926,   926,   927,   927,   928,   928,   928,   929,   929,   930,
     931,   931,   931,   931,   932,   932,   933,   933,   934,   934,
     935,   935,   936,   937,   938,   938,   940,   939,   942,   941,
     943,   941,   944,   944,   945,   945,   946,   946,   947,   948,
     948,   949,   949,   950,   951,   952,   952,   953,   953,   953,
     953,   953,   954,   955,   956,   956,   957,   957,   957,   957,
     958,   958,   959,   959,   960,   959,   959,   961,   961,   961,
     961,   962,   962,   962,   962,   962,   963,   963,   963,   964,
     965,   965,   966,   966,   967,   967,   967,   967,   967,   967,
     967,   967,   968,   969,   970,   970,   970,   970,   970,   971,
     971,   971,   971,   971,   972,   972,   973,   973,   973,   973,
     973,   973,   974,   975,   975,   976,   977,   977,   977,   977,
     977,   977,   978,   979,   979,   979,   980,   980,   980,   981,
     981,   981,   981,   982,   982,   983,   984,   985,   986,   987,
     988,   987,   989,   989,   990,   990,   991,   992,   993,   993,
     994,   995,   995,   995,   996,   997,   996,   998,   998,   999,
     999,  1000,  1001,  1001,  1003,  1002,  1002,  1004,  1004,  1005,
    1005,  1005,  1005,  1005,  1005,  1005,  1006,  1006,  1007,  1007,
    1007,  1007,  1007,  1007,  1007,  1008,  1008,  1009,  1009,  1010,
    1010,  1011,  1012,  1013,  1013,  1013,  1013,  1014,  1014,  1015,
    1016,  1017,  1017,  1018,  1018,  1019,  1019,  1020,  1020,  1020,
    1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,
    1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,
    1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,
    1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,
    1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,
    1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,
    1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,
    1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1021,  1021,
    1021,  1021,  1021,  1021,  1022,  1022,  1023,  1023,  1023,  1024,
    1024,  1025,  1026,  1027,  1027,  1028,  1028,  1028,  1028,  1028,
    1029,  1029,  1030,  1031,  1031,  1031,  1031,  1031,  1031,  1032,
    1032,  1033,  1033,  1034,  1034,  1034,  1035,  1035,  1035,  1035,
    1035,  1035,  1035,  1036,  1036,  1036,  1036,  1036,  1036,  1036,
    1036,  1037,  1038,  1039,  1038,  1040,  1040,  1041,  1041,  1041,
    1042,  1042,  1042,  1043,  1044,  1044,  1044,  1045,  1045,  1046,
    1046,  1047,  1047,  1047,  1047,  1047,  1048,  1048,  1050,  1049,
    1051,  1051,  1052,  1053,  1053,  1053,  1053,  1055,  1054,  1056,
    1056,  1057,  1058,  1058,  1058,  1058,  1058,  1058,  1059,  1059,
    1060,  1060,  1061,  1061,  1061,  1062,  1062,  1062,  1062,  1063,
    1063,  1063,  1063,  1064,  1064,  1065,  1066,  1066,  1066,  1066,
    1067,  1068,  1068,  1070,  1069,  1071,  1071,  1072,  1072,  1074,
    1075,  1073,  1076,  1076,  1078,  1077,  1079,  1079,  1079,  1079,
    1080,  1080,  1081,  1082,  1083,  1084,  1083,  1085,  1086,  1085,
    1087,  1088,  1087,  1089,  1089,  1090,  1091,  1091,  1092,  1093,
    1093,  1094,  1094,  1094,  1095,  1095,  1095,  1095,  1096,  1096,
    1096,  1096,  1096,  1096,  1097,  1097,  1098,  1099,  1100,  1100,
    1101,  1101,  1101,  1102,  1102,  1103,  1103,  1104,  1104,  1105,
    1105,  1105,  1105,  1105,  1105,  1106,  1106,  1106,  1106,  1106,
    1107,  1107,  1108,  1109,  1109,  1109,  1109,  1109,  1109,  1110,
    1111,  1111,  1111,  1111,  1111,  1111,  1112,  1112,  1113,  1113,
    1115,  1114,  1116,  1116,  1118,  1117,  1119,  1119,  1120,  1121,
    1121,  1121,  1121,  1121,  1121,  1122,  1122,  1123,  1123,  1124,
    1124,  1124,  1125,  1125,  1126,  1126,  1127,  1127,  1127,  1127,
    1128,  1128,  1130,  1129,  1131,  1131,  1132,  1133,  1134,  1135,
    1135,  1136,  1137,  1137,  1138,  1139,  1139,  1140,  1140,  1141,
    1142,  1143,  1143,  1144,  1144,  1144,  1144,  1144,  1146,  1145,
    1147,  1147,  1148,  1148,  1148,  1148,  1148,  1149,  1149,  1150,
    1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,
    1151,  1150,  1152,  1152,  1153,  1154,  1154,  1155,  1156,  1156,
    1157,  1157,  1158,  1159,  1159,  1160,  1160,  1161,  1162,  1162,
    1163,  1163,  1164,  1165,  1166,  1167,  1167,  1168,  1169,  1169,
    1171,  1170,  1172,  1172,  1173,  1173,  1174,  1174,  1175,  1175,
    1176,  1176,  1177,  1177,  1178,  1178,  1179,  1179,  1180,  1180,
    1181,  1181,  1182,  1182,  1183,  1183,  1184,  1184,  1185,  1185,
    1186,  1186,  1187,  1187,  1188,  1188,  1189,  1189,  1190,  1191,
    1192,  1192,  1193,  1193,  1194,  1194,  1195,  1195,  1196,  1197,
    1198,  1198,  1199,  1200,  1201,  1201,  1202,  1202,  1203,  1203,
    1203,  1203,  1205,  1204,  1206,  1204,  1207,  1208,  1208,  1209,
    1209,  1209,  1209,  1209,  1210,  1210,  1211,  1212,  1212,  1212,
    1213,  1214,  1214,  1215,  1216,  1216,  1217,  1217,  1218,  1218,
    1219,  1220,  1220,  1221,  1221,  1222,  1223,  1223,  1223,  1223,
    1224,  1224,  1224,  1225,  1225,  1226,  1226,  1226,  1226,  1226,
    1227,  1227,  1227,  1227,  1228,  1228,  1228,  1229,  1229,  1230,
    1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,  1231,  1232,
    1232,  1233,  1234,  1234,  1235,  1235,  1236,  1237,  1238,  1238,
    1239,  1239,  1239,  1239,  1240,  1240,  1241,  1241,  1242,  1242,
    1243,  1243,  1244,  1244,  1244,  1244,  1245,  1245,  1245,  1246,
    1246,  1246,  1247,  1247,  1247,  1247,  1248,  1248,  1249,  1249,
    1250,  1250,  1251,  1252,  1252,  1254,  1253,  1255,  1255,  1256,
    1257,  1257,  1258,  1258,  1258,  1259,  1259,  1260,  1260,  1261,
    1261,  1262,  1262,  1263,  1264,  1265,  1265,  1266,  1267,  1267,
    1268,  1268,  1269,  1269,  1269,  1269,  1270,  1270,  1270,  1270,
    1271,  1271,  1272,  1272,  1273,  1274,  1274,  1275,  1275,  1276,
    1277,  1278,  1279,  1279,  1279,  1280,  1280,  1281,  1281,  1282,
    1283,  1283,  1283,  1283,  1284,  1284,  1285,  1285,  1285,  1285,
    1286,  1286,  1286,  1287,  1287,  1288,  1288,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1290,  1290,  1290,  1290,
    1290,  1291,  1291,  1291,  1292,  1292,  1293,  1293,  1293,  1293,
    1294,  1294,  1294,  1295,  1295,  1296,  1297,  1297,  1297,  1297,
    1297,  1297,  1297,  1297,  1298,  1298,  1299,  1299,  1299,  1300,
    1300,  1300,  1300,  1300,  1300,  1300,  1300,  1300,  1300,  1300,
    1300,  1301,  1301,  1301,  1301,  1301,  1301,  1301,  1301,  1301,
    1301,  1301,  1301,  1301,  1301,  1301,  1301,  1301,  1301,  1301,
    1301,  1301,  1302,  1303,  1303,  1303,  1303,  1303,  1303,  1303,
    1303,  1303,  1303,  1303,  1303,  1303,  1304,  1304,  1304,  1305,
    1305,  1305,  1305,  1305,  1305,  1305,  1305,  1306,  1307,  1307,
    1307,  1307,  1307,  1307,  1307,  1307,  1307,  1307,  1307,  1307,
    1308,  1308,  1309,  1309,  1310,  1310,  1311,  1311,  1312,  1312,
    1313,  1313,  1314,  1314,  1315,  1315,  1316,  1316,  1317,  1317,
    1318,  1318,  1319,  1319,  1320,  1320,  1320,  1321,  1321,  1322,
    1322,  1323,  1323,  1324,  1324,  1325,  1325,  1326,  1326,  1327,
    1327,  1327,  1328,  1328,  1329,  1329,  1330,  1330,  1331,  1331,
    1332,  1332,  1333,  1333,  1334,  1334,  1335,  1335,  1336,  1336,
    1337,  1337,  1338,  1338,  1339,  1339,  1340,  1340,  1341,  1341,
    1342,  1342,  1343,  1343,  1343,  1344,  1344,  1345,  1345,  1345,
    1345,  1346,  1346,  1347,  1347,  1348,  1348,  1348,  1348,  1348,
    1349,  1349,  1350,  1351,  1351,  1352,  1352,  1352,  1352,  1353,
    1353,  1353,  1353,  1354,  1354,  1355,  1355,  1356,  1357,  1357,
    1358,  1358,  1359,  1360,  1360,  1361,  1362,  1362,  1362,  1362,
    1362
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     2,     1,     3,     0,     6,     4,     2,
       4,     0,     1,     1,     2,     5,     3,     5,     3,     6,
       0,     1,     0,     2,     6,     7,     0,     3,     1,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     5,     3,     4,     4,     0,     1,     4,
       4,     4,     4,     4,     5,     0,     1,     1,     1,     2,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       0,     3,     1,     2,     1,     1,     1,     0,     2,     0,
       4,     1,     2,     2,     3,     3,     2,     3,     1,     1,
       2,     2,     3,     2,     4,     1,     2,     5,     5,     4,
       0,     1,     1,     1,     1,     2,     5,     4,     2,     2,
       0,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     1,
       1,     7,     0,     3,     1,     2,     0,     2,     3,     5,
       3,     3,     1,     3,     5,     5,     4,     5,     5,     0,
       4,     1,     1,     1,     0,     1,     1,     1,     1,     0,
       2,     2,     3,     2,     2,     4,     0,     1,     1,     1,
       1,     4,     5,     3,     3,     0,     1,     1,     3,     2,
       2,     2,     0,     1,     1,     2,     2,     4,     5,     5,
       2,     4,     1,     2,     1,     1,     1,     1,     1,     4,
       0,     2,     0,     4,     4,     3,     3,     2,     1,     2,
       1,     3,     3,     0,     3,     0,     5,     4,     4,     3,
       1,     1,     2,     1,     4,     4,     6,     3,     4,     1,
       4,     1,     1,     1,     1,     2,     2,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     3,     2,     1,
       1,     1,     1,     3,     4,     2,     4,     4,     8,     8,
       0,     3,     1,     2,     2,     5,     2,     5,     2,     5,
       5,     4,     4,     4,     0,     1,     1,     1,     2,     2,
       2,     3,     0,     1,     0,     3,     1,     2,     2,     0,
       4,     0,     4,     0,     4,     0,     4,     3,     1,     2,
       0,     4,     0,     5,     2,     2,     1,     2,     1,     1,
       1,     3,     4,     3,     3,     2,     2,     4,     1,     1,
       4,     1,     3,     0,     1,     1,     3,     3,     3,     1,
       1,     1,     2,     3,     1,     1,     1,     2,     1,     4,
       4,     3,     2,     2,     1,     2,     1,     1,     5,     4,
       3,     3,     2,     1,     0,     3,     4,     4,     1,     2,
       5,     4,     1,     1,     1,     1,     0,     1,     1,     2,
       1,     2,     3,     4,     4,     3,     3,     2,     1,     6,
       4,     2,     2,     1,     2,     4,     1,     1,     1,     2,
       1,     0,     3,     1,     2,     1,     2,     1,     1,     1,
       1,     3,     3,     3,     1,     1,     1,     1,     5,     5,
       5,     5,     3,     4,     3,     5,     2,     1,     3,     2,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     5,
       4,     4,     2,     2,     2,     1,     2,     2,     0,     1,
       0,     1,     0,     1,     1,     2,     0,     3,     3,     1,
       1,     1,     1,     3,     3,     3,     5,     2,     2,     4,
       3,     3,     3,     1,     2,     2,     2,     2,     2,     2,
       1,     1,     3,     2,     1,     2,     2,     3,     3,     0,
       2,     1,     1,     0,     2,     1,     3,     3,     3,     1,
       0,     0,     5,     5,     3,     2,     4,     2,     1,     2,
       2,     4,     3,     3,     1,     1,     1,     0,     0,     7,
       1,     1,     2,     2,     2,     3,     1,     1,     2,     2,
       4,     2,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     0,     1,     1,
       3,     4,     3,     4,     3,     3,     3,     4,     3,     6,
       3,     2,     3,     2,     1,     1,     1,     1,     1,     2,
       2,     2,     3,     0,     1,     3,     5,     3,     4,     0,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     1,     1,     1,     1,     2,     1,
       3,     2,     2,     1,     6,     4,     0,     1,     0,     2,
       2,     2,     2,     3,     0,     1,     0,     3,     0,     3,
       0,     3,     2,     4,     0,     1,     1,     3,     2,     1,
       1,     2,     2,     2,     3,     0,     1,     3,     1,     3,
       1,     3,     5,     5,     2,     2,     2,     2,     2,     2,
       1,     4,     2,     2,     0,     3,     1,     0,     3,     3,
       2,     1,     2,     1,     1,     1,     3,     2,     2,     2,
       1,     2,     1,     3,     1,     1,     3,     3,     3,     3,
       2,     1,     3,     1,     1,     3,     3,     3,     3,     3,
       4,     1,     1,     2,     2,     4,     1,     3,     3,     5,
       3,     5,     2,     1,     2,     1,     2,     2,     2,     2,
       1,     2,     1,     3,     3,     1,     3,     3,     1,     3,
       2,     2,     1,     3,     1,     2,     3,     1,     2,     1,
       0,     4,     1,     2,     0,     1,     4,     1,     1,     3,
       1,     1,     1,     1,     1,     0,     5,     1,     2,     2,
       3,     1,     1,     2,     0,     3,     2,     1,     3,     1,
       1,     1,     1,     1,     3,     2,     1,     1,     1,     2,
       3,     3,     5,     3,     5,     1,     2,     0,     1,     1,
       1,     1,     1,     3,     2,     2,     1,     5,     4,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     5,
       5,     5,     4,     5,     1,     2,     1,     1,     1,     2,
       2,     2,     3,     0,     1,     3,     3,     5,     5,     1,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     2,     1,     1,     1,     1,     1,     1,     3,
       3,     2,     3,     1,     3,     3,     3,     3,     2,     2,
       3,     1,     3,     0,     5,     1,     2,     3,     2,     2,
       1,     2,     2,     3,     1,     2,     1,     1,     2,     1,
       1,     1,     2,     2,     2,     3,     1,     1,     0,     3,
       1,     2,     2,     1,     1,     1,     1,     0,     3,     1,
       2,     2,     0,     1,     3,     4,     3,     2,     1,     1,
       0,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     2,     2,     1,     3,     2,     3,     2,     2,     1,
       1,     2,     1,     0,     3,     3,     2,     0,     2,     0,
       0,     9,     1,     2,     0,     4,     2,     2,     1,     1,
       1,     2,     1,     3,     0,     0,     5,     0,     0,     5,
       0,     0,     4,     3,     3,     6,     1,     2,     6,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     2,     3,     0,     1,
       3,     5,     4,     1,     2,     1,     2,     1,     1,     3,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       3,     2,     1,     2,     3,     3,     4,     3,     4,     4,
       0,     2,     1,     2,     1,     1,     0,     2,     1,     2,
       0,     3,     1,     2,     0,     3,     0,     3,     1,     2,
       3,     3,     4,     3,     4,     3,     1,     3,     1,     1,
       3,     2,     1,     1,     1,     2,     2,     2,     1,     1,
       1,     2,     0,     4,     2,     2,     2,     3,     2,     0,
       1,     1,     3,     4,     2,     0,     1,     2,     2,     2,
       3,     0,     1,     1,     4,     7,     2,     2,     0,     8,
       1,     2,     1,     1,     4,     4,     4,     1,     3,     4,
       4,     4,     5,     5,     5,     5,     5,     5,     5,     4,
       0,     3,     1,     2,     3,     1,     2,     1,     1,     1,
       2,     2,     3,     0,     1,     1,     4,     2,     0,     2,
       1,     2,     3,     1,     1,     4,     7,     1,     1,     2,
       0,     4,     1,     2,     1,     3,     3,     1,     1,     1,
       1,     1,     5,     4,     7,     6,     1,     2,     4,     3,
       1,     1,     1,     2,     0,     4,     0,     4,     2,     4,
       2,     4,     1,     3,     4,     2,     2,     2,     2,     3,
       0,     1,     1,     3,     1,     2,     1,     2,     2,     1,
       1,     2,     1,     1,     1,     1,     0,     1,     5,     7,
       5,     9,     0,     2,     0,     3,     3,     1,     2,     3,
       2,     2,     2,     2,     1,     2,     2,     0,     2,     1,
       1,     1,     3,     1,     1,     2,     4,     2,     1,     2,
       4,     0,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     4,     3,     5,     5,
       1,     1,     3,     4,     4,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       2,     4,     1,     1,     2,     2,     2,     3,     0,     1,
       1,     3,     3,     5,     1,     1,     2,     4,     1,     1,
       1,     2,     1,     3,     3,     3,     1,     3,     1,     1,
       1,     1,     1,     1,     3,     2,     1,     4,     3,     2,
       1,     1,     2,     1,     2,     0,     3,     1,     2,     3,
       1,     3,     2,     5,     1,     3,     2,     1,     2,     1,
       1,     2,     2,     2,     3,     0,     1,     2,     1,     2,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     5,     2,     3,     1,     2,     2,     0,     1,     2,
       3,     4,     1,     1,     1,     0,     3,     1,     3,     2,
       1,     4,     4,     7,     1,     2,     1,     4,     4,     7,
       2,     3,     2,     0,     1,     4,     1,     1,     1,     4,
       4,     6,     4,     4,     6,     4,     5,     2,     7,     5,
       6,     7,     4,     6,     5,     4,     5,     5,     5,     5,
       5,     5,     5,     4,     4,     4,     4,     4,     6,     4,
       1,     3,     7,     6,     5,     5,     6,     4,     5,     6,
       4,     4,     4,     5,     4,     5,     6,     4,     5,     6,
       4,     5,     6,     5,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     2,     4,     5,     6,     4,     5,
       4,     5,     4,     5,     1,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     0,     1,     0,     1,     0,     1,     0,     1,
       0,     1,     0,     1,     0,     1,     0,     1,     0,     1,
       0,     1,     0,     1,     0,     1,     1,     0,     2,     0,
       1,     0,     1,     0,     1,     0,     1,     0,     1,     0,
       1,     1,     0,     1,     0,     1,     0,     1,     0,     1,
       0,     1,     0,     1,     0,     1,     0,     1,     0,     1,
       0,     3,     0,     1,     0,     1,     0,     1,     0,     1,
       0,     1,     0,     1,     2,     0,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     4,     5,     6,     6,     2,
       1,     2,     3,     0,     2,     1,     1,     1,     1,     1,
       2,     2,     3,     1,     1,     0,     1,     2,     1,     2,
       1,     1,     2,     1,     2,     1,     1,     1,     1,     1,
       1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  switch (yykind)
    {
    case YYSYMBOL_ALNUM: /* ALNUM  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14078 "parse.cc"
        break;

    case YYSYMBOL_ALPHED: /* ALPHED  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14084 "parse.cc"
        break;

    case YYSYMBOL_ERROR: /* ERROR  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14090 "parse.cc"
        break;

    case YYSYMBOL_EXCEPTION: /* EXCEPTION  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14096 "parse.cc"
        break;

    case YYSYMBOL_SIZE_ERROR: /* "SIZE ERROR"  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14102 "parse.cc"
        break;

    case YYSYMBOL_LEVEL: /* LEVEL  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14108 "parse.cc"
        break;

    case YYSYMBOL_LEVEL66: /* "66"  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14114 "parse.cc"
        break;

    case YYSYMBOL_LEVEL78: /* "78"  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14120 "parse.cc"
        break;

    case YYSYMBOL_LEVEL88: /* "88"  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14126 "parse.cc"
        break;

    case YYSYMBOL_CLASS_NAME: /* "class name"  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14132 "parse.cc"
        break;

    case YYSYMBOL_NAME: /* NAME  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14138 "parse.cc"
        break;

    case YYSYMBOL_NAME88: /* "Level 88 NAME"  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14144 "parse.cc"
        break;

    case YYSYMBOL_NUME: /* "Name"  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14150 "parse.cc"
        break;

    case YYSYMBOL_NUMED: /* "NUMERIC-EDITED picture"  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14156 "parse.cc"
        break;

    case YYSYMBOL_NUMED_CR: /* "NUMERIC-EDITED CR picture"  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14162 "parse.cc"
        break;

    case YYSYMBOL_NUMED_DB: /* "NUMERIC-EDITED DB picture"  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14168 "parse.cc"
        break;

    case YYSYMBOL_NINEDOT: /* NINEDOT  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14174 "parse.cc"
        break;

    case YYSYMBOL_NINES: /* NINES  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14180 "parse.cc"
        break;

    case YYSYMBOL_NINEV: /* NINEV  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14186 "parse.cc"
        break;

    case YYSYMBOL_PIC_P: /* PIC_P  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14192 "parse.cc"
        break;

    case YYSYMBOL_SPACES: /* SPACES  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14198 "parse.cc"
        break;

    case YYSYMBOL_LITERAL: /* LITERAL  */
#line 948 "parse.y"
         { fprintf(yyo, "%s'%.*s'{%zu} %s", ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, ((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 14205 "parse.cc"
        break;

    case YYSYMBOL_END: /* END  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14211 "parse.cc"
        break;

    case YYSYMBOL_EOP: /* EOP  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14217 "parse.cc"
        break;

    case YYSYMBOL_FILENAME: /* FILENAME  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14223 "parse.cc"
        break;

    case YYSYMBOL_INVALID: /* INVALID  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14229 "parse.cc"
        break;

    case YYSYMBOL_NUMBER: /* NUMBER  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14235 "parse.cc"
        break;

    case YYSYMBOL_NEGATIVE: /* NEGATIVE  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14241 "parse.cc"
        break;

    case YYSYMBOL_NUMSTR: /* "numeric literal"  */
#line 961 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).numstr).string ); }
#line 14247 "parse.cc"
        break;

    case YYSYMBOL_OVERFLOW_kw: /* "OVERFLOW"  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14253 "parse.cc"
        break;

    case YYSYMBOL_COMPUTATIONAL: /* COMPUTATIONAL  */
#line 964 "parse.y"
         { fprintf(yyo, "{%s %c%u}", cbl_field_type_str(((*yyvaluep).computational).type),
                                     ((*yyvaluep).computational).signable? '+' : ' ',
                                     ((*yyvaluep).computational).capacity ); }
#line 14261 "parse.cc"
        break;

    case YYSYMBOL_POSITIVE: /* POSITIVE  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14267 "parse.cc"
        break;

    case YYSYMBOL_SECTION: /* SECTION  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14273 "parse.cc"
        break;

    case YYSYMBOL_STANDARD_ALPHABET: /* "STANDARD ALPHABET"  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14279 "parse.cc"
        break;

    case YYSYMBOL_SWITCH: /* SWITCH  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14285 "parse.cc"
        break;

    case YYSYMBOL_UPSI: /* UPSI  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14291 "parse.cc"
        break;

    case YYSYMBOL_ZERO: /* ZERO  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14297 "parse.cc"
        break;

    case YYSYMBOL_SYSIN: /* SYSIN  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14303 "parse.cc"
        break;

    case YYSYMBOL_SYSIPT: /* SYSIPT  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14309 "parse.cc"
        break;

    case YYSYMBOL_SYSOUT: /* SYSOUT  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14315 "parse.cc"
        break;

    case YYSYMBOL_SYSLIST: /* SYSLIST  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14321 "parse.cc"
        break;

    case YYSYMBOL_SYSLST: /* SYSLST  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14327 "parse.cc"
        break;

    case YYSYMBOL_SYSPUNCH: /* SYSPUNCH  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14333 "parse.cc"
        break;

    case YYSYMBOL_SYSPCH: /* SYSPCH  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14339 "parse.cc"
        break;

    case YYSYMBOL_CONSOLE: /* CONSOLE  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14345 "parse.cc"
        break;

    case YYSYMBOL_C01: /* C01  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14351 "parse.cc"
        break;

    case YYSYMBOL_C02: /* C02  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14357 "parse.cc"
        break;

    case YYSYMBOL_C03: /* C03  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14363 "parse.cc"
        break;

    case YYSYMBOL_C04: /* C04  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14369 "parse.cc"
        break;

    case YYSYMBOL_C05: /* C05  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14375 "parse.cc"
        break;

    case YYSYMBOL_C06: /* C06  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14381 "parse.cc"
        break;

    case YYSYMBOL_C07: /* C07  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14387 "parse.cc"
        break;

    case YYSYMBOL_C08: /* C08  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14393 "parse.cc"
        break;

    case YYSYMBOL_C09: /* C09  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14399 "parse.cc"
        break;

    case YYSYMBOL_C10: /* C10  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14405 "parse.cc"
        break;

    case YYSYMBOL_C11: /* C11  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14411 "parse.cc"
        break;

    case YYSYMBOL_C12: /* C12  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14417 "parse.cc"
        break;

    case YYSYMBOL_CSP: /* CSP  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14423 "parse.cc"
        break;

    case YYSYMBOL_S01: /* S01  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14429 "parse.cc"
        break;

    case YYSYMBOL_S02: /* S02  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14435 "parse.cc"
        break;

    case YYSYMBOL_S03: /* S03  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14441 "parse.cc"
        break;

    case YYSYMBOL_S04: /* S04  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14447 "parse.cc"
        break;

    case YYSYMBOL_S05: /* S05  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14453 "parse.cc"
        break;

    case YYSYMBOL_AFP_5A: /* "AFP 5A"  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14459 "parse.cc"
        break;

    case YYSYMBOL_STDIN: /* STDIN  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14465 "parse.cc"
        break;

    case YYSYMBOL_STDOUT: /* STDOUT  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14471 "parse.cc"
        break;

    case YYSYMBOL_STDERR: /* STDERR  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14477 "parse.cc"
        break;

    case YYSYMBOL_LIST: /* LIST  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14483 "parse.cc"
        break;

    case YYSYMBOL_MAP: /* MAP  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14489 "parse.cc"
        break;

    case YYSYMBOL_NOLIST: /* NOLIST  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14495 "parse.cc"
        break;

    case YYSYMBOL_NOMAP: /* NOMAP  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14501 "parse.cc"
        break;

    case YYSYMBOL_NOSOURCE: /* NOSOURCE  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14507 "parse.cc"
        break;

    case YYSYMBOL_MIGHT_BE: /* "IS or IS NOT"  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14513 "parse.cc"
        break;

    case YYSYMBOL_FUNCTION_UDF: /* "UDF name"  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14519 "parse.cc"
        break;

    case YYSYMBOL_FUNCTION_UDF_0: /* "UDF"  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14525 "parse.cc"
        break;

    case YYSYMBOL_DATE_FMT: /* "date format"  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14531 "parse.cc"
        break;

    case YYSYMBOL_TIME_FMT: /* "time format"  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14537 "parse.cc"
        break;

    case YYSYMBOL_DATETIME_FMT: /* "datetime format"  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14543 "parse.cc"
        break;

    case YYSYMBOL_program_as: /* program_as  */
#line 948 "parse.y"
         { fprintf(yyo, "%s'%.*s'{%zu} %s", ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, ((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 14550 "parse.cc"
        break;

    case YYSYMBOL_opt_init_value: /* opt_init_value  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14556 "parse.cc"
        break;

    case YYSYMBOL_namestr: /* namestr  */
#line 948 "parse.y"
         { fprintf(yyo, "%s'%.*s'{%zu} %s", ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, ((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 14563 "parse.cc"
        break;

    case YYSYMBOL_selected_name: /* selected_name  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14569 "parse.cc"
        break;

    case YYSYMBOL_access_mode: /* access_mode  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14575 "parse.cc"
        break;

    case YYSYMBOL_lock_how: /* lock_how  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14581 "parse.cc"
        break;

    case YYSYMBOL_lock_mode: /* lock_mode  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14587 "parse.cc"
        break;

    case YYSYMBOL_multiple: /* multiple  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14593 "parse.cc"
        break;

    case YYSYMBOL_org_clause1: /* org_clause1  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14599 "parse.cc"
        break;

    case YYSYMBOL_repo_as: /* repo_as  */
#line 948 "parse.y"
         { fprintf(yyo, "%s'%.*s'{%zu} %s", ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, ((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 14606 "parse.cc"
        break;

    case YYSYMBOL_collating_sequence: /* collating_sequence  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14612 "parse.cc"
        break;

    case YYSYMBOL_locale_spec: /* locale_spec  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14618 "parse.cc"
        break;

    case YYSYMBOL_alphabet_seq: /* alphabet_seq  */
#line 967 "parse.y"
         { fprintf(yyo, "{'%s'-'%s'%s}",
                        ((*yyvaluep).colseq).low?  (const char*) ((*yyvaluep).colseq).low : "",
                        ((*yyvaluep).colseq).high? (const char*) ((*yyvaluep).colseq).high : "",
                        ((*yyvaluep).colseq).also? "+" : "" ); }
#line 14627 "parse.cc"
        break;

    case YYSYMBOL_alphabet_etc: /* alphabet_etc  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14633 "parse.cc"
        break;

    case YYSYMBOL_alphabet_lit: /* alphabet_lit  */
#line 948 "parse.y"
         { fprintf(yyo, "%s'%.*s'{%zu} %s", ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, ((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 14640 "parse.cc"
        break;

    case YYSYMBOL_picture_sym: /* picture_sym  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14646 "parse.cc"
        break;

    case YYSYMBOL_fd_name: /* fd_name  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14652 "parse.cc"
        break;

    case YYSYMBOL_rec_contains: /* rec_contains  */
#line 956 "parse.y"
         { fprintf(yyo, "{%zu-%zu}", ((*yyvaluep).min_max).min, ((*yyvaluep).min_max).max ); }
#line 14658 "parse.cc"
        break;

    case YYSYMBOL_alpha_val: /* alpha_val  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14664 "parse.cc"
        break;

    case YYSYMBOL_record_desc: /* record_desc  */
#line 956 "parse.y"
         { fprintf(yyo, "{%zu-%zu}", ((*yyvaluep).min_max).min, ((*yyvaluep).min_max).max ); }
#line 14670 "parse.cc"
        break;

    case YYSYMBOL_record_vary: /* record_vary  */
#line 956 "parse.y"
         { fprintf(yyo, "{%zu-%zu}", ((*yyvaluep).min_max).min, ((*yyvaluep).min_max).max ); }
#line 14676 "parse.cc"
        break;

    case YYSYMBOL_from_to: /* from_to  */
#line 956 "parse.y"
         { fprintf(yyo, "{%zu-%zu}", ((*yyvaluep).min_max).min, ((*yyvaluep).min_max).max ); }
#line 14682 "parse.cc"
        break;

    case YYSYMBOL_cardinal: /* cardinal  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14688 "parse.cc"
        break;

    case YYSYMBOL_bound: /* bound  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14694 "parse.cc"
        break;

    case YYSYMBOL_level_name: /* level_name  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 14704 "parse.cc"
        break;

    case YYSYMBOL_data_descr: /* data_descr  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 14714 "parse.cc"
        break;

    case YYSYMBOL_const_value: /* const_value  */
#line 962 "parse.y"
         { const char *s = string_of(((*yyvaluep).float128));
           fprintf(yyo, "{%s}", s? s : "??" ); }
#line 14721 "parse.cc"
        break;

    case YYSYMBOL_data_descr1: /* data_descr1  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 14731 "parse.cc"
        break;

    case YYSYMBOL_literalism: /* literalism  */
#line 948 "parse.y"
         { fprintf(yyo, "%s'%.*s'{%zu} %s", ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, ((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 14738 "parse.cc"
        break;

    case YYSYMBOL_name66: /* name66  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14744 "parse.cc"
        break;

    case YYSYMBOL_data_clauses: /* data_clauses  */
#line 933 "parse.y"
         { fprintf(yyo, "clauses: 0x%04x", ((*yyvaluep).number)); }
#line 14750 "parse.cc"
        break;

    case YYSYMBOL_data_clause: /* data_clause  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14756 "parse.cc"
        break;

    case YYSYMBOL_alphanum_pic: /* alphanum_pic  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14762 "parse.cc"
        break;

    case YYSYMBOL_signed: /* signed  */
#line 957 "parse.y"
         { fprintf(yyo, "{%s}", ((*yyvaluep).number)? "+/-" : "" ); }
#line 14768 "parse.cc"
        break;

    case YYSYMBOL_nps: /* nps  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14774 "parse.cc"
        break;

    case YYSYMBOL_nine: /* nine  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14780 "parse.cc"
        break;

    case YYSYMBOL_nines: /* nines  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14786 "parse.cc"
        break;

    case YYSYMBOL_count: /* count  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14792 "parse.cc"
        break;

    case YYSYMBOL_numed: /* numed  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14798 "parse.cc"
        break;

    case YYSYMBOL_usage_clause1: /* usage_clause1  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14804 "parse.cc"
        break;

    case YYSYMBOL_by_value_arg: /* by_value_arg  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14810 "parse.cc"
        break;

    case YYSYMBOL_paragraph_name: /* paragraph_name  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14816 "parse.cc"
        break;

    case YYSYMBOL_sentence: /* sentence  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14822 "parse.cc"
        break;

    case YYSYMBOL_statements: /* statements  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14828 "parse.cc"
        break;

    case YYSYMBOL_statement: /* statement  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14834 "parse.cc"
        break;

    case YYSYMBOL_accept_refer: /* accept_refer  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14840 "parse.cc"
        break;

    case YYSYMBOL_envar: /* envar  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14846 "parse.cc"
        break;

    case YYSYMBOL_might_be: /* might_be  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14852 "parse.cc"
        break;

    case YYSYMBOL_posneg: /* posneg  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14858 "parse.cc"
        break;

    case YYSYMBOL_name88: /* name88  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 14868 "parse.cc"
        break;

    case YYSYMBOL_scalar88: /* scalar88  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14874 "parse.cc"
        break;

    case YYSYMBOL_alloc_ret: /* alloc_ret  */
#line 935 "parse.y"
         { fprintf(yyo, "%s", ((*yyvaluep).refer)->field? name_of(((*yyvaluep).refer)->field) : "[omitted]"); }
#line 14880 "parse.cc"
        break;

    case YYSYMBOL_compute_expr: /* compute_expr  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14886 "parse.cc"
        break;

    case YYSYMBOL_exit_with: /* exit_with  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14892 "parse.cc"
        break;

    case YYSYMBOL_free_tgt: /* free_tgt  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14898 "parse.cc"
        break;

    case YYSYMBOL_simple_cond: /* simple_cond  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14904 "parse.cc"
        break;

    case YYSYMBOL_kind_of_name: /* kind_of_name  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 14914 "parse.cc"
        break;

    case YYSYMBOL_bool_expr: /* bool_expr  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14920 "parse.cc"
        break;

    case YYSYMBOL_log_term: /* log_term  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 14930 "parse.cc"
        break;

    case YYSYMBOL_rel_expr: /* rel_expr  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 14940 "parse.cc"
        break;

    case YYSYMBOL_rel_abbr: /* rel_abbr  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 14950 "parse.cc"
        break;

    case YYSYMBOL_rel_term: /* rel_term  */
#line 942 "parse.y"
         { fprintf(yyo, "%c %s",
                        ((*yyvaluep).rel_term_t).invert? '!' : ' ',
		        ((*yyvaluep).rel_term_t).term? name_of(((*yyvaluep).rel_term_t).term->field) : "<none>"); }
#line 14958 "parse.cc"
        break;

    case YYSYMBOL_rel_term1: /* rel_term1  */
#line 942 "parse.y"
         { fprintf(yyo, "%c %s",
                        ((*yyvaluep).rel_term_t).invert? '!' : ' ',
		        ((*yyvaluep).rel_term_t).term? name_of(((*yyvaluep).rel_term_t).term->field) : "<none>"); }
#line 14966 "parse.cc"
        break;

    case YYSYMBOL_expr: /* expr  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14972 "parse.cc"
        break;

    case YYSYMBOL_expr_term: /* expr_term  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14978 "parse.cc"
        break;

    case YYSYMBOL_num_term: /* num_term  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14984 "parse.cc"
        break;

    case YYSYMBOL_value: /* value  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14990 "parse.cc"
        break;

    case YYSYMBOL_factor: /* factor  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 14996 "parse.cc"
        break;

    case YYSYMBOL_eval_subject1: /* eval_subject1  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15002 "parse.cc"
        break;

    case YYSYMBOL_eval_posneg: /* eval_posneg  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15008 "parse.cc"
        break;

    case YYSYMBOL_eval_abbr: /* eval_abbr  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15018 "parse.cc"
        break;

    case YYSYMBOL_true_false: /* true_false  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15024 "parse.cc"
        break;

    case YYSYMBOL_scalar: /* scalar  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15030 "parse.cc"
        break;

    case YYSYMBOL_tableref: /* tableref  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15036 "parse.cc"
        break;

    case YYSYMBOL_tableish: /* tableish  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15042 "parse.cc"
        break;

    case YYSYMBOL_typename: /* typename  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15052 "parse.cc"
        break;

    case YYSYMBOL_name: /* name  */
#line 953 "parse.y"
         { fprintf(yyo, "#%zu: %s",
                        is_temporary(((*yyvaluep).field))? 0 : field_index(((*yyvaluep).field)),
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "<nil>" ); }
#line 15060 "parse.cc"
        break;

    case YYSYMBOL_qname: /* qname  */
#line 958 "parse.y"
         { fprintf(yyo, "{%s of %zu}",
		         teed_up_names().front(), teed_up_names().size() ); }
#line 15067 "parse.cc"
        break;

    case YYSYMBOL_ctx_name: /* ctx_name  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15073 "parse.cc"
        break;

    case YYSYMBOL_context_word: /* context_word  */
#line 947 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15079 "parse.cc"
        break;

    case YYSYMBOL_move_tgts: /* move_tgts  */
#line 950 "parse.y"
         { fprintf(yyo, "%s (1st of %zu)",
                        ((*yyvaluep).targets)->targets.empty()? "" : ((*yyvaluep).targets)->targets.front().refer.field->name,
                        ((*yyvaluep).targets)->targets.size() ); }
#line 15087 "parse.cc"
        break;

    case YYSYMBOL_move_tgt: /* move_tgt  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15093 "parse.cc"
        break;

    case YYSYMBOL_relop: /* relop  */
#line 946 "parse.y"
         { fprintf(yyo, "%s (token %d)", keyword_str(((*yyvaluep).number)), ((*yyvaluep).number) ); }
#line 15099 "parse.cc"
        break;

    case YYSYMBOL_num_operand: /* num_operand  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15105 "parse.cc"
        break;

    case YYSYMBOL_num_value: /* num_value  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15111 "parse.cc"
        break;

    case YYSYMBOL_cce_expr: /* cce_expr  */
#line 962 "parse.y"
         { const char *s = string_of(((*yyvaluep).float128));
           fprintf(yyo, "{%s}", s? s : "??" ); }
#line 15118 "parse.cc"
        break;

    case YYSYMBOL_cce_factor: /* cce_factor  */
#line 962 "parse.y"
         { const char *s = string_of(((*yyvaluep).float128));
           fprintf(yyo, "{%s}", s? s : "??" ); }
#line 15125 "parse.cc"
        break;

    case YYSYMBOL_stop_status: /* stop_status  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15131 "parse.cc"
        break;

    case YYSYMBOL_any_arg: /* any_arg  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15137 "parse.cc"
        break;

    case YYSYMBOL_signed_literal: /* signed_literal  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15147 "parse.cc"
        break;

    case YYSYMBOL_num_literal: /* num_literal  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15157 "parse.cc"
        break;

    case YYSYMBOL_open_io: /* open_io  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15163 "parse.cc"
        break;

    case YYSYMBOL_close_how: /* close_how  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15169 "parse.cc"
        break;

    case YYSYMBOL_perform_times: /* perform_times  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15175 "parse.cc"
        break;

    case YYSYMBOL_perform_cond: /* perform_cond  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15185 "parse.cc"
        break;

    case YYSYMBOL_perform_start: /* perform_start  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15191 "parse.cc"
        break;

    case YYSYMBOL_test_before: /* test_before  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15197 "parse.cc"
        break;

    case YYSYMBOL_vary_by: /* vary_by  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15203 "parse.cc"
        break;

    case YYSYMBOL_reserved_value: /* reserved_value  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15209 "parse.cc"
        break;

    case YYSYMBOL_spaces_etc: /* spaces_etc  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15215 "parse.cc"
        break;

    case YYSYMBOL_variable_type: /* variable_type  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15221 "parse.cc"
        break;

    case YYSYMBOL_varg: /* varg  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15227 "parse.cc"
        break;

    case YYSYMBOL_varg1: /* varg1  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15233 "parse.cc"
        break;

    case YYSYMBOL_varg1a: /* varg1a  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15239 "parse.cc"
        break;

    case YYSYMBOL_literal: /* literal  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15249 "parse.cc"
        break;

    case YYSYMBOL_read_next: /* read_next  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15255 "parse.cc"
        break;

    case YYSYMBOL_read_into: /* read_into  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15261 "parse.cc"
        break;

    case YYSYMBOL_read_key: /* read_key  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15267 "parse.cc"
        break;

    case YYSYMBOL_write_what: /* write_what  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15277 "parse.cc"
        break;

    case YYSYMBOL_file_record: /* file_record  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15287 "parse.cc"
        break;

    case YYSYMBOL_advance_when: /* advance_when  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15293 "parse.cc"
        break;

    case YYSYMBOL_advancing: /* advancing  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15299 "parse.cc"
        break;

    case YYSYMBOL_advance_by: /* advance_by  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15305 "parse.cc"
        break;

    case YYSYMBOL_set_tgts: /* set_tgts  */
#line 950 "parse.y"
         { fprintf(yyo, "%s (1st of %zu)",
                        ((*yyvaluep).targets)->targets.empty()? "" : ((*yyvaluep).targets)->targets.front().refer.field->name,
                        ((*yyvaluep).targets)->targets.size() ); }
#line 15313 "parse.cc"
        break;

    case YYSYMBOL_set_operand: /* set_operand  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15319 "parse.cc"
        break;

    case YYSYMBOL_set_tgt: /* set_tgt  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15325 "parse.cc"
        break;

    case YYSYMBOL_one_switch: /* one_switch  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15335 "parse.cc"
        break;

    case YYSYMBOL_search_varying: /* search_varying  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15345 "parse.cc"
        break;

    case YYSYMBOL_search_terms: /* search_terms  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15355 "parse.cc"
        break;

    case YYSYMBOL_search_term: /* search_term  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15365 "parse.cc"
        break;

    case YYSYMBOL_search_expr: /* search_expr  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15371 "parse.cc"
        break;

    case YYSYMBOL_return_body: /* return_body  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15377 "parse.cc"
        break;

    case YYSYMBOL_return_file: /* return_file  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15383 "parse.cc"
        break;

    case YYSYMBOL_inspected: /* inspected  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15389 "parse.cc"
        break;

    case YYSYMBOL_numeref: /* numeref  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15395 "parse.cc"
        break;

    case YYSYMBOL_nume: /* nume  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15405 "parse.cc"
        break;

    case YYSYMBOL_first_leading: /* first_leading  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15411 "parse.cc"
        break;

    case YYSYMBOL_alphaval: /* alphaval  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15417 "parse.cc"
        break;

    case YYSYMBOL_befter: /* befter  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15423 "parse.cc"
        break;

    case YYSYMBOL_init_by: /* init_by  */
#line 974 "parse.y"
         { fprintf(yyo, "%s <- %s", data_category_str(((*yyvaluep).replacement).category),
                                    name_of(((*yyvaluep).replacement).replacement->field)); }
#line 15430 "parse.cc"
        break;

    case YYSYMBOL_init_data: /* init_data  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15436 "parse.cc"
        break;

    case YYSYMBOL_call_body: /* call_body  */
#line 971 "parse.y"
         { fprintf(yyo, "{%s, %zu parameters}",
                        name_of(((*yyvaluep).ffi_impl).ffi_name->field), !((*yyvaluep).ffi_impl).using_params? 0 :
                        ((*yyvaluep).ffi_impl).using_params->elems.size()); }
#line 15444 "parse.cc"
        break;

    case YYSYMBOL_ffi_name: /* ffi_name  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15450 "parse.cc"
        break;

    case YYSYMBOL_scalar_arg: /* scalar_arg  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15456 "parse.cc"
        break;

    case YYSYMBOL_str_input: /* str_input  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15462 "parse.cc"
        break;

    case YYSYMBOL_str_size: /* str_size  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15468 "parse.cc"
        break;

    case YYSYMBOL_unstring_src: /* unstring_src  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15474 "parse.cc"
        break;

    case YYSYMBOL_uns_delimiter: /* uns_delimiter  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15480 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_call: /* intrinsic_call  */
#line 934 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15486 "parse.cc"
        break;

    case YYSYMBOL_function_udf: /* function_udf  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15496 "parse.cc"
        break;

    case YYSYMBOL_intrinsic: /* intrinsic  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15506 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_locale: /* intrinsic_locale  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15516 "parse.cc"
        break;

    case YYSYMBOL_lopper_case: /* lopper_case  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15522 "parse.cc"
        break;

    case YYSYMBOL_trim_trailing: /* trim_trailing  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15532 "parse.cc"
        break;

    case YYSYMBOL_intrinsic0: /* intrinsic0  */
#line 936 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15542 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_I: /* intrinsic_I  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15548 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_I2: /* intrinsic_I2  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15554 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_N: /* intrinsic_N  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15560 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_N2: /* intrinsic_N2  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15566 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_X: /* intrinsic_X  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15572 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_X2: /* intrinsic_X2  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15578 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_v: /* intrinsic_v  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15584 "parse.cc"
        break;

    case YYSYMBOL_first_last: /* first_last  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15590 "parse.cc"
        break;

    case YYSYMBOL_initial: /* initial  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15596 "parse.cc"
        break;

    case YYSYMBOL_globally: /* globally  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15602 "parse.cc"
        break;

    case YYSYMBOL_mistake: /* mistake  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15608 "parse.cc"
        break;

    case YYSYMBOL_star_cbl_opt: /* star_cbl_opt  */
#line 960 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15614 "parse.cc"
        break;

      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]));
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


/* Context of a parse error.  */
typedef struct
{
  yy_state_t *yyssp;
  yysymbol_kind_t yytoken;
  YYLTYPE *yylloc;
} yypcontext_t;

/* Put in YYARG at most YYARGN of the expected tokens given the
   current YYCTX, and return the number of tokens stored in YYARG.  If
   YYARG is null, return the number of expected tokens (guaranteed to
   be less than YYNTOKENS).  Return YYENOMEM on memory exhaustion.
   Return 0 if there are more than YYARGN expected tokens, yet fill
   YYARG up to YYARGN. */
static int
yypcontext_expected_tokens (const yypcontext_t *yyctx,
                            yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  int yyn = yypact[+*yyctx->yyssp];
  if (!yypact_value_is_default (yyn))
    {
      /* Start YYX at -YYN if negative to avoid negative indexes in
         YYCHECK.  In other words, skip the first -YYN actions for
         this state because they are default actions.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;
      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yyx;
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
        if (yycheck[yyx + yyn] == yyx && yyx != YYSYMBOL_YYerror
            && !yytable_value_is_error (yytable[yyx + yyn]))
          {
            if (!yyarg)
              ++yycount;
            else if (yycount == yyargn)
              return 0;
            else
              yyarg[yycount++] = YY_CAST (yysymbol_kind_t, yyx);
          }
    }
  if (yyarg && yycount == 0 && 0 < yyargn)
    yyarg[0] = YYSYMBOL_YYEMPTY;
  return yycount;
}




#ifndef yystrlen
# if defined __GLIBC__ && defined _STRING_H
#  define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
# else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
# endif
#endif

#ifndef yystpcpy
# if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#  define yystpcpy stpcpy
# else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
# endif
#endif

#ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;
      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
#endif


static int
yy_syntax_error_arguments (const yypcontext_t *yyctx,
                           yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yyctx->yytoken != YYSYMBOL_YYEMPTY)
    {
      int yyn;
      if (yyarg)
        yyarg[yycount] = yyctx->yytoken;
      ++yycount;
      yyn = yypcontext_expected_tokens (yyctx,
                                        yyarg ? yyarg + 1 : yyarg, yyargn - 1);
      if (yyn == YYENOMEM)
        return YYENOMEM;
      else
        yycount += yyn;
    }
  return yycount;
}

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return -1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return YYENOMEM if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                const yypcontext_t *yyctx)
{
  enum { YYARGS_MAX = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  yysymbol_kind_t yyarg[YYARGS_MAX];
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* Actual size of YYARG. */
  int yycount = yy_syntax_error_arguments (yyctx, yyarg, YYARGS_MAX);
  if (yycount == YYENOMEM)
    return YYENOMEM;

  switch (yycount)
    {
#define YYCASE_(N, S)                       \
      case N:                               \
        yyformat = S;                       \
        break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
    }

  /* Compute error message size.  Don't count the "%s"s, but reserve
     room for the terminator.  */
  yysize = yystrlen (yyformat) - 2 * yycount + 1;
  {
    int yyi;
    for (yyi = 0; yyi < yycount; ++yyi)
      {
        YYPTRDIFF_T yysize1
          = yysize + yytnamerr (YY_NULLPTR, yytname[yyarg[yyi]]);
        if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
          yysize = yysize1;
        else
          return YYENOMEM;
      }
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return -1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yytname[yyarg[yyi++]]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/* Lookahead token kind.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
/* Number of syntax errors so far.  */
int yynerrs;




/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];

  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* top: programs  */
#line 1364 "parse.y"
                {
                  if( ! goodnight_gracie() ) {
                    YYABORT;
                  }
                  if( nparse_error > 0 ) YYABORT;
                }
#line 16309 "parse.cc"
    break;

  case 3: /* top: programs end_program  */
#line 1371 "parse.y"
                {
                  if( nparse_error > 0 ) YYABORT;
                }
#line 16317 "parse.cc"
    break;

  case 6: /* $@1: %empty  */
#line 1379 "parse.y"
                {
                  if( ! data_division_ready() ) {
		    mode_syntax_only(procedure_div_e);
		  }
                  current_division = procedure_div_e;
                }
#line 16328 "parse.cc"
    break;

  case 7: /* program: id_div options_para env_div data_div $@1 procedure_div  */
#line 1386 "parse.y"
                {
                  if( yydebug ) labels_dump();
                }
#line 16336 "parse.cc"
    break;

  case 15: /* cobol_words1: ">>COBOL-WORDS" EQUATE NAME WITH NAME  */
#line 1402 "parse.y"
                                                                 {
		  if( ! tokens.equate((yylsp[-2]), (yyvsp[-2].string), (yyvsp[0].string)) ) { YYERROR; }
		}
#line 16344 "parse.cc"
    break;

  case 16: /* cobol_words1: ">>COBOL-WORDS" UNDEFINE NAME  */
#line 1405 "parse.y"
                                                   {
		  if( ! tokens.undefine((yylsp[0]), (yyvsp[0].string)) ) { YYERROR; }
		}
#line 16352 "parse.cc"
    break;

  case 17: /* cobol_words1: ">>COBOL-WORDS" SUBSTITUTE NAME BY NAME  */
#line 1408 "parse.y"
                                                                   {
		  if( ! tokens.substitute((yylsp[-2]), (yyvsp[-2].string), (yyvsp[0].string)) ) { YYERROR; }
		}
#line 16360 "parse.cc"
    break;

  case 18: /* cobol_words1: ">>COBOL-WORDS" RESERVE NAME  */
#line 1411 "parse.y"
                                               {
		  if( ! tokens.reserve((yylsp[0]), (yyvsp[0].string)) ) { YYERROR; }
		}
#line 16368 "parse.cc"
    break;

  case 19: /* program_id: "PROGRAM-ID" dot namestr program_as program_attrs dot  */
#line 1417 "parse.y"
                {
                  internal_ebcdic_lock();
                  current_division = identification_div_e;
                  parser_division( identification_div_e, NULL, 0, NULL );
                  location_set((yylsp[-5]));
                  int main_error=0;
                  const char *name = string_of((yyvsp[-3].literal));
                  parser_enter_program( name, false, &main_error );
                  if( main_error ) {
                    error_msg((yylsp[-3]), "PROGRAM-ID 'main' is invalid with -main option");
                    YYERROR;
                  }

                  if( symbols_begin() == symbols_end() ) {
                    symbol_table_init();
                  }
                  if( !current.new_program((yylsp[-3]), LblProgram, name,
		                           (yyvsp[-2].literal).data,
                                           (yyvsp[-1].comminit).common, (yyvsp[-1].comminit).initial) ) {
                    auto L = symbol_program(current_program_index(), name);
                    assert(L);
                    error_msg((yylsp[-3]), "PROGRAM-ID %s already defined on line %d",
                             name, L->line);
                    YYERROR;
                  }
                  if( nparse_error > 0 ) YYABORT;
                }
#line 16400 "parse.cc"
    break;

  case 22: /* program_as: %empty  */
#line 1448 "parse.y"
                           { static const literal_t empty {}; (yyval.literal) = empty; }
#line 16406 "parse.cc"
    break;

  case 23: /* program_as: AS LITERAL  */
#line 1449 "parse.y"
                           { (yyval.literal) = (yyvsp[0].literal); }
#line 16412 "parse.cc"
    break;

  case 24: /* function_id: FUNCTION '.' NAME program_as program_attrs '.'  */
#line 1453 "parse.y"
                {
                  internal_ebcdic_lock();
                  current_division = identification_div_e;
                  parser_division( identification_div_e, NULL, 0, NULL );
                  location_set((yylsp[-5]));

                  int main_error = 0;
                  parser_enter_program( (yyvsp[-3].string), true, &main_error );
                  if( main_error ) {
                    error_msg((yylsp[-3]), "FUNCTION-ID 'main' is invalid with -main option");
                    YYERROR;
                  }
                  if( symbols_begin() == symbols_end() ) {
                    symbol_table_init();
                  }
                  if( !current.new_program((yylsp[-3]), LblFunction, (yyvsp[-3].string),
		                      (yyvsp[-2].literal).data,
                                      (yyvsp[-1].comminit).common, (yyvsp[-1].comminit).initial) ) {
                    auto L = symbol_program(current_program_index(), (yyvsp[-3].string));
                    assert(L);
                    error_msg((yylsp[-3]), "FUNCTION %s already defined on line %d",
                              (yyvsp[-3].string), L->line);
                    YYERROR;
                  }
                  if( keyword_tok((yyvsp[-3].string), true) ) {
		    error_msg((yylsp[-3]), "FUNCTION %s is an intrinsic function",
			      (yyvsp[-3].string));
                    YYERROR;
                  }
                  current.udf_add(current_program_index());
                  if( nparse_error > 0 ) YYABORT;
                }
#line 16449 "parse.cc"
    break;

  case 25: /* function_id: FUNCTION '.' NAME program_as is PROTOTYPE '.'  */
#line 1486 "parse.y"
                {
                  cbl_unimplemented("FUNCTION PROTOTYPE");
                }
#line 16457 "parse.cc"
    break;

  case 35: /* opt_clause: opt_decimal  */
#line 1503 "parse.y"
                            {
		  cbl_unimplementedw("type FLOAT-DECIMAL was ignored");
		}
#line 16465 "parse.cc"
    break;

  case 38: /* opt_arith: ARITHMETIC is opt_arith_type  */
#line 1510 "parse.y"
                                             {
		  if( ! current.option((yyvsp[0].opt_arith)) ) {
		    error_msg((yylsp[0]), "unable to set ARITHMETIC option");
		  }
		}
#line 16475 "parse.cc"
    break;

  case 39: /* opt_arith_type: NATIVE  */
#line 1516 "parse.y"
                                  { (yyval.opt_arith) = cbl_options_t::native_e; }
#line 16481 "parse.cc"
    break;

  case 40: /* opt_arith_type: STANDARD  */
#line 1517 "parse.y"
                                  { (yyval.opt_arith) = cbl_options_t::standard_e; }
#line 16487 "parse.cc"
    break;

  case 41: /* opt_arith_type: "STANDARD-BINARY"  */
#line 1518 "parse.y"
                                  { (yyval.opt_arith) = cbl_options_t::standard_binary_e; }
#line 16493 "parse.cc"
    break;

  case 42: /* opt_arith_type: "STANDARD-DECIMAL"  */
#line 1519 "parse.y"
                                  { (yyval.opt_arith) = cbl_options_t::standard_decimal_e; }
#line 16499 "parse.cc"
    break;

  case 43: /* opt_round: DEFAULT ROUNDED mode is rounded_type  */
#line 1521 "parse.y"
                                                           {
                  current_rounded_mode((yyvsp[0].opt_round));
                }
#line 16507 "parse.cc"
    break;

  case 44: /* opt_entry: ENTRY_CONVENTION is COBOL  */
#line 1525 "parse.y"
                                          {
		  yywarn("ENTRY-CONVENTION IS COBOL, check");
		}
#line 16515 "parse.cc"
    break;

  case 45: /* opt_binary: "FLOAT-BINARY" default_kw is "HIGH-ORDER-LEFT"  */
#line 1530 "parse.y"
                {
		  cbl_unimplementedw("HIGH-ORDER-LEFT was ignored");
		  if( ! current.option_binary(cbl_options_t::high_order_left_e) ) {
		    error_msg((yylsp[-1]), "unable to set HIGH_ORDER_LEFT");
		  }
		}
#line 16526 "parse.cc"
    break;

  case 46: /* opt_binary: "FLOAT-BINARY" default_kw is "HIGH-ORDER-RIGHT"  */
#line 1537 "parse.y"
                {
		  cbl_unimplementedw("HIGH-ORDER-RIGHT was ignored");
		  if( ! current.option_binary(cbl_options_t::high_order_right_e) ) {
		    error_msg((yylsp[0]), "unable to set HIGH-ORDER-RIGHT");
		  }
		}
#line 16537 "parse.cc"
    break;

  case 49: /* opt_decimal: "FLOAT-DECIMAL" default_kw is "HIGH-ORDER-LEFT"  */
#line 1548 "parse.y"
                {
		  cbl_unimplementedw("HIGH-ORDER-LEFT was ignored");
		  if( ! current.option_decimal(cbl_options_t::high_order_left_e) ) {
		    error_msg((yylsp[0]), "unable to set HIGH-ORDER-LEFT");
		  }
		}
#line 16548 "parse.cc"
    break;

  case 50: /* opt_decimal: "FLOAT-DECIMAL" default_kw is "HIGH-ORDER-RIGHT"  */
#line 1555 "parse.y"
                {
		  cbl_unimplementedw("HIGH-ORDER-RIGHT was ignored");
		  if( ! current.option_decimal(cbl_options_t::high_order_right_e) ) {
		    error_msg((yylsp[0]), "unable to set HIGH-ORDER-RIGHT");
		  }
		}
#line 16559 "parse.cc"
    break;

  case 51: /* opt_decimal: "FLOAT-DECIMAL" default_kw is "BINARY-ENCODING"  */
#line 1562 "parse.y"
                {
		  cbl_unimplementedw("BINARY-ENCODING was ignored");
		  if( ! current.option(cbl_options_t::binary_encoding_e) ) {
		    error_msg((yylsp[0]), "unable to set BINARY-ENCODING option");
		  }
		}
#line 16570 "parse.cc"
    break;

  case 52: /* opt_decimal: "FLOAT-DECIMAL" default_kw is "DECIMAL-ENCODING"  */
#line 1569 "parse.y"
                {
		  cbl_unimplementedw("DECIMAL-ENCODING was ignored");
		  if( ! current.option(cbl_options_t::decimal_encoding_e) ) {
		    error_msg((yylsp[0]), "unable to set DECIMAL-ENCODING option");
		  }
		}
#line 16581 "parse.cc"
    break;

  case 53: /* opt_intermediate: INTERMEDIATE ROUNDING is round_between  */
#line 1577 "parse.y"
                                                              {
		  current.intermediate_round((yyvsp[0].opt_round));
		}
#line 16589 "parse.cc"
    break;

  case 54: /* opt_init: INITIALIZE opt_init_sects opt_section to opt_init_value  */
#line 1583 "parse.y"
                {
		  if( (yyvsp[-3].opt_init_sects).local ) {
		    current.initial_value(local_sect_e, (yyvsp[0].number));
		  }
		  if( (yyvsp[-3].opt_init_sects).working ) {
		    current.initial_value(working_sect_e, (yyvsp[0].number));
		  }
		}
#line 16602 "parse.cc"
    break;

  case 57: /* opt_init_sects: ALL  */
#line 1595 "parse.y"
                    { (yyval.opt_init_sects).local = (yyval.opt_init_sects).working = true; }
#line 16608 "parse.cc"
    break;

  case 58: /* opt_init_sects: opt_init_sect  */
#line 1596 "parse.y"
                              {
		  (yyval.opt_init_sects).local = (yyval.opt_init_sects).working = false;
		  switch((yyvsp[0].opt_init_sect)) {
		    case local_sect_e:
		      (yyval.opt_init_sects).local = true; break;
		    case working_sect_e:
		      (yyval.opt_init_sects).working = true; break;
		    default: gcc_unreachable();
		  }
		}
#line 16623 "parse.cc"
    break;

  case 59: /* opt_init_sects: opt_init_sects opt_init_sect  */
#line 1606 "parse.y"
                                             {
		  (yyval.opt_init_sects) = (yyvsp[-1].opt_init_sects);
		  switch((yyvsp[0].opt_init_sect)) {
		    case local_sect_e:
		      if( (yyval.opt_init_sects).local ) {
			error_msg((yylsp[0]), "LOCAL-STORAGE repeated");
		      }
		      (yyval.opt_init_sects).local = true; break;
		    case working_sect_e:
		      if( (yyval.opt_init_sects).working ) {
			error_msg((yylsp[0]), "WORKING-STORAGE repeated");
		      }
		      (yyval.opt_init_sects).working = true; break;
		    default: gcc_unreachable();
		  }
		}
#line 16644 "parse.cc"
    break;

  case 60: /* opt_init_sect: "LOCAL-STORAGE"  */
#line 1623 "parse.y"
                                { (yyval.opt_init_sect) = local_sect_e; }
#line 16650 "parse.cc"
    break;

  case 61: /* opt_init_sect: SCREEN  */
#line 1624 "parse.y"
                       { cbl_unimplemented("SCREEN SECTION"); }
#line 16656 "parse.cc"
    break;

  case 62: /* opt_init_sect: WORKING_STORAGE  */
#line 1625 "parse.y"
                                { (yyval.opt_init_sect) = working_sect_e; }
#line 16662 "parse.cc"
    break;

  case 63: /* opt_init_value: BINARY ZERO  */
#line 1627 "parse.y"
                            { (yyval.number) = constant_index(NULLS); }
#line 16668 "parse.cc"
    break;

  case 64: /* opt_init_value: "HIGH-VALUES"  */
#line 1628 "parse.y"
                            { (yyval.number) = constant_index(HIGH_VALUES); }
#line 16674 "parse.cc"
    break;

  case 65: /* opt_init_value: LITERAL  */
#line 1630 "parse.y"
                {
		  if( (yyvsp[0].literal).prefix[0] != 'X' ) {
		    error_msg((yylsp[0]), "hexadecimal literal required");
		  }
		  if( (yyvsp[0].literal).len != 1 ) {
		    error_msg((yylsp[0]), "1-byte hexadecimal literal required");
		  }
      char ach[16];
      sprintf(ach, "%d", (int)((yyvsp[0].literal).data[0]));
		  //auto f = new_literal($1.data);
		  auto f = new_literal(ach);
		  f = field_add((yylsp[0]), f);
		  (yyval.number) = field_index(f);
		}
#line 16693 "parse.cc"
    break;

  case 66: /* opt_init_value: "LOW-VALUES"  */
#line 1644 "parse.y"
                            { (yyval.number) = constant_index(LOW_VALUES); }
#line 16699 "parse.cc"
    break;

  case 67: /* opt_init_value: SPACES  */
#line 1645 "parse.y"
                            { (yyval.number) = constant_index(SPACES); }
#line 16705 "parse.cc"
    break;

  case 68: /* namestr: ctx_name  */
#line 1648 "parse.y"
                         {
                  (yyval.literal) = literal_of((yyvsp[0].string));
                  if( ! string_of((yyval.literal)) ) {
                    error_msg((yylsp[0]), "'%s' has embedded NUL", (yyval.literal).data);
                    YYERROR;
                  }
                }
#line 16717 "parse.cc"
    break;

  case 69: /* namestr: LITERAL  */
#line 1655 "parse.y"
                        {
                  if( (yyval.literal).prefix[0] != '\0' ) {
                    error_msg((yylsp[0]), "literal cannot use %s prefix in this context",
                              (yyval.literal).prefix);
                    YYERROR;
                  }
                  if( !is_cobol_word((yyval.literal).data) ) {
		    error_msg((yylsp[0]), "literal '%s' must be a COBOL or C identifier",
                              (yyval.literal).data);
                  }
                }
#line 16733 "parse.cc"
    break;

  case 70: /* program_attrs: %empty  */
#line 1668 "parse.y"
                        { (yyval.comminit).common = (yyval.comminit).initial = (yyval.comminit).recursive = false; }
#line 16739 "parse.cc"
    break;

  case 71: /* program_attrs: is comminits program_kw  */
#line 1669 "parse.y"
                                        { (yyval.comminit) = (yyvsp[-1].comminit); }
#line 16745 "parse.cc"
    break;

  case 73: /* comminits: comminits comminit  */
#line 1672 "parse.y"
                                   {
                  if( ((yyvsp[-1].comminit).initial && (yyvsp[0].comminit).recursive) ||
                      ((yyvsp[0].comminit).initial && (yyvsp[-1].comminit).recursive) ) {
		    auto loc = (yyvsp[-1].comminit).initial? (yylsp[-1]) : (yylsp[0]);
                    error_msg(loc, "INITIAL cannot be used with RECURSIVE");
                  }
                  (yyval.comminit) = (yyvsp[-1].comminit);
                  if( (yyvsp[0].comminit).common ) {
                    if( (yyvsp[-1].comminit).common ) {
                      error_msg((yylsp[0]), "COMMON repeated");
                    }
                    (yyval.comminit).common = (yyvsp[0].comminit).common;
                  }
                  if( (yyvsp[0].comminit).initial ) {
                    if( (yyvsp[-1].comminit).initial ) {
                      error_msg((yylsp[0]), "INITIAL repeated");
                    }
                    (yyval.comminit).initial = (yyvsp[0].comminit).initial;
                  }
                  if( (yyvsp[0].comminit).recursive ) {
                    if( (yyvsp[-1].comminit).recursive ) {
                      error_msg((yylsp[0]), "RECURSIVE repeated");
                    }
                    (yyval.comminit).recursive = (yyvsp[0].comminit).recursive;
                  }
                }
#line 16776 "parse.cc"
    break;

  case 74: /* comminit: COMMON  */
#line 1699 "parse.y"
                           {
                  if( program_level() == 0 ) { // PROGRAM-ID being parsed not added yet.
                    error_msg((yylsp[0]), "COMMON may be used only in a contained program");
                  }
                  (yyval.comminit).common = true;
                  (yyval.comminit).initial = (yyval.comminit).recursive = false;
                }
#line 16788 "parse.cc"
    break;

  case 75: /* comminit: "INITIAL"  */
#line 1706 "parse.y"
                           { (yyval.comminit).initial = true;  (yyval.comminit).common = (yyval.comminit).recursive = false;}
#line 16794 "parse.cc"
    break;

  case 76: /* comminit: RECURSIVE  */
#line 1707 "parse.y"
                           {
                  (yyval.comminit).recursive = true;  (yyval.comminit).common = (yyval.comminit).initial = false;
                }
#line 16802 "parse.cc"
    break;

  case 77: /* env_div: %empty  */
#line 1713 "parse.y"
                                    { current_division = environment_div_e; }
#line 16808 "parse.cc"
    break;

  case 78: /* env_div: "ENVIRONMENT DIVISION" '.'  */
#line 1714 "parse.y"
                                    { current_division = environment_div_e; }
#line 16814 "parse.cc"
    break;

  case 79: /* $@2: %empty  */
#line 1715 "parse.y"
                                    {
                  current_division = environment_div_e;
                }
#line 16822 "parse.cc"
    break;

  case 85: /* env_section: "INPUT-OUTPUT SECTION" '.' selects  */
#line 1726 "parse.y"
                                              { /* IBM requires FILE CONTROL.  */ }
#line 16828 "parse.cc"
    break;

  case 97: /* io_control_clause: SAME record area for_kw filenames  */
#line 1747 "parse.y"
                {
                  symbol_file_same_record_area( (yyvsp[0].files)->files );
                }
#line 16836 "parse.cc"
    break;

  case 98: /* io_control_clause: SAME smerge area for_kw filenames  */
#line 1751 "parse.y"
                {
                  symbol_file_same_record_area( (yyvsp[0].files)->files );
                }
#line 16844 "parse.cc"
    break;

  case 99: /* io_control_clause: APPLY COMMIT on field_list  */
#line 1755 "parse.y"
                {
                  cbl_unimplementedw("I-O-CONTROL APPLY COMMIT");
                }
#line 16852 "parse.cc"
    break;

  case 106: /* select: SELECT optional NAME select_clauses '.'  */
#line 1771 "parse.y"
                {
                  assert((yyvsp[-1].select_clauses).file);
                  cbl_file_t *file = (yyvsp[-1].select_clauses).file;

                  file->optional = (yyvsp[-3].boolean);
                  file->line = yylineno;
                  if( !namcpy((yylsp[-1]), file->name, (yyvsp[-2].string)) ) YYERROR;

                  if( ! ((yyvsp[-1].select_clauses).clauses & assign_clause_e) ) {
                    error_msg((yylsp[-2]), "ASSIGN clause missing for %s", file->name);
                  }

                  // key check
                  switch(file->org) {
                  case file_indexed_e:
                    // indexed file cannot have relative key
                    if( ((yyvsp[-1].select_clauses).clauses & relative_key_clause_e) != 0) {
                      assert(file->keys);
                      auto ikey = file->nkey - 1;
                      assert(file->keys[ikey].fields);
                      auto f = cbl_field_of(symbol_at(file->keys[ikey].fields[0]));
                      error_msg((yylsp[-2]), "INDEXED file %s cannot have RELATIVE key %s",
				file->name, f->name);
                      break; // because next message would be redundant
                    }
                    if( ((yyvsp[-1].select_clauses).clauses & record_key_clause_e) == 0 ) {
                      error_msg((yylsp[-2]), "INDEXED file %s has no RECORD KEY",
				file->name);
                    }
                    break;
                  case file_disorganized_e:
                    file->org = file_sequential_e;
                    __attribute__((fallthrough));
                  default:
                    if( ((yyvsp[-1].select_clauses).clauses & record_key_clause_e) != 0 ) {
                      assert(file->keys);
                      auto ikey = file->nkey - 1;
                      assert(file->keys[ikey].fields);
                      auto f = cbl_field_of(symbol_at(file->keys[ikey].fields[0]));
                      error_msg((yylsp[-2]), "%s file %s cannot have RECORD key %s",
				file_org_str(file->org), file->name, f->name);
                    }
                    break;
                  }

                  // access check
                  switch(file->access) {
                  case file_access_rnd_e:
                  case file_access_dyn_e:
                      if( is_sequential(file) ) {
                          error_msg((yylsp[-2]), "%s file %s cannot have ACCESS %s",
				    file_org_str(file->org), file->name,
				    file_access_str(file->access));
                      }
                      break;
                  default:
                    break;
                  }

                  // install file, and set record area's name
                  if( (file = file_add((yylsp[-2]), file)) == NULL ) YYERROR;
                  auto ifile = symbol_index(symbol_elem_of(file));
                  // update keys
                  for( auto p = file->keys;
                       p && p < file->keys + file->nkey; p++ )
                  {
                    if( p->name[0] == '\0' ) continue;
                    auto f = symbol_field(PROGRAM, 0, p->name);
                    cbl_field_of(f)->parent = ifile;
                    size_t isym = field_index(cbl_field_of(f));
                    update_symbol_map(symbol_at(isym));
                  }
                }
#line 16930 "parse.cc"
    break;

  case 107: /* select: SELECT optional NAME '.'  */
#line 1845 "parse.y"
                {
                  cbl_file_t file = protofile;

                  file.optional = (yyvsp[-2].boolean);
                  file.line = yylineno;
                  if( !namcpy((yylsp[-1]), file.name, (yyvsp[-1].string)) ) YYERROR;

                  if( file_add((yylsp[-1]), &file) == NULL ) YYERROR;
                }
#line 16944 "parse.cc"
    break;

  case 108: /* selected_name: external scalar  */
#line 1855 "parse.y"
                                { (yyval.refer) = (yyvsp[0].refer); }
#line 16950 "parse.cc"
    break;

  case 109: /* selected_name: external LITERAL  */
#line 1857 "parse.y"
                {
                  const char *name = string_of((yyvsp[0].literal));
                  if( ! name ) {
                    error_msg((yylsp[0]), "'%s' has embedded NUL", (yyvsp[0].literal).data);
                    YYERROR;
                  }
                  uint32_t len = (yyvsp[0].literal).len;
                  cbl_field_t field {
                               0, FldLiteralA, FldInvalid, quoted_e | constant_e,
                               0, 0, 0, nonarray, 0, "", 0, cbl_field_t::linkage_t(),
				 {len,len,0,0, (yyvsp[0].literal).data}, NULL };
                  field.attr |= literal_attr((yyvsp[0].literal).prefix);
                  (yyval.refer) = new cbl_refer_t( field_add((yylsp[0]), &field) );
                }
#line 16969 "parse.cc"
    break;

  case 112: /* select_clauses: select_clause  */
#line 1876 "parse.y"
                              { (yyval.select_clauses).clauses = (yyvsp[0].select_clause).clause; (yyval.select_clauses).file = (yyvsp[0].select_clause).file; }
#line 16975 "parse.cc"
    break;

  case 113: /* select_clauses: select_clauses select_clause  */
#line 1878 "parse.y"
                {
                  (yyval.select_clauses) = (yyvsp[-1].select_clauses);
                  // The default organization is sequential.
                  if( ((yyval.select_clauses).clauses & organization_clause_e) == 0 ) {
                    (yyval.select_clauses).file->org = file_sequential_e;
                  }
                  const bool exists = ((yyval.select_clauses).clauses & (yyvsp[0].select_clause).clause);
                  (yyval.select_clauses).clauses |= (yyvsp[0].select_clause).clause;

                  switch((yyvsp[0].select_clause).clause) {
                  case alt_key_clause_e:
                    assert( (yyvsp[0].select_clause).file->nkey == 1 );
                    if( (yyval.select_clauses).file->nkey++ == 0 ) {
                      // If no key yet exists, create room for it and the
                      // present alternate.
                      assert((yyval.select_clauses).file->keys == &cbl_file_t::no_key);
                      (yyval.select_clauses).file->keys = new cbl_file_key_t[++(yyval.select_clauses).file->nkey];
                    }
                    {
                      auto keys = new cbl_file_key_t[(yyval.select_clauses).file->nkey];
                      auto alt = std::copy((yyval.select_clauses).file->keys,
                                           (yyval.select_clauses).file->keys +
                                           (yyval.select_clauses).file->nkey - 1,
                                           keys);
                      // Assign the alternate key to the last element,
                      // and update the pointer.
                      *alt = (yyvsp[0].select_clause).file->keys[0];
                      delete[] (yyval.select_clauses).file->keys;
                      (yyval.select_clauses).file->keys = keys;
                    }
                    break;
                  case assign_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    (yyval.select_clauses).file->filename = (yyvsp[0].select_clause).file->filename;
                    break;
                  case collating_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    break;
                  case lock_mode_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    (yyval.select_clauses).file->lock = (yyvsp[0].select_clause).file->lock;
                    break;
                  case organization_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    (yyval.select_clauses).file->org = (yyvsp[0].select_clause).file->org;
                    break;
                  case padding_clause_e:
                  case reserve_clause_e:
                  case sharing_clause_e:
                  case record_delim_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    break;
                  case access_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    (yyval.select_clauses).file->access = (yyvsp[0].select_clause).file->access;
                    break;
                  case relative_key_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    if( (yyval.select_clauses).clauses & record_key_clause_e ) {
                      error_msg((yylsp[0]), "FILE %s is INDEXED, has no RELATIVE key",
                               (yyval.select_clauses).file->name);
                      YYERROR;
                    }
                    // fall thru
                  case record_key_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    if( ((yyval.select_clauses).clauses & relative_key_clause_e) &&
                         (yyvsp[0].select_clause).clause == record_key_clause_e ) {
                      error_msg((yylsp[0]), "FILE %s is RELATIVE, has no RECORD key",
                               (yyval.select_clauses).file->name);
                      YYERROR;
                    }
                    if( (yyval.select_clauses).file->nkey == 0 ) {
                      (yyval.select_clauses).file->nkey = (yyvsp[0].select_clause).file->nkey;
                      (yyval.select_clauses).file->keys = (yyvsp[0].select_clause).file->keys;
                    } else {
                      (yyval.select_clauses).file->keys[0] = (yyvsp[0].select_clause).file->keys[0];
                    }
                    break;
                  /* case password_clause_e: */
                  case file_status_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    (yyval.select_clauses).file->user_status = (yyvsp[0].select_clause).file->user_status;
                    (yyval.select_clauses).file->vsam_status = (yyvsp[0].select_clause).file->vsam_status;
                    break;
                  }
                  if( (yyval.select_clauses).file->lock.locked() ) {
                    if( (yyval.select_clauses).file->org == file_sequential_e &&
                        (yyval.select_clauses).file->lock.multiple ) {
                      error_msg((yylsp[0]), "SEQUENTIAL file cannot lock MULTIPLE records");
                    }
                  }

                  delete (yyvsp[0].select_clause).file;
                }
#line 17102 "parse.cc"
    break;

  case 127: /* access_clause: ACCESS mode is access_mode  */
#line 2018 "parse.y"
                {
                  (yyval.select_clause).clause = access_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->access = static_cast<cbl_file_access_t>((yyvsp[0].number));
                }
#line 17112 "parse.cc"
    break;

  case 128: /* access_mode: RANDOM  */
#line 2024 "parse.y"
                            { (yyval.number) = file_access_rnd_e; }
#line 17118 "parse.cc"
    break;

  case 129: /* access_mode: DYNAMIC  */
#line 2025 "parse.y"
                            { (yyval.number) = file_access_dyn_e; }
#line 17124 "parse.cc"
    break;

  case 130: /* access_mode: SEQUENTIAL  */
#line 2026 "parse.y"
                            { (yyval.number) = file_access_seq_e; }
#line 17130 "parse.cc"
    break;

  case 131: /* alt_key_clause: ALTERNATE record key is name key_source unique_key  */
#line 2030 "parse.y"
                {
                  (yyval.select_clause).clause = alt_key_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->nkey = 1;
                  if( (yyvsp[-1].fields) == NULL ) {
                    (yyval.select_clause).file->keys = new cbl_file_key_t(field_index((yyvsp[-2].field)),
                                                       (yyvsp[0].boolean));
                  } else {
                    (yyvsp[-2].field)->type  = FldLiteralA;
                    (yyvsp[-2].field)->data.initial = (yyvsp[-2].field)->name;
                    (yyvsp[-2].field)->attr |= record_key_e;
                    auto& name = *(yyvsp[-2].field);
                    (yyval.select_clause).file->keys = new cbl_file_key_t(name.name,
                                                       (yyvsp[-1].fields)->fields,
                                                       (yyvsp[0].boolean));
                  }
                }
#line 17152 "parse.cc"
    break;

  case 132: /* key_source: %empty  */
#line 2048 "parse.y"
                       { (yyval.fields) = NULL; }
#line 17158 "parse.cc"
    break;

  case 133: /* key_source: SOURCE is key_sources  */
#line 2049 "parse.y"
                                              { (yyval.fields) = (yyvsp[0].fields); }
#line 17164 "parse.cc"
    break;

  case 134: /* key_sources: name  */
#line 2051 "parse.y"
                     { (yyval.fields) = new field_list_t((yyvsp[0].field)); }
#line 17170 "parse.cc"
    break;

  case 135: /* key_sources: key_sources name  */
#line 2052 "parse.y"
                                 { (yyval.fields) = (yyvsp[-1].fields); (yyval.fields)->fields.push_back((yyvsp[0].field)); }
#line 17176 "parse.cc"
    break;

  case 136: /* unique_key: %empty  */
#line 2054 "parse.y"
                                { (yyval.boolean) = true; }
#line 17182 "parse.cc"
    break;

  case 137: /* unique_key: with DUPLICATES  */
#line 2055 "parse.y"
                                { (yyval.boolean) = false; }
#line 17188 "parse.cc"
    break;

  case 138: /* assign_clause: ASSIGN to selected_name  */
#line 2058 "parse.y"
                                                   {
                  (yyval.select_clause).clause = assign_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->filename = field_index((yyvsp[0].refer)->field);
                }
#line 17198 "parse.cc"
    break;

  case 139: /* assign_clause: ASSIGN to device_name USING name  */
#line 2063 "parse.y"
                                                 {
                  (yyval.select_clause).clause = assign_clause_e;
		  cbl_unimplemented("ASSIGN TO DEVICE");
		  YYERROR;
                }
#line 17208 "parse.cc"
    break;

  case 140: /* assign_clause: ASSIGN to device_name  */
#line 2068 "parse.y"
                                      {
                  (yyval.select_clause).clause = assign_clause_e;
		  cbl_unimplemented("ASSIGN TO DEVICE");
		  YYERROR;
                }
#line 17218 "parse.cc"
    break;

  case 141: /* assign_clause: ASSIGN USING name  */
#line 2073 "parse.y"
                                  {
                  (yyval.select_clause).clause = assign_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->filename = field_index((yyvsp[0].field));
                }
#line 17228 "parse.cc"
    break;

  case 142: /* collate_clause: collate_claus1  */
#line 2080 "parse.y"
                               {
                  (yyval.select_clause).clause = collating_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                }
#line 17237 "parse.cc"
    break;

  case 146: /* status_clause: file STATUS is name  */
#line 2091 "parse.y"
                {
                  (yyval.select_clause).clause = file_status_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->user_status = field_index((yyvsp[0].field));
                }
#line 17247 "parse.cc"
    break;

  case 147: /* status_clause: file STATUS is name name  */
#line 2097 "parse.y"
                {
                  (yyval.select_clause).clause = file_status_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->user_status = field_index((yyvsp[-1].field));
                  (yyval.select_clause).file->vsam_status = field_index((yyvsp[0].field));
                }
#line 17258 "parse.cc"
    break;

  case 148: /* lock_mode_clause: LOCK mode is lock_mode lock_how  */
#line 2107 "parse.y"
                {
                  (yyval.select_clause).clause = lock_mode_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->lock.multiple = (yyvsp[0].number) > 0;
                  if( ! (yyval.select_clause).file->lock.mode_set((yyvsp[-1].number)) ) {
		    error_msg((yylsp[-1]), "logic error: %s is not a file lock mode",
		              keyword_str((yyvsp[-1].number)) );
		  }
                }
#line 17272 "parse.cc"
    break;

  case 149: /* lock_how: %empty  */
#line 2116 "parse.y"
                       { (yyval.number) = 0; }
#line 17278 "parse.cc"
    break;

  case 150: /* lock_how: with LOCK_ON multiple records  */
#line 2117 "parse.y"
                                              { (yyval.number) = (yyvsp[-1].number); }
#line 17284 "parse.cc"
    break;

  case 151: /* lock_mode: MANUAL  */
#line 2119 "parse.y"
                          { (yyval.number) = MANUAL; }
#line 17290 "parse.cc"
    break;

  case 152: /* lock_mode: RECORD  */
#line 2120 "parse.y"
                          { (yyval.number) = RECORD; }
#line 17296 "parse.cc"
    break;

  case 153: /* lock_mode: AUTOMATIC  */
#line 2121 "parse.y"
                          { (yyval.number) = AUTOMATIC; }
#line 17302 "parse.cc"
    break;

  case 154: /* multiple: %empty  */
#line 2123 "parse.y"
                          { (yyval.number) = 0; }
#line 17308 "parse.cc"
    break;

  case 155: /* multiple: MULTIPLE  */
#line 2124 "parse.y"
                          { (yyval.number) = MULTIPLE; }
#line 17314 "parse.cc"
    break;

  case 158: /* org_clause: org_clause1  */
#line 2131 "parse.y"
                {
                  (yyval.select_clause).clause = organization_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->org = static_cast<cbl_file_org_t>((yyvsp[0].number));
                }
#line 17324 "parse.cc"
    break;

  case 161: /* org_clause1: org_is SEQUENTIAL  */
#line 2141 "parse.y"
                                       { (yyval.number) = file_sequential_e; }
#line 17330 "parse.cc"
    break;

  case 162: /* org_clause1: org_is LINE SEQUENTIAL  */
#line 2142 "parse.y"
                                       { (yyval.number) = file_line_sequential_e; }
#line 17336 "parse.cc"
    break;

  case 163: /* org_clause1: org_is RELATIVE  */
#line 2143 "parse.y"
                                       { (yyval.number) = file_relative_e; }
#line 17342 "parse.cc"
    break;

  case 164: /* org_clause1: org_is INDEXED  */
#line 2144 "parse.y"
                                       { (yyval.number) = file_indexed_e; }
#line 17348 "parse.cc"
    break;

  case 165: /* padding_clause: PADDING character is padding_char  */
#line 2152 "parse.y"
                {
                  (yyval.select_clause).clause = padding_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                }
#line 17357 "parse.cc"
    break;

  case 171: /* record_delim_clause: RECORD DELIMITER is "STANDARD ALPHABET"  */
#line 2166 "parse.y"
                {
                  (yyval.select_clause).clause = record_delim_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                }
#line 17366 "parse.cc"
    break;

  case 172: /* record_key_clause: RECORD key is name key_source  */
#line 2173 "parse.y"
                {
                  (yyval.select_clause).clause = record_key_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->nkey = 1;
                  if( (yyvsp[0].fields) == NULL ) {
                    (yyval.select_clause).file->keys = new cbl_file_key_t(field_index((yyvsp[-1].field)));
                  } else { // "special" not-literal literal: a key name
                    (yyvsp[-1].field)->type = FldLiteralA;
                    (yyvsp[-1].field)->data.initial = (yyvsp[-1].field)->name;
                    (yyvsp[-1].field)->attr |= record_key_e;
                    (yyval.select_clause).file->keys = new cbl_file_key_t((yyvsp[-1].field)->name,
                                                      (yyvsp[0].fields)->fields, true);
                  }
                }
#line 17385 "parse.cc"
    break;

  case 173: /* relative_key_clause: KEY is name  */
#line 2190 "parse.y"
                { // lexer returns KEY for RELATIVE ... NAME
                  (yyval.select_clause).clause = relative_key_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->nkey = 1;
                  (yyval.select_clause).file->keys = new cbl_file_key_t(field_index((yyvsp[0].field)));
                }
#line 17396 "parse.cc"
    break;

  case 174: /* reserve_clause: RESERVE "numeric literal" reserve_area  */
#line 2199 "parse.y"
                {
                  (yyval.select_clause).clause = reserve_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                }
#line 17405 "parse.cc"
    break;

  case 178: /* sharing_clause: SHARING with sharing_who  */
#line 2210 "parse.y"
                {
                  (yyval.select_clause).clause = sharing_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                }
#line 17414 "parse.cc"
    break;

  case 189: /* config_paragraph: "OBJECT COMPUTER" '.' NAME collating_sequence '.'  */
#line 2232 "parse.y"
                {
                  if( (yyvsp[-1].string) ) {
                    if( !current.collating_sequence((yyvsp[-1].string)) ) {
                      error_msg((yylsp[-1]), "collating sequence already defined as '%s'",
                                current.collating_sequence());
                      YYERROR;
                    }
                  }
                }
#line 17428 "parse.cc"
    break;

  case 194: /* repo_member: repo_class  */
#line 2249 "parse.y"
                { cbl_unimplemented("CLASS"); }
#line 17434 "parse.cc"
    break;

  case 195: /* repo_member: repo_interface  */
#line 2251 "parse.y"
                { cbl_unimplemented("INTERFACE"); }
#line 17440 "parse.cc"
    break;

  case 198: /* repo_member: repo_property  */
#line 2255 "parse.y"
                { cbl_unimplemented("PROPERTY"); }
#line 17446 "parse.cc"
    break;

  case 200: /* repo_as: %empty  */
#line 2260 "parse.y"
                            { (yyval.literal) = literal_t(); }
#line 17452 "parse.cc"
    break;

  case 201: /* repo_as: AS LITERAL  */
#line 2261 "parse.y"
                            { (yyval.literal) = (yyvsp[0].literal); }
#line 17458 "parse.cc"
    break;

  case 205: /* repo_func: FUNCTION repo_func_names INTRINSIC  */
#line 2271 "parse.y"
                {
		  auto namelocs( name_queue.pop() );
                  for( const auto& nameloc : namelocs ) {
                      current.repository_add(nameloc.name);
                  }
                }
#line 17469 "parse.cc"
    break;

  case 206: /* repo_func: FUNCTION ALL INTRINSIC  */
#line 2278 "parse.y"
                {
                  current.repository_add_all();
                }
#line 17477 "parse.cc"
    break;

  case 210: /* repo_func_name: NAME  */
#line 2287 "parse.y"
                     {
                  if( ! current.repository_add((yyvsp[0].string)) ) { // add intrinsic by name
                    auto token = current.udf_in((yyvsp[0].string));
                    if( !token ) {
                      error_msg((yylsp[0]), "%s is not defined here as a user-defined function",
                                (yyvsp[0].string));
                      current.udf_dump();
                      YYERROR;
                    }
                    auto e = symbol_function(0, (yyvsp[0].string));
                    assert(e);
                    current.repository_add(symbol_index(e)); // add UDF to repository
                  }
                }
#line 17496 "parse.cc"
    break;

  case 211: /* repo_program: "Program" NAME repo_as  */
#line 2304 "parse.y"
                {
                  size_t parent = 0;
                  auto program = symbol_label( PROGRAM, LblProgram, 0, (yyvsp[-1].string) );
                  if( ! program ) {
                    if( (yyvsp[0].literal).empty() ) {
                      error_msg((yylsp[0]), "'%s' does not name an earlier program", (yyvsp[-1].string));
                      YYERROR;
                    }
                    program = symbol_label( PROGRAM, LblProgram, 0,
                                            "", (yyvsp[0].literal).data );
                  }
                  if( ! program ) {
                    error_msg((yylsp[0]), "'%s' does not name an earlier program",
                             (yyvsp[0].literal).data);
                    YYERROR;
                  }
                  assert(program);
                  parent = symbol_index(symbol_elem_of(program));
                  // Literal field whose parent is the the aliased program.
                  cbl_field_t prog = {};
		  prog.type = FldLiteralA;
		  prog.attr = quoted_e;
		  prog.parent = parent;
		  prog.data.initial = (yyvsp[0].literal).data;
                  namcpy((yylsp[-1]), prog.name, (yyvsp[-1].string));
                  if( ! prog.data.initial ) {
                    assert(program);
                    prog.data.initial = program->name;
                  }
                  auto e = symbol_field_add(PROGRAM, &prog);
                  symbol_field_location(symbol_index(e), (yylsp[-1]));
                }
#line 17533 "parse.cc"
    break;

  case 214: /* with_debug: with DEBUGGING MODE  */
#line 2342 "parse.y"
                                    {
                  if( ! set_debug(true) ) {
                    error_msg((yylsp[-1]), "DEBUGGING MODE valid only in fixed format");
                  }
                }
#line 17543 "parse.cc"
    break;

  case 215: /* collating_sequence: %empty  */
#line 2349 "parse.y"
                           { (yyval.string) = NULL; }
#line 17549 "parse.cc"
    break;

  case 216: /* collating_sequence: "Program" COLLATING SEQUENCE is NAME  */
#line 2350 "parse.y"
                                                            { (yyval.string) = (yyvsp[0].string); }
#line 17555 "parse.cc"
    break;

  case 217: /* collating_sequence: "Program" SEQUENCE is NAME  */
#line 2351 "parse.y"
                                                            { (yyval.string) = (yyvsp[0].string); }
#line 17561 "parse.cc"
    break;

  case 218: /* collating_sequence: COLLATING SEQUENCE is NAME  */
#line 2352 "parse.y"
                                                            { (yyval.string) = (yyvsp[0].string); }
#line 17567 "parse.cc"
    break;

  case 219: /* collating_sequence: SEQUENCE is NAME  */
#line 2353 "parse.y"
                                                            { (yyval.string) = (yyvsp[0].string); }
#line 17573 "parse.cc"
    break;

  case 224: /* special_name: ALPHABET NAME is alphabet_name  */
#line 2364 "parse.y"
                {
                  if( !(yyvsp[0].alphasym) ) YYERROR;
                  assert((yyvsp[0].alphasym)); // already in symbol table
                  if( !namcpy((yylsp[-2]), (yyvsp[0].alphasym)->name, (yyvsp[-2].string)) ) YYERROR;
                  if( yydebug ) (yyvsp[0].alphasym)->dump();
                }
#line 17584 "parse.cc"
    break;

  case 225: /* special_name: CLASS NAME is domains  */
#line 2371 "parse.y"
                {
                  struct cbl_field_t field = { 0,
                    FldClass, FldInvalid, 0, 0, 0, 0, nonarray, yylineno, "",
                    0, cbl_field_t::linkage_t(),
		    {}, NULL };
                  if( !namcpy((yylsp[-2]), field.name, (yyvsp[-2].string)) ) YYERROR;

                  struct cbl_domain_t *domain =
                    new cbl_domain_t[ domains.size() + 1 ] ;

                  std::copy(domains.begin(), domains.end(), domain);

                  field.data.false_value_as((yyvsp[0].false_domain));
                  field.data.domain_as(domain);
                  domains.clear();

                  if( field_add((yylsp[-2]), &field) == NULL ) {
                    dbgmsg("failed class");
                    YYERROR;
                  }
                }
#line 17610 "parse.cc"
    break;

  case 226: /* special_name: CURRENCY sign is LITERAL with picture_sym  */
#line 2393 "parse.y"
                {
                // The COBOL is "CURRENCY sign SYMBOL PICTURE symbol"
                // In our processing, we flip the order, and refer to
                // symbol_currency_add (symbol, sign-string). 'symbol' is the
                // character in the PICTURE string, and 'sign' is the substitution
                // that gets made in memory.
                  if( ! string_of((yyvsp[-2].literal)) ) {
                    error_msg((yylsp[-2]), "'%s' has embedded NUL", (yyvsp[-2].literal).data);
                    YYERROR;
                  }
                symbol_currency_add( (yyvsp[0].string), (yyvsp[-2].literal).data );
                }
#line 17627 "parse.cc"
    break;

  case 227: /* special_name: DECIMAL_POINT is COMMA  */
#line 2406 "parse.y"
                {
                  symbol_decimal_point_set(',');
                }
#line 17635 "parse.cc"
    break;

  case 228: /* special_name: LOCALE NAME is locale_spec  */
#line 2410 "parse.y"
                {
                  current.locale((yyvsp[-2].string), (yyvsp[0].string));
                  cbl_unimplemented("LOCALE syntax");
                }
#line 17644 "parse.cc"
    break;

  case 230: /* special_name: SYMBOLIC characters symbolic is_alphabet  */
#line 2417 "parse.y"
                {
                  cbl_unimplemented("SYMBOLIC syntax");
                }
#line 17652 "parse.cc"
    break;

  case 231: /* locale_spec: NAME  */
#line 2421 "parse.y"
                        { (yyval.string) = (yyvsp[0].string); }
#line 17658 "parse.cc"
    break;

  case 232: /* locale_spec: LITERAL  */
#line 2422 "parse.y"
                        { (yyval.string) = string_of((yyvsp[0].literal)); }
#line 17664 "parse.cc"
    break;

  case 237: /* dev_mnemonic: device_name is NAME  */
#line 2433 "parse.y"
                {
                  cbl_special_name_t special = { (yyvsp[-2].special_type).token, (yyvsp[-2].special_type).id };
                  if( !namcpy((yylsp[0]), special.name, (yyvsp[0].string)) ) YYERROR;

                  const char *filename;

                  switch( special.id ) {
                  case STDIN_e: case SYSIN_e: case SYSIPT_e:
                    filename = "/dev/stdin";
                    break;
                  case STDOUT_e: case SYSOUT_e:
                  case SYSLIST_e: case SYSLST_e: case CONSOLE_e:
                    filename ="/dev/stdout";
                    break;
                  case STDERR_e: case SYSPUNCH_e: case SYSPCH_e: case SYSERR_e:
                    filename ="/dev/stderr";
                    break;
                  default:
                    filename ="/dev/null";
                    break;
                  }

                  special.filename = symbol_index(symbol_literalA(0, filename));

                  symbol_special_add(PROGRAM, &special);
                }
#line 17695 "parse.cc"
    break;

  case 238: /* dev_mnemonic: NAME is NAME  */
#line 2460 "parse.y"
                {
		  static const std::map< std::string, special_name_t > fujitsus
		  { // Fujitsu calls these "function names", not device names
		    { "ARGUMENT-NUMBER", ARG_NUM_e },
		    { "ARGUMENT-VALUE", ARG_VALUE_e } ,
		    { "ENVIRONMENT-NAME", ENV_NAME_e },
		    { "ENVIRONMENT-VALUE", ENV_VALUE_e },
		  };
		  std::string device((yyvsp[-2].string));
		  std::transform((yyvsp[-2].string), (yyvsp[-2].string) + strlen((yyvsp[-2].string)),
		                 device.begin(), toupper);
		  auto p = fujitsus.find(device.c_str());
		  if( p == fujitsus.end() ) {
		    error_msg((yylsp[-2]), "%s is not a device name");
		  }

                  cbl_special_name_t special = { 0, p->second };
                  if( !namcpy((yylsp[0]), special.name, (yyvsp[0].string)) ) YYERROR;

                  symbol_special_add(PROGRAM, &special);
		}
#line 17721 "parse.cc"
    break;

  case 239: /* device_name: SYSIN  */
#line 2483 "parse.y"
                                { (yyval.special_type).token = SYSIN; (yyval.special_type).id = SYSIN_e; }
#line 17727 "parse.cc"
    break;

  case 240: /* device_name: SYSIPT  */
#line 2484 "parse.y"
                                { (yyval.special_type).token = SYSIPT; (yyval.special_type).id = SYSIPT_e; }
#line 17733 "parse.cc"
    break;

  case 241: /* device_name: SYSOUT  */
#line 2485 "parse.y"
                                { (yyval.special_type).token = SYSOUT; (yyval.special_type).id = SYSOUT_e; }
#line 17739 "parse.cc"
    break;

  case 242: /* device_name: SYSLIST  */
#line 2486 "parse.y"
                                { (yyval.special_type).token = SYSLIST; (yyval.special_type).id = SYSLIST_e; }
#line 17745 "parse.cc"
    break;

  case 243: /* device_name: SYSLST  */
#line 2487 "parse.y"
                                { (yyval.special_type).token = SYSLST; (yyval.special_type).id = SYSLST_e; }
#line 17751 "parse.cc"
    break;

  case 244: /* device_name: SYSPUNCH  */
#line 2488 "parse.y"
                                { (yyval.special_type).token = SYSPUNCH; (yyval.special_type).id = SYSPUNCH_e; }
#line 17757 "parse.cc"
    break;

  case 245: /* device_name: SYSPCH  */
#line 2489 "parse.y"
                                { (yyval.special_type).token = SYSPCH; (yyval.special_type).id = SYSPCH_e; }
#line 17763 "parse.cc"
    break;

  case 246: /* device_name: CONSOLE  */
#line 2490 "parse.y"
                                { (yyval.special_type).token = CONSOLE; (yyval.special_type).id = CONSOLE_e; }
#line 17769 "parse.cc"
    break;

  case 247: /* device_name: C01  */
#line 2491 "parse.y"
                                { (yyval.special_type).token = C01; (yyval.special_type).id = C01_e; }
#line 17775 "parse.cc"
    break;

  case 248: /* device_name: C02  */
#line 2492 "parse.y"
                                { (yyval.special_type).token = C02; (yyval.special_type).id = C02_e; }
#line 17781 "parse.cc"
    break;

  case 249: /* device_name: C03  */
#line 2493 "parse.y"
                                { (yyval.special_type).token = C03; (yyval.special_type).id = C03_e; }
#line 17787 "parse.cc"
    break;

  case 250: /* device_name: C04  */
#line 2494 "parse.y"
                                { (yyval.special_type).token = C04; (yyval.special_type).id = C04_e; }
#line 17793 "parse.cc"
    break;

  case 251: /* device_name: C05  */
#line 2495 "parse.y"
                                { (yyval.special_type).token = C05; (yyval.special_type).id = C05_e; }
#line 17799 "parse.cc"
    break;

  case 252: /* device_name: C06  */
#line 2496 "parse.y"
                                { (yyval.special_type).token = C06; (yyval.special_type).id = C06_e; }
#line 17805 "parse.cc"
    break;

  case 253: /* device_name: C07  */
#line 2497 "parse.y"
                                { (yyval.special_type).token = C07; (yyval.special_type).id = C07_e; }
#line 17811 "parse.cc"
    break;

  case 254: /* device_name: C08  */
#line 2498 "parse.y"
                                { (yyval.special_type).token = C08; (yyval.special_type).id = C08_e; }
#line 17817 "parse.cc"
    break;

  case 255: /* device_name: C09  */
#line 2499 "parse.y"
                                { (yyval.special_type).token = C09; (yyval.special_type).id = C09_e; }
#line 17823 "parse.cc"
    break;

  case 256: /* device_name: C10  */
#line 2500 "parse.y"
                                { (yyval.special_type).token = C10; (yyval.special_type).id = C10_e; }
#line 17829 "parse.cc"
    break;

  case 257: /* device_name: C11  */
#line 2501 "parse.y"
                                { (yyval.special_type).token = C11; (yyval.special_type).id = C11_e; }
#line 17835 "parse.cc"
    break;

  case 258: /* device_name: C12  */
#line 2502 "parse.y"
                                { (yyval.special_type).token = C12; (yyval.special_type).id = C12_e; }
#line 17841 "parse.cc"
    break;

  case 259: /* device_name: CSP  */
#line 2503 "parse.y"
                                { (yyval.special_type).token = CSP; (yyval.special_type).id = CSP_e; }
#line 17847 "parse.cc"
    break;

  case 260: /* device_name: S01  */
#line 2504 "parse.y"
                                { (yyval.special_type).token = S01; (yyval.special_type).id = S01_e; }
#line 17853 "parse.cc"
    break;

  case 261: /* device_name: S02  */
#line 2505 "parse.y"
                                { (yyval.special_type).token = S02; (yyval.special_type).id = S02_e; }
#line 17859 "parse.cc"
    break;

  case 262: /* device_name: S03  */
#line 2506 "parse.y"
                                { (yyval.special_type).token = S03; (yyval.special_type).id = S03_e; }
#line 17865 "parse.cc"
    break;

  case 263: /* device_name: S04  */
#line 2507 "parse.y"
                                { (yyval.special_type).token = S04; (yyval.special_type).id = S04_e; }
#line 17871 "parse.cc"
    break;

  case 264: /* device_name: S05  */
#line 2508 "parse.y"
                                { (yyval.special_type).token = S05; (yyval.special_type).id = S05_e; }
#line 17877 "parse.cc"
    break;

  case 265: /* device_name: "AFP 5A"  */
#line 2509 "parse.y"
                                { (yyval.special_type).token = AFP_5A; (yyval.special_type).id = AFP_5A_e; }
#line 17883 "parse.cc"
    break;

  case 266: /* device_name: STDIN  */
#line 2510 "parse.y"
                                { (yyval.special_type).token = STDIN; (yyval.special_type).id = STDIN_e; }
#line 17889 "parse.cc"
    break;

  case 267: /* device_name: STDOUT  */
#line 2511 "parse.y"
                                { (yyval.special_type).token = STDOUT; (yyval.special_type).id = STDOUT_e; }
#line 17895 "parse.cc"
    break;

  case 268: /* device_name: STDERR  */
#line 2512 "parse.y"
                                { (yyval.special_type).token = STDERR; (yyval.special_type).id = STDERR_e; }
#line 17901 "parse.cc"
    break;

  case 269: /* alphabet_name: "STANDARD ALPHABET"  */
#line 2515 "parse.y"
                                   { (yyval.alphasym) = alphabet_add((yylsp[0]), ASCII_e); }
#line 17907 "parse.cc"
    break;

  case 270: /* alphabet_name: NATIVE  */
#line 2516 "parse.y"
                                   { (yyval.alphasym) = alphabet_add((yylsp[0]), EBCDIC_e); }
#line 17913 "parse.cc"
    break;

  case 271: /* alphabet_name: EBCDIC  */
#line 2517 "parse.y"
                                   { (yyval.alphasym) = alphabet_add((yylsp[0]), EBCDIC_e); }
#line 17919 "parse.cc"
    break;

  case 272: /* alphabet_name: alphabet_seqs  */
#line 2519 "parse.y"
                {
                  (yyval.alphasym) = cbl_alphabet_of(symbol_alphabet_add(PROGRAM, (yyvsp[0].alphasym)));
                }
#line 17927 "parse.cc"
    break;

  case 273: /* alphabet_name: error  */
#line 2523 "parse.y"
                {
                  error_msg((yylsp[0]), "code-name-1 may be STANDARD-1, STANDARD-2, "
                            "NATIVE, OR EBCDIC");
                  (yyval.alphasym) = NULL;
                }
#line 17937 "parse.cc"
    break;

  case 274: /* alphabet_seqs: alphabet_seq  */
#line 2536 "parse.y"
                {
                  (yyval.alphasym) = new cbl_alphabet_t((yylsp[0]), custom_encoding_e);

                  if( !(yyvsp[0].colseq).low || (yyvsp[0].colseq).also ) {
                    error_msg((yylsp[0]), "syntax error at ALSO");
                    YYERROR;
                  }
                  (yyval.alphasym)->add_sequence((yylsp[0]), (yyvsp[0].colseq).low);
                  size_t len = (yyvsp[0].colseq).low == nul_string()? 1 : strlen((const char*)(yyvsp[0].colseq).low);
                  assert(len > 0);
                  (yyval.alphasym)->add_interval((yylsp[0]), (yyvsp[0].colseq).low[--len], (yyvsp[0].colseq).high[0]);
                  (yyval.alphasym)->add_sequence((yylsp[0]), (yyvsp[0].colseq).high);
                }
#line 17955 "parse.cc"
    break;

  case 275: /* alphabet_seqs: alphabet_seqs alphabet_seq  */
#line 2550 "parse.y"
                {
                  // ALSO x'00' is valid, but in that case the low pointer is NULL
                  if( !(yyvsp[0].colseq).low ) {
                    (yyval.alphasym)->also((yylsp[0]), (yyvsp[0].colseq).also);
                  } else {
                    (yyval.alphasym)->add_sequence((yylsp[0]), (yyvsp[0].colseq).low);
                    size_t len = (yyvsp[0].colseq).low == nul_string()? 1 : strlen((const char*)(yyvsp[0].colseq).low);
                    assert(len > 0);
                    (yyval.alphasym)->add_interval((yylsp[0]), (yyvsp[0].colseq).low[--len], (yyvsp[0].colseq).high[0]);
                    (yyval.alphasym)->add_sequence((yylsp[0]), (yyvsp[0].colseq).high);
                  }
                }
#line 17972 "parse.cc"
    break;

  case 276: /* alphabet_seq: alphabet_lit  */
#line 2564 "parse.y"
                {
                  (yyval.colseq).also = 0;
                  if( (yyvsp[0].literal).len == 1 && (yyvsp[0].literal).data[0] == '\0' ) {
                    (yyval.colseq).high = (yyval.colseq).low = nul_string();
                  } else {
                    size_t size = 1 + (yyvsp[0].literal).len;
                    (yyval.colseq).low = new unsigned char[size];
                    memcpy((yyval.colseq).low, (yyvsp[0].literal).data, size);
                    (yyval.colseq).high = (yyval.colseq).low + size - 1;
                    assert((yyval.colseq).high[0] == '\0');
                  }
                }
#line 17989 "parse.cc"
    break;

  case 277: /* alphabet_seq: alphabet_lit THRU alphabet_lit  */
#line 2577 "parse.y"
                {
                  (yyval.colseq).also = 0;
                  size_t size = 1 + (yyvsp[-2].literal).len;
                  if( (yyvsp[-2].literal).len == 1 && (yyvsp[-2].literal).data[0] == '\0' ) {
                    (yyval.colseq).low = nul_string();
                  } else {
                    (yyval.colseq).low = new unsigned char[size];
                    memcpy((yyval.colseq).low, (yyvsp[-2].literal).data, size);
                  }
                  assert((yyvsp[0].literal).len > 0);
                  assert((yyvsp[0].literal).data[0] != '\0');
                  size = 1 + (yyvsp[0].literal).len;
                  (yyval.colseq).high = new unsigned char[size];
                  memcpy((yyval.colseq).high, (yyvsp[0].literal).data, size);
                }
#line 18009 "parse.cc"
    break;

  case 278: /* alphabet_seq: ALSO alphabet_etc  */
#line 2592 "parse.y"
                                  { (yyval.colseq) = {}; (yyval.colseq).also = (yyvsp[0].number); }
#line 18015 "parse.cc"
    break;

  case 279: /* alphabet_etc: alphabet_lit  */
#line 2595 "parse.y"
                {
                  if( (yyvsp[0].literal).len > 1 ) {
                    error_msg((yylsp[0]), "'%c' can be only a single letter", (yyvsp[0].literal).data);
                    YYERROR;
                  }
                  (yyval.number) = (unsigned char)(yyvsp[0].literal).data[0];
                }
#line 18027 "parse.cc"
    break;

  case 280: /* alphabet_etc: spaces_etc  */
#line 2602 "parse.y"
                           {
                  // For figurative constants, pass the synmbol table index,
                  // marked with the high bit.
                  static const auto bits = sizeof((yyval.number)) * 8 - 1;
                  (yyval.number) = 1;
                  (yyval.number) = (yyval.number) << bits;
                  (yyval.number) |= constant_index((yyvsp[0].number));
                }
#line 18040 "parse.cc"
    break;

  case 281: /* alphabet_lit: LITERAL  */
#line 2611 "parse.y"
                        { (yyval.literal) = (yyvsp[0].literal); assert((yyval.literal).len > 0); }
#line 18046 "parse.cc"
    break;

  case 282: /* alphabet_lit: "numeric literal"  */
#line 2612 "parse.y"
                        {
                  assert( (yyvsp[0].numstr).radix == decimal_e);
                  (yyval.literal) = literal_of((yyvsp[0].numstr).string);
                }
#line 18055 "parse.cc"
    break;

  case 283: /* upsi: UPSI is NAME  */
#line 2619 "parse.y"
                {
                  assert((yyvsp[-2].string));
                  size_t parent = symbol_index(symbol_field(0,0,"UPSI-0"));
                  cbl_field_t *field = field_alloc((yylsp[0]), FldSwitch, parent, (yyvsp[0].string));
                  if( !field ) YYERROR;
                  field->attr = constant_e;
                  field->data.initial = (yyvsp[-2].string);
                }
#line 18068 "parse.cc"
    break;

  case 284: /* upsi: UPSI is NAME upsi_entry  */
#line 2628 "parse.y"
                {
                  assert((yyvsp[-3].string));
                  size_t parent = symbol_index(symbol_field(0,0,"UPSI-0"));
                  cbl_field_t *field = field_alloc((yylsp[-1]), FldSwitch, parent, (yyvsp[-1].string));
                  if( !field ) YYERROR;
                  field->attr = constant_e;
                  field->data.initial = (yyvsp[-3].string);

                  assert('0' <= (yyvsp[-3].string)[0] && (yyvsp[-3].string)[0] < '8');
                  const uint32_t bitn = (yyvsp[-3].string)[0] - '0', value = (1 << bitn);

                  if( (yyvsp[0].switches).on ) {
                    cbl_field_t *on = field_alloc((yylsp[-1]), FldSwitch, parent, (yyvsp[0].switches).on);
                    if( !on ) YYERROR;
                    on->data = new cbl_upsi_mask_t(true, value);
                  }
                  if( (yyvsp[0].switches).off ) {
                    cbl_field_t *off = field_alloc((yylsp[-1]), FldSwitch, parent, (yyvsp[0].switches).off);
                    if( !off ) YYERROR;
                    off->data = new cbl_upsi_mask_t(false, value);
                  }
                }
#line 18095 "parse.cc"
    break;

  case 285: /* upsi: UPSI upsi_entry  */
#line 2651 "parse.y"
                {
                  size_t parent = symbol_index(symbol_field(0,0,"UPSI-0"));
                  assert('0' <= (yyvsp[-1].string)[0] && (yyvsp[-1].string)[0] < '8');
                  const uint32_t bitn = (yyvsp[-1].string)[0] - '0', value = (1 << bitn);

                  if( (yyvsp[0].switches).on ) {
                    cbl_field_t *on = field_alloc((yyvsp[0].switches).loc, FldSwitch, parent, (yyvsp[0].switches).on);
                    if( !on ) YYERROR;
                    on->data = new cbl_upsi_mask_t(true, value);
                  }
                  if( (yyvsp[0].switches).off ) {
                    cbl_field_t *off = field_alloc((yyvsp[0].switches).loc, FldSwitch, parent, (yyvsp[0].switches).off);
                    if( !off ) YYERROR;
                    off->data = new cbl_upsi_mask_t(false, value);
                  }
                }
#line 18116 "parse.cc"
    break;

  case 286: /* upsi_entry: ON status is NAME  */
#line 2669 "parse.y"
                {
                  (yyval.switches).loc = (yylsp[0]);
                  (yyval.switches).on  = (yyvsp[0].string);
                  (yyval.switches).off = NULL;
                }
#line 18126 "parse.cc"
    break;

  case 287: /* upsi_entry: OFF status is NAME  */
#line 2675 "parse.y"
                {
                  (yyval.switches).loc = (yylsp[0]);
                  (yyval.switches).on  = NULL;
                  (yyval.switches).off = (yyvsp[0].string);
                }
#line 18136 "parse.cc"
    break;

  case 288: /* upsi_entry: OFF status is NAME ON status is NAME  */
#line 2681 "parse.y"
                {
                  (yyval.switches).loc = (yylsp[-4]);
                  (yyval.switches).on  = (yyvsp[0].string);
                  (yyval.switches).off = (yyvsp[-4].string);
                }
#line 18146 "parse.cc"
    break;

  case 289: /* upsi_entry: ON status is NAME OFF status is NAME  */
#line 2687 "parse.y"
                {
                  (yyval.switches).loc = (yylsp[-4]);
                  (yyval.switches).on =  (yyvsp[-4].string);
                  (yyval.switches).off = (yyvsp[0].string);
                }
#line 18156 "parse.cc"
    break;

  case 290: /* picture_sym: %empty  */
#line 2694 "parse.y"
                                      { (yyval.string) = NULL; }
#line 18162 "parse.cc"
    break;

  case 291: /* picture_sym: PICTURE SYMBOL LITERAL  */
#line 2695 "parse.y"
                                            {
                  if( ! string_of((yyvsp[0].literal)) ) {
                    error_msg((yylsp[0]), "'%s' has embedded NUL", (yyvsp[0].literal).data);
                    YYERROR;
                  }
                  (yyval.string) = string_of((yyvsp[0].literal));
                }
#line 18174 "parse.cc"
    break;

  case 293: /* domains: domains domain  */
#line 2711 "parse.y"
                               { (yyval.false_domain) = (yyvsp[-1].false_domain)? (yyvsp[-1].false_domain) : (yyvsp[0].false_domain); }
#line 18180 "parse.cc"
    break;

  case 294: /* domain: all LITERAL  */
#line 2715 "parse.y"
                {
                  if( ! string_of((yyvsp[0].literal)) ) {
		    gcc_location_set((yylsp[0]));
                    yywarn("'%s' has embedded NUL", (yyvsp[0].literal).data);
                  }
                  (yyval.false_domain) = NULL;
                  cbl_domain_t domain((yylsp[0]), (yyvsp[-1].boolean), (yyvsp[0].literal).len, (yyvsp[0].literal).data);
                  domains.push_back(domain);
                }
#line 18194 "parse.cc"
    break;

  case 295: /* domain: all LITERAL THRU all LITERAL  */
#line 2725 "parse.y"
                {
                  if( ! string_of((yyvsp[-3].literal)) ) {
                    yywarn("'%s' has embedded NUL", (yyvsp[-3].literal).data);
                  }
                  if( ! string_of((yyvsp[0].literal)) ) {
                    yywarn("'%s' has embedded NUL", (yyvsp[0].literal).data);
                  }
                  (yyval.false_domain) = NULL;
                  cbl_domain_elem_t first((yylsp[-3]), (yyvsp[-4].boolean), (yyvsp[-3].literal).len, (yyvsp[-3].literal).data),
                                     last((yylsp[0]), (yyvsp[-1].boolean), (yyvsp[0].literal).len, (yyvsp[0].literal).data);
                  domains.push_back(cbl_domain_t(first, last));
                }
#line 18211 "parse.cc"
    break;

  case 296: /* domain: all "numeric literal"  */
#line 2738 "parse.y"
                {
                  (yyval.false_domain) = NULL;
                  cbl_domain_t dom((yylsp[0]), (yyvsp[-1].boolean), strlen((yyvsp[0].numstr).string), (yyvsp[0].numstr).string, true);
                  domains.push_back(dom);
                }
#line 18221 "parse.cc"
    break;

  case 297: /* domain: all "numeric literal" THRU all "numeric literal"  */
#line 2744 "parse.y"
                {
                  (yyval.false_domain) = NULL;
                  cbl_domain_elem_t first((yylsp[-3]), (yyvsp[-4].boolean), strlen((yyvsp[-3].numstr).string), (yyvsp[-3].numstr).string, true),
		                     last((yylsp[0]), (yyvsp[-1].boolean), strlen((yyvsp[0].numstr).string), (yyvsp[0].numstr).string, true);
                  domains.push_back(cbl_domain_t(first, last));
                }
#line 18232 "parse.cc"
    break;

  case 298: /* domain: all reserved_value  */
#line 2750 "parse.y"
                                   {
                  (yyval.false_domain) = NULL;
                  if( (yyvsp[0].number) == NULLS ) YYERROR;
                  auto value = constant_of(constant_index((yyvsp[0].number)))->data.initial;
                  struct cbl_domain_t domain( (yylsp[0]), (yyvsp[-1].boolean), strlen(value), value );
                  domains.push_back(domain);
                }
#line 18244 "parse.cc"
    break;

  case 299: /* domain: all reserved_value THRU all LITERAL  */
#line 2757 "parse.y"
                                                                        {
                  if( ! string_of((yyvsp[0].literal)) ) {
                    yywarn("'%s' has embedded NUL", (yyvsp[0].literal).data);
                  }
                  (yyval.false_domain) = NULL;
                  if( (yyvsp[-3].number) == NULLS ) YYERROR;
                  auto value = constant_of(constant_index((yyvsp[-3].number)))->data.initial;
                  cbl_domain_elem_t first((yylsp[-3]), (yyvsp[-4].boolean), strlen(value), value),
                                     last((yylsp[0]), (yyvsp[-1].boolean), (yyvsp[0].literal).len, (yyvsp[0].literal).data);
                  domains.push_back(cbl_domain_t(first, last));
                }
#line 18260 "parse.cc"
    break;

  case 300: /* domain: all reserved_value THRU all "numeric literal"  */
#line 2768 "parse.y"
                                                                       {
                  (yyval.false_domain) = NULL;
                  if( (yyvsp[-3].number) == NULLS ) YYERROR;
                  auto value = constant_of(constant_index((yyvsp[-3].number)))->data.initial;
                  cbl_domain_elem_t first((yylsp[-3]), (yyvsp[-4].boolean), strlen(value), value, true),
                                     last((yylsp[0]), (yyvsp[-1].boolean), strlen((yyvsp[0].numstr).string), (yyvsp[0].numstr).string, true);
                  domains.push_back(cbl_domain_t(first, last));
                }
#line 18273 "parse.cc"
    break;

  case 301: /* domain: when_set_to "False" is LITERAL  */
#line 2777 "parse.y"
                {
                  if( ! string_of((yyvsp[0].literal)) ) {
                    yywarn("'%s' has embedded NUL", (yyvsp[0].literal).data);
                  }
                  char *dom = (yyvsp[0].literal).data;
                  (yyval.false_domain) = new cbl_domain_t((yylsp[0]), false, (yyvsp[0].literal).len, dom);
                }
#line 18285 "parse.cc"
    break;

  case 302: /* domain: when_set_to "False" is reserved_value  */
#line 2785 "parse.y"
                {
                  if( (yyvsp[0].number) == NULLS ) YYERROR;
                  auto value = constant_of(constant_index((yyvsp[0].number)))->data.initial;
                  (yyval.false_domain) = new cbl_domain_t((yylsp[0]), false, strlen(value), value );
                }
#line 18295 "parse.cc"
    break;

  case 303: /* domain: when_set_to "False" is "numeric literal"  */
#line 2791 "parse.y"
                {
		  (yyval.false_domain) = new cbl_domain_t((yylsp[0]), false, strlen((yyvsp[0].numstr).string), (yyvsp[0].numstr).string, true);
                }
#line 18303 "parse.cc"
    break;

  case 314: /* $@3: %empty  */
#line 2807 "parse.y"
                         { current_division = data_div_e; }
#line 18309 "parse.cc"
    break;

  case 315: /* data_div: "DATA DIVISION" $@3 data_sections  */
#line 2808 "parse.y"
                {
                  current_data_section = not_data_datasect_e;
                  parser_division( data_div_e, NULL, 0, NULL );
                }
#line 18318 "parse.cc"
    break;

  case 319: /* $@4: %empty  */
#line 2819 "parse.y"
                              {
                  current_data_section_set((yylsp[-1]), file_datasect_e);
                }
#line 18326 "parse.cc"
    break;

  case 321: /* $@5: %empty  */
#line 2822 "parse.y"
                                         {
                  current_data_section_set((yylsp[-1]), working_storage_datasect_e);
                }
#line 18334 "parse.cc"
    break;

  case 323: /* $@6: %empty  */
#line 2825 "parse.y"
                                       {
                  current_data_section_set((yylsp[-1]), local_storage_datasect_e);
                }
#line 18342 "parse.cc"
    break;

  case 325: /* $@7: %empty  */
#line 2828 "parse.y"
                                 {
                  current_data_section_set((yylsp[-1]), linkage_datasect_e);
                }
#line 18350 "parse.cc"
    break;

  case 327: /* data_section: SCREEN SECTION '.'  */
#line 2831 "parse.y"
                                   {
		  cbl_unimplemented("SCREEN SECTION");
		}
#line 18358 "parse.cc"
    break;

  case 330: /* $@8: %empty  */
#line 2839 "parse.y"
                                       { field_done(); }
#line 18364 "parse.cc"
    break;

  case 332: /* $@9: %empty  */
#line 2840 "parse.y"
                                       { field_done(); }
#line 18370 "parse.cc"
    break;

  case 334: /* fd_name: FD NAME  */
#line 2843 "parse.y"
                        { (yyval.string) = (yyvsp[0].string); file_section_fd_set(fd_e, (yyvsp[0].string), (yylsp[0])); }
#line 18376 "parse.cc"
    break;

  case 335: /* fd_name: SD NAME  */
#line 2844 "parse.y"
                        { (yyval.string) = (yyvsp[0].string); file_section_fd_set(sd_e, (yyvsp[0].string), (yylsp[0])); }
#line 18382 "parse.cc"
    break;

  case 338: /* fd_clause: record_desc  */
#line 2851 "parse.y"
                {
                  auto f = cbl_file_of(symbol_at(file_section_fd));
                  f->varying_size.min = (yyvsp[0].min_max).min;
                  f->varying_size.max = (yyvsp[0].min_max).max;
                  auto& cap = cbl_field_of(symbol_at(f->default_record))->data.capacity;
                  cap = std::max(cap, uint32_t(f->varying_size.max));
                  // If min != max now, we know varying is explicitly defined.
                  f->varying_size.explicitly = f->varies();
                  if( f->varying_size.max != 0 ) {
                    if( !(f->varying_size.min <= f->varying_size.max) ) {
                      error_msg((yylsp[0]), "%zu must be <= %zu",
                                f->varying_size.min, f->varying_size.max);
                      YYERROR;
                    }
                  }
                }
#line 18403 "parse.cc"
    break;

  case 342: /* fd_clause: RECORDING mode is NAME  */
#line 2871 "parse.y"
                {
                  switch( (yyvsp[0].string)[0] ) {
                  case 'F':
                  case 'V':
                  case 'U':
                  case 'S':
                    break;
                  default:
                    error_msg((yylsp[0]), "invalid RECORDING MODE '%s'", (yyvsp[0].string));
                    YYERROR;
                  }
                  cbl_unimplementedw("RECORDING MODE was ignored, not defined by ISO 2023");
                }
#line 18421 "parse.cc"
    break;

  case 345: /* fd_clause: is GLOBAL  */
#line 2887 "parse.y"
                {
                  auto f = cbl_file_of(symbol_at(file_section_fd));
                  f->attr |= global_e;
                }
#line 18430 "parse.cc"
    break;

  case 346: /* fd_clause: is EXTERNAL  */
#line 2892 "parse.y"
                {
                  auto f = cbl_file_of(symbol_at(file_section_fd));
                  f->attr |= external_e;
                }
#line 18439 "parse.cc"
    break;

  case 347: /* fd_clause: is EXTERNAL as LITERAL  */
#line 2897 "parse.y"
                {
                  auto f = cbl_file_of(symbol_at(file_section_fd));
                  f->attr |= external_e;
                  cbl_unimplemented("AS LITERAL ");
                }
#line 18449 "parse.cc"
    break;

  case 349: /* fd_clause: fd_report  */
#line 2903 "parse.y"
                          {
                  cbl_unimplemented("REPORT WRITER");
                  YYERROR;
                }
#line 18458 "parse.cc"
    break;

  case 351: /* rec_contains: "numeric literal"  */
#line 2911 "parse.y"
                            {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[0]), "size %s cannot be negative", (yyvsp[0].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = (yyval.min_max).max = n; // fixed length
                }
#line 18472 "parse.cc"
    break;

  case 352: /* rec_contains: "numeric literal" TO "numeric literal"  */
#line 2920 "parse.y"
                                           {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-2].numstr).string, (yyvsp[-2].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-2]), "size %s cannot be negative", (yyvsp[-2].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = n;

                  rn = numstr2i((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix);
                  n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[0]), "size %s cannot be negative", (yyvsp[0].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).max = n;
                  if( !((yyval.min_max).min < (yyval.min_max).max) ) {
                    error_msg((yylsp[0]), "FROM (%xz) must be less than TO (%zu)",
                              (yyval.min_max).min, (yyval.min_max).max);
                    YYERROR;
                  }
                }
#line 18499 "parse.cc"
    break;

  case 369: /* record_desc: RECORD is record_vary depending  */
#line 2974 "parse.y"
                                                           { (yyval.min_max) = (yyvsp[-1].min_max); }
#line 18505 "parse.cc"
    break;

  case 370: /* record_desc: RECORD contains rec_contains characters  */
#line 2975 "parse.y"
                                                           { (yyval.min_max) = (yyvsp[-1].min_max); }
#line 18511 "parse.cc"
    break;

  case 371: /* record_vary: VARYING in_size from_to  */
#line 2978 "parse.y"
                                        { (yyval.min_max) = (yyvsp[0].min_max); }
#line 18517 "parse.cc"
    break;

  case 372: /* record_vary: VARYING from_to  */
#line 2979 "parse.y"
                                        { (yyval.min_max) = (yyvsp[0].min_max); }
#line 18523 "parse.cc"
    break;

  case 373: /* record_vary: VARYING in_size  */
#line 2980 "parse.y"
                                { (yyval.min_max).min = 0; (yyval.min_max).max = 0; }
#line 18529 "parse.cc"
    break;

  case 374: /* record_vary: VARYING  */
#line 2981 "parse.y"
                                { (yyval.min_max).min = 0; (yyval.min_max).max = 0; }
#line 18535 "parse.cc"
    break;

  case 378: /* from_to: FROM "numeric literal" TO "numeric literal" characters  */
#line 2989 "parse.y"
                                                           {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-3].numstr).string, (yyvsp[-3].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-3]), "size %s cannot be negative", (yyvsp[-3].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = n;
                  rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-3]), "size %s cannot be negative", (yyvsp[-1].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).max = n;
                }
#line 18556 "parse.cc"
    break;

  case 379: /* from_to: "numeric literal" TO "numeric literal" characters  */
#line 3005 "parse.y"
                                                      {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-3].numstr).string, (yyvsp[-3].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-3]), "size %s cannot be negative", (yyvsp[-3].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = n;
                  rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-1]), "size %s cannot be negative", (yyvsp[-1].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).max = n;
                }
#line 18577 "parse.cc"
    break;

  case 380: /* from_to: TO "numeric literal" characters  */
#line 3022 "parse.y"
                                          {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-1]), "size %s cannot be negative", (yyvsp[-1].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = 0;
                  (yyval.min_max).max = n;
                }
#line 18592 "parse.cc"
    break;

  case 381: /* from_to: FROM "numeric literal" characters  */
#line 3033 "parse.y"
                                            {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-1]), "size %s cannot be negative", (yyvsp[-1].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = n;
                  (yyval.min_max).max = size_t(-1);
                }
#line 18607 "parse.cc"
    break;

  case 382: /* from_to: "numeric literal" characters  */
#line 3043 "parse.y"
                                       {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-1]), "size %s cannot be negative", (yyvsp[-1].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = n;
                  (yyval.min_max).max = size_t(-1);
                }
#line 18622 "parse.cc"
    break;

  case 383: /* from_to: CHARACTERS  */
#line 3054 "parse.y"
                           { (yyval.min_max).min = 0; (yyval.min_max).max = size_t(-1); }
#line 18628 "parse.cc"
    break;

  case 385: /* depending: DEPENDING on NAME  */
#line 3059 "parse.y"
                {
                  assert(file_section_fd > 0);
                  symbol_elem_t *e = symbol_at(file_section_fd);
                  assert(e);
                  auto file = cbl_file_of(e);
                  size_t odo;

                  if( (e = symbol_field(PROGRAM, 0, (yyvsp[0].string))) != NULL ) {
                    assert(e->type == SymField);
                    odo = symbol_index(e);
                  } else {
		    e = symbol_field_forward_add(PROGRAM, 0, (yyvsp[0].string), yylineno);
                    if( !e ) YYERROR;
		    symbol_field_location( symbol_index(e), (yylsp[0]) );
                    odo = field_index(cbl_field_of(e));
                  }

                  file->record_length = odo;
                  assert( file->record_length > 0 );
                }
#line 18653 "parse.cc"
    break;

  case 401: /* field: data_descr '.'  */
#line 3107 "parse.y"
                {
                  if( in_file_section() && (yyvsp[-1].field)->level == 1 ) {
                    if( !file_section_parent_set((yyvsp[-1].field)) ) {
                      YYERROR;
                    }
                  }
                  field_done();

                  const auto& field(*(yyvsp[-1].field));

                  // Format data.initial per picture
                  if( 0 == pristine_values.count(field.data.initial) ) {
                    if( field.data.digits > 0 && !field.is_zero() ) {
                      char *initial;
                      int rdigits = field.data.rdigits < 0?
                                    1 : field.data.rdigits + 1;

                      if( field.has_attr(scaled_e) ) {
                        if( field.data.rdigits > 0 ) {
                          rdigits = field.data.digits + field.data.rdigits;
                        } else {
                          rdigits = 0;
                        }
                      }
                      initial = string_of(field.data.value_of());
                      if( !initial ) {
                        error_msg((yylsp[-1]), xstrerror(errno));
                        YYERROR;
                      }
                      char decimal = symbol_decimal_point();
                      std::replace(initial, initial + strlen(initial), '.', decimal);
                      free(const_cast<char*>((yyvsp[-1].field)->data.initial));
                      (yyvsp[-1].field)->data.initial = initial;
                      if( yydebug ) {
                        const char *value_str = string_of(field.data.value_of());
                        dbgmsg("%s::data.initial is (%%%d.%d) %s ==> '%s'",
			       field.name,
			       field.data.digits,
			       rdigits,
			       value_str? value_str : "",
			       field.data.initial);
                      }
                    }
                  }
                }
#line 18703 "parse.cc"
    break;

  case 406: /* occurs_clause: OCCURS name indexed  */
#line 3159 "parse.y"
                {
		  if( ! (is_constant((yyvsp[-1].field)) && (yyvsp[-1].field)->type == FldLiteralN) ) {
		    error_msg((yylsp[-1]), "%s is not CONSTANT", (yyvsp[-1].field)->name);
		    YYERROR;
		  }
                  cbl_occurs_t *occurs = &current_field()->occurs;
                  occurs->bounds.lower =
                  occurs->bounds.upper = (yyvsp[-1].field)->as_integer();
		}
#line 18717 "parse.cc"
    break;

  case 407: /* cardinal_lb: cardinal times  */
#line 3169 "parse.y"
                               {
                  current_field()->occurs.bounds.lower = (yyvsp[-1].number);
                  current_field()->occurs.bounds.upper = (yyvsp[-1].number);
                }
#line 18726 "parse.cc"
    break;

  case 408: /* cardinal: "numeric literal"  */
#line 3176 "parse.y"
                {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix);
                  (yyval.number) = real_to_integer (&rn);
                }
#line 18735 "parse.cc"
    break;

  case 409: /* depending_on: cardinal TO bound DEPENDING on name  */
#line 3183 "parse.y"
                {
                  cbl_occurs_t *occurs = &current_field()->occurs;
                  occurs->bounds.lower = (size_t)(yyvsp[-5].number);
                  occurs->bounds.upper = (size_t)(yyvsp[-3].number);
                  occurs->depending_on = field_index((yyvsp[0].field));
                }
#line 18746 "parse.cc"
    break;

  case 410: /* depending_on: bound DEPENDING on name  */
#line 3190 "parse.y"
                {
                  cbl_occurs_t *occurs = &current_field()->occurs;
                  occurs->bounds.lower = 1;
                  occurs->bounds.upper = (size_t)(yyvsp[-3].number);
                  occurs->depending_on = field_index((yyvsp[0].field));
                }
#line 18757 "parse.cc"
    break;

  case 412: /* bound: UNBOUNDED times  */
#line 3198 "parse.y"
                                 { (yyval.number) = -1; }
#line 18763 "parse.cc"
    break;

  case 416: /* ordering: ASCENDING  */
#line 3207 "parse.y"
                {
                  current_field()->occurs.key_alloc(true);
                }
#line 18771 "parse.cc"
    break;

  case 417: /* ordering: DESCENDING  */
#line 3211 "parse.y"
                {
                  current_field()->occurs.key_alloc(false);
                }
#line 18779 "parse.cc"
    break;

  case 420: /* key_field1: name  */
#line 3219 "parse.y"
                {
                  current_field()->occurs.key_field_add((yyvsp[0].field));
                }
#line 18787 "parse.cc"
    break;

  case 425: /* index_field1: ctx_name  */
#line 3231 "parse.y"
                {
		  static const cbl_field_data_t data { 0, 8 }; // capacity 8
                  cbl_field_t field = {};
		  field.type = FldIndex;
		  field.parent = field_index(current_field());
		  field.data = data;
                  if( !namcpy((yylsp[0]), field.name, (yyvsp[0].string)) ) YYERROR;

                  auto symbol = symbol_field(PROGRAM, 0, (yyvsp[0].string));
                  if( symbol ) {
                    auto field( cbl_field_of(symbol) );
                    error_msg((yylsp[0]),  "'%s' already defined on line %d",
                              field->name, field->line );
                    YYERROR;
                  }

                  auto index = field_add((yylsp[0]), &field);
                  if( !index ) {
                    YYERROR;
                  }

                  current_field()->occurs.index_add(index);
                }
#line 18815 "parse.cc"
    break;

  case 426: /* level_name: LEVEL ctx_name  */
#line 3257 "parse.y"
                {
                  switch((yyvsp[-1].number)) {
                  case 66:
                  case 77:
                  case 88:
                    break;
                  default:
		    if( 1 <= (yyvsp[-1].number) && (yyvsp[-1].number) <= 49 ) break;
                    error_msg((yylsp[-1]), "LEVEL %d not supported", (yyvsp[-1].number));
                    YYERROR;
                  }
                  struct cbl_field_t field = { 0,
                    FldInvalid, FldInvalid, 0, 0, 0, capacity_cast((yyvsp[-1].number)),
		    nonarray, yylineno, "",
                    0, cbl_field_t::linkage_t(),
		    {}, NULL };
                  if( !namcpy((yylsp[0]), field.name, (yyvsp[0].string)) ) YYERROR;

                  (yyval.field) = field_add((yyloc), &field);
                  if( !(yyval.field) ) {
                    YYERROR;
                  }
                  current_field((yyval.field)); // make available for data_clauses
                }
#line 18844 "parse.cc"
    break;

  case 427: /* level_name: LEVEL  */
#line 3282 "parse.y"
                {
                  switch((yyvsp[0].number)) {
                  case 66:
                  case 77:
                  case 88:
                    break;
                  default:
		    if( 1 <= (yyvsp[0].number) && (yyvsp[0].number) <= 49 ) break;
                    error_msg((yylsp[0]), "LEVEL %d not supported", (yyvsp[0].number));
                    YYERROR;
                  }
                  struct cbl_field_t field = { 0,
                    FldInvalid, FldInvalid, 0, 0, 0, capacity_cast((yyvsp[0].number)),
		    nonarray, yylineno, "",
                    0, {}, {}, NULL };

                  (yyval.field) = field_add((yylsp[0]), &field);
                  if( !(yyval.field) ) {
                    YYERROR;
                  }
                  current_field((yyval.field)); // make available for data_clauses
                }
#line 18871 "parse.cc"
    break;

  case 428: /* data_descr: data_descr1  */
#line 3307 "parse.y"
                {
                  (yyval.field) = current_field((yyvsp[0].field)); // make available for occurs, etc.
                }
#line 18879 "parse.cc"
    break;

  case 429: /* data_descr: error  */
#line 3310 "parse.y"
                      { static cbl_field_t none = {}; (yyval.field) = &none; }
#line 18885 "parse.cc"
    break;

  case 431: /* const_value: "BYTE-LENGTH" of name  */
#line 3314 "parse.y"
                                    { (yyvsp[0].field)->data.set_real_from_capacity(&(yyval.float128)); }
#line 18891 "parse.cc"
    break;

  case 432: /* const_value: LENGTH of name  */
#line 3315 "parse.y"
                                    { (yyvsp[0].field)->data.set_real_from_capacity(&(yyval.float128)); }
#line 18897 "parse.cc"
    break;

  case 433: /* const_value: "LENGTH-OF" of name  */
#line 3316 "parse.y"
                                    { (yyvsp[0].field)->data.set_real_from_capacity(&(yyval.float128)); }
#line 18903 "parse.cc"
    break;

  case 434: /* value78: literalism  */
#line 3320 "parse.y"
                {
                  cbl_field_data_t data = {};
		    data.capacity = capacity_cast(strlen((yyvsp[0].literal).data));
		    data.initial = (yyvsp[0].literal).data;
                  (yyval.field_data) = new cbl_field_data_t(data);
                }
#line 18914 "parse.cc"
    break;

  case 435: /* value78: const_value  */
#line 3327 "parse.y"
                {
                  cbl_field_data_t data = {};
		  data = build_real (float128_type_node, (yyvsp[0].float128));
                  (yyval.field_data) = new cbl_field_data_t(data);
                }
#line 18924 "parse.cc"
    break;

  case 436: /* value78: true_false  */
#line 3333 "parse.y"
                {
                  cbl_unimplemented("Boolean constant");
                  YYERROR;
                }
#line 18933 "parse.cc"
    break;

  case 437: /* data_descr1: level_name  */
#line 3340 "parse.y"
                {
                  assert((yyvsp[0].field) == current_field());
                  if( (yyvsp[0].field)->usage == FldIndex ) {
                    field_type_update((yyvsp[0].field), (yyvsp[0].field)->usage, (yylsp[0]), true);
                  }
                }
#line 18944 "parse.cc"
    break;

  case 438: /* data_descr1: level_name CONSTANT is_global as const_value  */
#line 3348 "parse.y"
                {
                  cbl_field_t& field = *(yyvsp[-4].field);
                  if( field.level != 1 ) {
                    error_msg((yylsp[-4]), "%s must be an 01-level data item", field.name);
                    YYERROR;
                  }

                  field.attr |= constant_e;
                  if( (yyvsp[-2].boolean) ) field.attr |= global_e;
                  field.type = FldLiteralN;
		  field.data = build_real (float128_type_node, (yyvsp[0].float128));
                  field.data.initial = string_of((yyvsp[0].float128));

                  if( !cdf_value(field.name, cdfval_t((yyvsp[0].float128))) ) {
                    error_msg((yylsp[-4]), "%s was defined by CDF", field.name);
                  }
                }
#line 18966 "parse.cc"
    break;

  case 439: /* data_descr1: level_name CONSTANT is_global as literalism  */
#line 3366 "parse.y"
                {
                  cbl_field_t& field = *(yyvsp[-4].field);
                  field.attr |= constant_e;
                  if( (yyvsp[-2].boolean) ) field.attr |= global_e;
                  field.type = FldLiteralA;
                  field.data.capacity = (yyvsp[0].literal).len;
                  field.data.initial  = (yyvsp[0].literal).data;
                  field.attr |= literal_attr((yyvsp[0].literal).prefix);
                  if( field.level != 1 ) {
                    error_msg((yylsp[0]), "%s must be an 01-level data item", field.name);
                    YYERROR;
                  }
                  if( !cdf_value(field.name, (yyvsp[0].literal).data) ) {
                    error_msg((yylsp[-4]), "%s was defined by CDF", field.name);
                  }
                  value_encoding_check((yylsp[0]), (yyvsp[-4].field));
                }
#line 18988 "parse.cc"
    break;

  case 440: /* data_descr1: level_name CONSTANT is_global FROM NAME  */
#line 3384 "parse.y"
                {
                  assert((yyvsp[-4].field) == current_field());
                  const cdfval_t *cdfval = cdf_value((yyvsp[0].string));
                  if( !cdfval ) {
                    error_msg((yylsp[-4]), "%s was defined by CDF", (yyvsp[0].string));
                    YYERROR;
                  }
                  cbl_field_t& field = *(yyvsp[-4].field);
                  field.attr |= ((yyvsp[-2].boolean) | constant_e);
                  field.data.capacity = cdfval->string ? strlen(cdfval->string)
                                                  : sizeof(field.data.value_of());
                  field.data.initial  = cdfval->string;
                  field.data = cdfval->number;
                  if( !cdf_value(field.name, *cdfval) ) {
                    error_msg((yylsp[-4]), "%s was defined by CDF", field.name);
                  }
                }
#line 19010 "parse.cc"
    break;

  case 441: /* data_descr1: "78" NAME VALUE is value78  */
#line 3403 "parse.y"
                {
                  if( ! dialect_mf() ) {
                    dialect_error((yylsp[-4]), "level 78", "mf");
                    YYERROR;
                  }
                  struct cbl_field_t field = { 0, FldLiteralA, FldInvalid,
                                               constant_e, 0, 0, 78, nonarray,
                                               yylineno, "", 0, {}, *(yyvsp[0].field_data), NULL };
                  if( !namcpy((yylsp[-3]), field.name, (yyvsp[-3].string)) ) YYERROR;
                  if( field.data.initial ) {
                    field.attr |= quoted_e;
                    if( !cdf_value(field.name, field.data.initial) ) {
                      yywarn("%s was defined by CDF", field.name);
                    }
                  } else {
                    field.type = FldLiteralN;
                    field.data.initial = string_of(field.data.value_of());
                    if( !cdf_value(field.name, field.as_integer()) ) {
                      yywarn("%s was defined by CDF", field.name);
                    }
                  }
                  if( ((yyval.field) = field_add((yylsp[-3]), &field)) == NULL ) {
                    error_msg((yylsp[-3]), "failed level 78");
                    YYERROR;
                  }
                }
#line 19041 "parse.cc"
    break;

  case 442: /* data_descr1: "88" NAME NULLPTR  */
#line 3431 "parse.y"
                {
                  struct cbl_field_t field = { 0,
                    FldClass, FldInvalid, 0, 0, 0, 88, nonarray, yylineno, "",
                    0, cbl_field_t::linkage_t(),
		    {}, NULL };
                  if( !namcpy((yylsp[-1]), field.name, (yyvsp[-1].string)) ) YYERROR;

                  auto fig = constant_of(constant_index(NULLS))->data.initial;
                  struct cbl_domain_t *domain = new cbl_domain_t[2];

                  domain[0] = cbl_domain_t((yylsp[-1]), false, strlen(fig), fig);

                  field.data.domain_as(domain);

                  if( ((yyval.field) = field_add((yylsp[-1]), &field)) == NULL ) {
                    error_msg((yylsp[-1]), "failed level 88");
                    YYERROR;
                  }
                  auto parent = cbl_field_of(symbol_at((yyval.field)->parent));
                  if( parent->type != FldPointer ) {
                    error_msg((yylsp[-1]), "LEVEL 88 %s VALUE NULLS invalid for "
                             "%s %s, which is not a POINTER",
			    (yyval.field)->name, parent->level_str(), parent->name);
                  }
                }
#line 19071 "parse.cc"
    break;

  case 443: /* data_descr1: "88" NAME VALUE domains  */
#line 3457 "parse.y"
                {
                  struct cbl_field_t field = { 0,
                    FldClass, FldInvalid, 0, 0, 0, 88, nonarray, yylineno, "",
                    0, cbl_field_t::linkage_t(),
		    {}, NULL };
                  if( !namcpy((yylsp[-2]), field.name, (yyvsp[-2].string)) ) YYERROR;

                  struct cbl_domain_t *domain =
                    new cbl_domain_t[ domains.size() + 1];

                  std::copy(domains.begin(), domains.end(), domain);

                  field.data.domain_as(domain);
                  field.data.false_value_as((yyvsp[0].false_domain));
                  domains.clear();

                  if( ((yyval.field) = field_add((yylsp[-2]), &field)) == NULL ) {
                    error_msg((yylsp[-2]), "failed level 88");
                    YYERROR;
                  }
                }
#line 19097 "parse.cc"
    break;

  case 444: /* data_descr1: name66 RENAMES name  */
#line 3480 "parse.y"
                {
		  symbol_field_alias_end();
                  if( is_literal((yyvsp[0].field)) ) {
                    error_msg((yylsp[0]), "cannot RENAME '%s'", name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  if( !immediately_follows((yyvsp[0].field)) ) {
                    error_msg((yylsp[0]), "%s must immediately follow %s to RENAME it",
                             (yyvsp[-2].string), name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  if( (yyvsp[0].field)->occurs.ntimes() ) {
                    error_msg((yylsp[0]), "cannot RENAME table %s %s",
			      (yyvsp[0].field)->level_str(), name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  auto table = occurs_in((yyvsp[0].field));
                  if( table ) {
                    error_msg((yylsp[0]), "cannot RENAME '%s' OF %s",
                             name_of((yyvsp[0].field)), table->name);
                    YYERROR;
                  }
                  if( ! (yyvsp[0].field)->rename_level_ok() ) {
                    error_msg((yylsp[0]), "cannot RENAME %s %s",
			      (yyvsp[0].field)->level_str(), name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  symbol_elem_t *orig = symbol_at(field_index((yyvsp[0].field)));
                  (yyval.field) = cbl_field_of(symbol_field_alias(orig, (yyvsp[-2].string)));
		  symbol_field_location(field_index((yyval.field)), (yylsp[-2]));
                }
#line 19133 "parse.cc"
    break;

  case 445: /* data_descr1: name66 RENAMES name THRU name  */
#line 3513 "parse.y"
                {
		  symbol_field_alias_end();
                  if( !immediately_follows((yyvsp[-2].field)) ) {
                    error_msg((yylsp[-2]), "RENAMES: %s must immediately follow %s",
                             (yyvsp[-4].string), name_of((yyvsp[-2].field)));
                    YYERROR;
                  }
                  if( is_literal((yyvsp[-2].field)) ) {
                    error_msg((yylsp[-2]), "cannot RENAME '%s'", name_of((yyvsp[-2].field)));
                    YYERROR;
                  }
                  if( is_literal((yyvsp[0].field)) ) {
                    error_msg((yylsp[0]), "cannot RENAME '%s'", name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  auto table = occurs_in((yyvsp[-2].field));
                  if( table ) {
                    error_msg((yylsp[-2]), "cannot RENAME '%s' OF %s",
                             name_of((yyvsp[-2].field)), table->name);
                    YYERROR;
                  }
                  table = occurs_in((yyvsp[0].field));
                  if( table ) {
                    error_msg((yylsp[0]), "cannot RENAME '%s' OF %s",
                             name_of((yyvsp[0].field)), table->name);
                    YYERROR;
                  }
                  if( ! (yyvsp[-2].field)->rename_level_ok() ) {
                    error_msg((yylsp[-2]), "cannot RENAME %s %s",
			      (yyvsp[-2].field)->level_str(), name_of((yyvsp[-2].field)));
                    YYERROR;
                  }
                  if( (yyvsp[-2].field)->has_subordinate((yyvsp[0].field)) ) {
                    error_msg((yylsp[-2]), "cannot RENAME %s %s THRU %s %s "
                             "because %s is subordinate to %s",
			      (yyvsp[-2].field)->level_str(), name_of((yyvsp[-2].field)),
			      (yyvsp[0].field)->level_str(), name_of((yyvsp[0].field)),
                             name_of((yyvsp[0].field)), name_of((yyvsp[-2].field)));
                    YYERROR;
                  }
                  auto not_ok = rename_not_ok((yyvsp[-2].field), (yyvsp[0].field));
                  if( not_ok ) {
                    error_msg((yylsp[-2]), "cannot RENAME %s %s THRU %s %s "
                             "because %s %s cannot be renamed",
			      (yyvsp[-2].field)->level_str(), name_of((yyvsp[-2].field)),
			      (yyvsp[0].field)->level_str(), name_of((yyvsp[0].field)),
			      not_ok->level_str(), name_of(not_ok));
                    YYERROR;
                  }
                  if( field_index((yyvsp[0].field)) <= field_index((yyvsp[-2].field)) ) {
                    error_msg((yylsp[-2]), "cannot RENAME %s %s THRU %s %s "
                             "because they're in the wrong order",
			      (yyvsp[-2].field)->level_str(), name_of((yyvsp[-2].field)),
			      (yyvsp[0].field)->level_str(), name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  symbol_elem_t *orig = symbol_at(field_index((yyvsp[-2].field)));
                  symbol_elem_t *last = symbol_at(field_index((yyvsp[0].field)));
                  (yyval.field) = cbl_field_of(symbol_field_alias2(orig, last, (yyvsp[-4].string)));
		  symbol_field_location(field_index((yyval.field)), (yylsp[-4]));
                }
#line 19199 "parse.cc"
    break;

  case 446: /* data_descr1: level_name data_clauses  */
#line 3576 "parse.y"
                {
                  gcc_assert((yyvsp[-1].field) == current_field());
                  if( (yyvsp[0].number) == value_clause_e ) { // only VALUE, no PIC
                    // Error unless VALUE is a figurative constant or (quoted) string.
                    if( (yyvsp[-1].field)->type != FldPointer &&
                        ! (yyvsp[-1].field)->has_attr(quoted_e) &&
                        normal_value_e == cbl_figconst_of((yyvsp[-1].field)->data.initial) )
                    {
                      error_msg((yylsp[-1]), "%s numeric VALUE %s requires PICTURE",
                               (yyvsp[-1].field)->name, (yyvsp[-1].field)->data.initial);
                    }
                    if( null_value_e == cbl_figconst_of((yyvsp[-1].field)->data.initial) ) {
                      // don't change the type
                      assert(FldPointer == (yyvsp[-1].field)->type);
                    } else {
                      // alphanumeric VALUE by itself implies alphanumeric type
                      assert(FldPointer != (yyvsp[-1].field)->type);
                      (yyvsp[-1].field)->type = FldAlphanumeric;
                      if( (yyvsp[-1].field)->data.initial ) {
                        (yyvsp[-1].field)->data.capacity = strlen((yyvsp[-1].field)->data.initial);
                      }
                    }
                  }

                  // Verify BLANK WHEN ZERO
                  if( (yyvsp[-1].field)->has_attr(blank_zero_e) ) {
                    switch((yyvsp[-1].field)->type) {
                    case FldNumericEdited:
                      if( (yyvsp[-1].field)->has_attr(signable_e) ) {
                        error_msg((yylsp[0]),  "%s has 'S' in PICTURE, cannot be BLANK WHEN ZERO",
                                  (yyvsp[-1].field)->name, cbl_field_type_str((yyvsp[-1].field)->type) );
                      }
                      break;
                    default:
                      error_msg((yylsp[0]),  "%s must be "
                                "NUMERIC DISPLAY or NUMERIC-EDITED, not %s",
                                (yyvsp[-1].field)->name, cbl_field_type_str((yyvsp[-1].field)->type) );
                    }
                    (yyvsp[-1].field)->data.picture = original_picture();
                  }

                  // SIGN clause valid only with "S" in picture
                  if( (yyvsp[-1].field)->type == FldNumericDisplay && !is_signable((yyvsp[-1].field)) ) {
                    static const size_t sign_attrs = leading_e | separate_e;
                    static_assert(sizeof(sign_attrs) == sizeof((yyvsp[-1].field)->attr),
                                  "size matters");

                    // remove inapplicable inherited sign attributes
                    size_t group_sign = group_attr((yyvsp[-1].field)) & sign_attrs;
                    (yyvsp[-1].field)->attr &= ~group_sign;

                    if( (yyvsp[-1].field)->attr & sign_attrs ) {
                      dbgmsg("%s:%d: %s", __func__, __LINE__, field_str((yyvsp[-1].field)));
                      error_msg((yylsp[-1]), "%s must be signed for SIGN IS",
                                (yyvsp[-1].field)->name );
                      YYERROR;
                    }
                  }

                  // Increase numeric display capacity by 1 for SIGN SEPARATE.
                  if( (yyvsp[-1].field)->type == FldNumericDisplay &&
                      is_signable((yyvsp[-1].field)) &&
                      (yyvsp[-1].field)->has_attr(separate_e) ){
                    (yyvsp[-1].field)->data.capacity++;
                  }

                  // Set Packed-Decimal capacity
                  if( (yyvsp[-1].field)->type == FldPacked ) {
                    (yyvsp[-1].field)->data.capacity = type_capacity((yyvsp[-1].field)->type,
                                                          (yyvsp[-1].field)->data.digits);
                  if( (yyvsp[-1].field)->attr & separate_e )
                    {
                    // This is a gentle kludge required by the the belated
                    // introduction of COMP-6, which is like COMP-3 but with no
                    // sign nybble.  The code in type_capacity assumes a sign
                    // nybble.
                    (yyvsp[-1].field)->data.capacity = ((yyvsp[-1].field)->data.digits+1)/2;
                    }
                  }

                  // Check COMP-5 capacity
		  // No capacity means no PICTURE, valid only for a (potential) group
                  if( (yyvsp[-1].field)->type == FldNumericBin5 && (yyvsp[-1].field)->data.capacity == 0 ) {
                    if(  has_clause ((yyvsp[0].number), usage_clause_e) &&
                        !has_clause ((yyvsp[0].number), picture_clause_e) ) {
			// invalidate until a child is born
		      (yyvsp[-1].field)->type = FldInvalid;
                    }
                  }

                  // Ensure signed initial VALUE is for signed numeric type
                  if( is_numeric((yyvsp[-1].field)) &&
		      (yyvsp[-1].field)->data.initial &&
		      (yyvsp[-1].field)->type != FldFloat )
		  {
                    switch( (yyvsp[-1].field)->data.initial[0] ) {
                    case '-':
                      if( !(yyvsp[-1].field)->has_attr(signable_e) ) {
                        error_msg((yylsp[-1]), "%s is unsigned but has signed VALUE '%s'",
                                 (yyvsp[-1].field)->name, (yyvsp[-1].field)->data.initial);
                      }
                    }
                  }

                  // Verify VALUE
                  (yyvsp[-1].field)->report_invalid_initial_value((yylsp[0]));

                  // verify REDEFINES
                  auto parent = parent_of((yyvsp[-1].field));
                  if( parent && (yyvsp[-1].field)->level == parent->level ) {
                    valid_redefine((yylsp[-1]), (yyvsp[-1].field), parent); // calls yyerror
                  }
                }
#line 19317 "parse.cc"
    break;

  case 447: /* literalism: LITERAL  */
#line 3691 "parse.y"
                        { (yyval.literal) = (yyvsp[0].literal); }
#line 19323 "parse.cc"
    break;

  case 448: /* literalism: literalism '&' LITERAL  */
#line 3693 "parse.y"
                {
                  (yyval.literal) = (yyvsp[-2].literal);
                  literal_t& output((yyval.literal));

                  output.len += (yyvsp[0].literal).len;
                  output.data = reinterpret_cast<char*>(xrealloc(output.data,
                                                                 output.len + 1));
                  memcpy( output.data + (yyvsp[-2].literal).len, (yyvsp[0].literal).data, (yyvsp[0].literal).len );
                  output.data[output.len] = '\0';

                  if( (yyvsp[0].literal).prefix[0] ) { strcpy(output.prefix, (yyvsp[0].literal).prefix); }
                  if( ! (yyvsp[-2].literal).compatible_prefix((yyvsp[0].literal)) ) {
                    yywarn("dissimilar literals, '%s' prevails",
                          output.prefix);
                  }
                }
#line 19344 "parse.cc"
    break;

  case 449: /* name66: "66" NAME  */
#line 3712 "parse.y"
                {
                  build_symbol_map();
		  if( ! symbol_field_alias_begin() ) {
		     error_msg((yylsp[0]), "no Level 01 record exists "
		              "for %s to redefine", (yyvsp[0].string));
		  }
                  (yyval.string) = (yyvsp[0].string);
                }
#line 19357 "parse.cc"
    break;

  case 450: /* data_clauses: data_clause  */
#line 3723 "parse.y"
                {
                  if( (yyvsp[0].number) == redefines_clause_e ) {
                    auto parent = parent_of(current_field());
                    if( !parent ) {
                      error_msg((yylsp[0]), "%s invalid REDEFINES",
                               current_field()->name);
                      YYERROR;
                    }
                    if( parent->occurs.ntimes() > 0 ) {
                      error_msg((yylsp[0]), "%s cannot REDEFINE table %s",
                               current_field()->name,
                               parent->name);
                      YYERROR;
                    }
                  }
                }
#line 19378 "parse.cc"
    break;

  case 451: /* data_clauses: data_clauses data_clause  */
#line 3739 "parse.y"
                                         {
                  const char *clause = "data";
                  switch((yyvsp[0].number)) {
                  case occurs_clause_e:     clause = "OCCURS";    break;
                  case picture_clause_e:    clause = "PIC";       break;
                  case usage_clause_e:      clause = "USAGE";     break;
                  case value_clause_e:      clause = "VALUE";     break;
                  case global_clause_e:     clause = "GLOBAL";    break;
                  case external_clause_e:   clause = "EXTERNAL";  break;
                  case justified_clause_e:  clause = "JUSTIFIED"; break;
                  case redefines_clause_e:  clause = "REDEFINES"; break;
                  case blank_zero_clause_e: clause = "BLANK WHEN ZERO"; break;
                  case synched_clause_e:    clause = "SYNCHRONIZED"; break;
                  case sign_clause_e:       clause = "SIGN";      break;
                  case based_clause_e:      clause = "BASED";     break;
                  case same_clause_e:       clause = "SAME AS";   break;
                  case volatile_clause_e:   clause = "VOLATILE";  break;
                  case type_clause_e:       clause = "TYPE";      break;
                  case typedef_clause_e:    clause = "TYPEDEF";   break;
                  }
                  if( ((yyval.number) & (yyvsp[0].number)) == (yyvsp[0].number) ) {
                    error_msg((yylsp[0]), "%s clause repeated", clause);
                    YYERROR;
                  }

                  if( (yyvsp[0].number) == redefines_clause_e ) {
                    error_msg((yylsp[0]), "REDEFINES must appear "
                             "immediately after LEVEL and NAME");
                    YYERROR;
                  }
                  cbl_field_t *field = current_field();
                  const int globex = (global_e | external_e);
                  if( (((yyval.number) | (yyvsp[0].number)) & globex) == globex ) {
                    error_msg((yylsp[0]), "GLOBAL and EXTERNAL specified");
                    YYERROR;
                  }

                  (yyval.number) |= (yyvsp[0].number);

                  // If any implied TYPE bits are on in addition to
                  // type_clause_e, they're in conflict.
                  static const size_t type_implies =
                    // ALIGNED clause not implemented
                    blank_zero_clause_e | justified_clause_e | picture_clause_e
                    | sign_clause_e | synched_clause_e | usage_clause_e;

                  if( type_clause_e < ((yyval.number) & (type_clause_e | type_implies)) ) {
                    if( (yyvsp[0].number) == type_clause_e ) {
                      error_msg((yylsp[0]), "TYPE TO incompatible with ALIGNED, "
                              "BLANK WHEN ZERO, JUSTIFIED, PICTURE, SIGN, "
                              "SYNCHRONIZED, and USAGE");
                    } else {
                      error_msg((yylsp[0]), "%s incompatible with TYPE TO", clause);
                    }
                    YYERROR;
                  }

                  if( ((yyval.number) & same_clause_e) == same_clause_e ) {
                    if( 0 < ((yyval.number) & ~same_clause_e) ) {
                      error_msg((yylsp[0]), "%s %s SAME AS "
			      "precludes other DATA DIVISION clauses",
			      field->level_str(), field->name);
                      YYERROR;
                    }
                  }

                  if( is_numeric(field->type) && field->type != FldNumericDisplay ) {
                    if( (yyval.number) & sign_clause_e ) {
                      error_msg((yylsp[0]), "%s is binary NUMERIC type, "
                               "incompatible with SIGN IS", field->name);
                    }
                  }

                  if( gcobol_feature_embiggen() ) {
                    if( field->is_binary_integer() && field->data.capacity == 4) {
                      auto redefined = symbol_redefines(field);
                      if( redefined && redefined->type == FldPointer ) {
                        if( yydebug ) {
                          yywarn("expanding %s size from %u bytes to %zu "
                                "because it redefines %s with USAGE POINTER",
                                field->name, field->size(),
                                (size_t)int_size_in_bytes(ptr_type_node),
                                redefined->name);
                        }
                        field->embiggen();
                      }
                    }
                  }

                  switch( field->type ) {
                  case FldFloat:
                    if( ((yyval.number) & picture_clause_e) == picture_clause_e ) {
		      error_msg((yylsp[0]), "%s: FLOAT types do not allow PICTURE",
			       field->name);
                    }
                    break;
                  default:
                    break;
                  }

		  if( ! field->is_justifiable() ) {
		    error_msg((yylsp[0]), "%s: %s is incompatible with JUSTIFIED",
			     field->name, 3 + cbl_field_type_str(field->type));
		  }
                }
#line 19488 "parse.cc"
    break;

  case 452: /* data_clause: any_length  */
#line 3846 "parse.y"
                                  { (yyval.number) = any_length_e; }
#line 19494 "parse.cc"
    break;

  case 453: /* data_clause: based_clause  */
#line 3847 "parse.y"
                                  { (yyval.number) = based_clause_e; }
#line 19500 "parse.cc"
    break;

  case 454: /* data_clause: blank_zero_clause  */
#line 3848 "parse.y"
                                  { (yyval.number) = blank_zero_clause_e; }
#line 19506 "parse.cc"
    break;

  case 455: /* data_clause: external_clause  */
#line 3849 "parse.y"
                                  { (yyval.number) = external_clause_e; }
#line 19512 "parse.cc"
    break;

  case 456: /* data_clause: global_clause  */
#line 3850 "parse.y"
                                  { (yyval.number) = global_clause_e; }
#line 19518 "parse.cc"
    break;

  case 457: /* data_clause: justified_clause  */
#line 3851 "parse.y"
                                  { (yyval.number) = justified_clause_e; }
#line 19524 "parse.cc"
    break;

  case 458: /* data_clause: occurs_clause  */
#line 3852 "parse.y"
                                  { (yyval.number) = occurs_clause_e;
                  cbl_field_t *field = current_field();
                  switch( field->level ) {
                  case 1:
		    if( dialect_mf() ) break;
		    __attribute__((fallthrough));
                  case 77:
                  case 88:
		    error_msg((yyloc), "%s %s: invalid LEVEL for OCCURS",
			      field->level_str(), field->name );
                    break;
                  default:
                    assert( field->parent > 0 );
                  }
                }
#line 19544 "parse.cc"
    break;

  case 459: /* data_clause: picture_clause  */
#line 3867 "parse.y"
                                  { (yyval.number) = picture_clause_e; }
#line 19550 "parse.cc"
    break;

  case 460: /* data_clause: redefines_clause  */
#line 3868 "parse.y"
                                  { (yyval.number) = redefines_clause_e; }
#line 19556 "parse.cc"
    break;

  case 461: /* data_clause: same_clause  */
#line 3869 "parse.y"
                                  { (yyval.number) = same_clause_e; }
#line 19562 "parse.cc"
    break;

  case 462: /* data_clause: sign_clause  */
#line 3870 "parse.y"
                                  { (yyval.number) = sign_clause_e; }
#line 19568 "parse.cc"
    break;

  case 463: /* data_clause: synched_clause  */
#line 3871 "parse.y"
                                  { (yyval.number) = synched_clause_e; }
#line 19574 "parse.cc"
    break;

  case 464: /* data_clause: type_clause  */
#line 3872 "parse.y"
                                  { (yyval.number) = type_clause_e; }
#line 19580 "parse.cc"
    break;

  case 465: /* data_clause: typedef_clause  */
#line 3873 "parse.y"
                                  { (yyval.number) = typedef_clause_e; }
#line 19586 "parse.cc"
    break;

  case 466: /* data_clause: usage_clause  */
#line 3874 "parse.y"
                                  { (yyval.number) = usage_clause_e; }
#line 19592 "parse.cc"
    break;

  case 467: /* data_clause: value_clause  */
#line 3875 "parse.y"
                                  { (yyval.number) = value_clause_e;
                  cbl_field_t *field = current_field();

                  if( field->type != FldAlphanumeric &&
                      field->data.initial && field->data.initial[0] )
                  {
                    // Embedded NULs are valid only in FldAlphanumeric, and are
                    // already handled.
                    if( strlen(field->data.initial) < field->data.capacity ) {
                      auto p = blank_pad_initial( field->data.initial,
                                                  strlen(field->data.initial),
                                                  field->data.capacity );
                      if( !p ) YYERROR;
                      field->data.initial = p;
                    }
                  }
		  const cbl_field_t *parent;
		  if( (parent = parent_has_value(field)) != NULL ) {
		    error_msg((yylsp[0]), "VALUE invalid because group %s has VALUE clause",
		              parent->name);
		  }
                }
#line 19619 "parse.cc"
    break;

  case 468: /* data_clause: volatile_clause  */
#line 3897 "parse.y"
                                     { (yyval.number) = volatile_clause_e; }
#line 19625 "parse.cc"
    break;

  case 469: /* picture_clause: PIC signed nps nines nps  */
#line 3901 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  if( !field_type_update(field, FldNumericDisplay, (yyloc)) ) {
                    YYERROR;
                  }
                  ERROR_IF_CAPACITY((yylsp[-4]), field);
                  field->attr |= (yyvsp[-3].number);
                  field->data.capacity = type_capacity(field->type, (yyvsp[-1].number));
                  field->data.digits = (yyvsp[-1].number);
                  if( long(field->data.digits) != (yyvsp[-1].number) ) {
                    error_msg((yylsp[-3]), "indicated size would be %ld bytes, "
                             "maximum data item size is %u",
                             (yyvsp[-1].number), UINT32_MAX);
                  }

                  if( (yyvsp[-2].number) && (yyvsp[0].number) ) { // leading and trailing P's
                    error_msg((yylsp[-3]), "PIC cannot have both leading and trailing P");
                    YYERROR;
                  }
                  if( (yyvsp[-2].number) || (yyvsp[0].number) ) {
                    field->attr |= scaled_e;
                    field->data.rdigits = (yyvsp[-2].number)? (yyvsp[-2].number) : -(yyvsp[0].number);
                  }
                  if( ! field->reasonable_capacity() ) {
                    error_msg((yylsp[-3]), "%s limited to capacity of %d (would need %u)",
			     field->name, MAX_FIXED_POINT_DIGITS, field->data.capacity);
                  }
                }
#line 19658 "parse.cc"
    break;

  case 470: /* picture_clause: PIC signed NINEV nine  */
#line 3931 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  field->data.digits = (yyvsp[-1].number) + (yyvsp[0].number);

                  if( field->is_binary_integer() ) {
                    field->data.capacity = type_capacity(field->type,
                                                         field->data.digits);
                  } else {
                    if( !field_type_update(field, FldNumericDisplay, (yyloc)) ) {
                      YYERROR;
                    }
                    ERROR_IF_CAPACITY((yylsp[-3]), field);
                    field->attr |= (yyvsp[-2].number);
                    field->data.capacity = field->data.digits;
                    field->data.rdigits = (yyvsp[0].number);
                  }
                  if( ! field->reasonable_capacity() ) {
                    error_msg((yylsp[-2]), "%s limited to capacity of %d (would need %u)",
			     field->name, MAX_FIXED_POINT_DIGITS, field->data.capacity);
                  }
                }
#line 19684 "parse.cc"
    break;

  case 471: /* picture_clause: PIC signed NINEDOT nine  */
#line 3953 "parse.y"
                {
                  uint32_t size = (yyvsp[-1].number) + (yyvsp[0].number);

                  cbl_field_t *field = current_field();
                  if( !field_type_update(field, FldNumericEdited, (yyloc)) ) {
                    YYERROR;
                  }
                  ERROR_IF_CAPACITY((yylsp[-3]), field);
                  field->attr |= (yyvsp[-2].number);
                  field->data.digits = size;
                  field->data.capacity = ++size;
                  field->data.rdigits = (yyvsp[0].number);

                  if( ! field->reasonable_capacity() ) {
                    error_msg((yylsp[-2]), "%s limited to capacity of %d (would need %u)",
			     field->name, MAX_FIXED_POINT_DIGITS, field->data.capacity);
                  }
                }
#line 19707 "parse.cc"
    break;

  case 472: /* picture_clause: PIC alphanum_pic  */
#line 3973 "parse.y"
                {
                  cbl_field_t *field = current_field();

		  if( field->type == FldNumericBin5 &&
		      field->data.capacity == 0  &&
		      dialect_mf() )
		  { // PIC X COMP-X or COMP-9
		    if( ! field->has_attr(all_x_e) ) {
		      error_msg((yylsp[0]), "COMP PICTURE requires all X's or all 9's");
                      YYERROR;
		    }
		  } else {
                    if( !field_type_update(field, FldAlphanumeric, (yyloc)) ) {
                      YYERROR;
                    }
		  }
                  assert(0 < (yyvsp[0].number));
                  if( field->data.initial != NULL ) {
                    if( 0 < field->data.capacity &&
                            field->data.capacity < uint32_t((yyvsp[0].number)) ) {
                      auto p = blank_pad_initial( field->data.initial,
                                                  field->data.capacity, (yyvsp[0].number) );
                      if( !p ) YYERROR;
                      field->data.initial = p;
                    }
                  }

                  field->data.capacity = (yyvsp[0].number);
                  field->data.picture = NULL;

                  if( false ) dbgmsg("PIC alphanum_pic[size]:%d: %s",
                                      field->line, field_str(field));
                }
#line 19745 "parse.cc"
    break;

  case 473: /* picture_clause: PIC numed  */
#line 4008 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  if( !field_type_update(field, FldNumericEdited, (yyloc)) ) {
                    YYERROR;
                  }
                  ERROR_IF_CAPACITY((yylsp[-1]), field);
                  if( !is_numeric_edited((yyvsp[0].string)) ) {
                    error_msg((yylsp[0]), numed_message);
                    YYERROR;
                  }
                  field->data.picture = (yyvsp[0].string);
                  field->data.capacity =  length_of_picture((yyvsp[0].string));
                  field->data.digits   =  digits_of_picture((yyvsp[0].string), false);
                  field->data.rdigits  = rdigits_of_picture((yyvsp[0].string));
                  if( is_picture_scaled((yyvsp[0].string)) ) field->attr |= scaled_e;
                }
#line 19766 "parse.cc"
    break;

  case 474: /* picture_clause: PIC ALPHED  */
#line 4026 "parse.y"
                {
                  bool is_alpha_edited( const char picture[] );

                  cbl_field_t *field = current_field();
                  ERROR_IF_CAPACITY((yylsp[-1]), field);
                  field->data.capacity = length_of_picture((yyvsp[0].string));
                  field->data.picture = (yyvsp[0].string);

                  // In case the lexer guesses wrong.
                  cbl_field_type_t type = is_numeric_edited((yyvsp[0].string))?
                                          FldNumericEdited : FldAlphaEdited;
                  if( !field_type_update(field, type, (yyloc)) ) {
                    YYERROR;
                  }

                  switch( type ) {
                  case FldNumericEdited:
                    field->data.digits   =  digits_of_picture((yyvsp[0].string), false);
                    field->data.rdigits  = rdigits_of_picture((yyvsp[0].string));
                    if( is_picture_scaled((yyvsp[0].string)) ) field->attr |= scaled_e;
                    break;
                  case FldAlphaEdited:
                    if( !is_alpha_edited(field->data.picture) ) {
                      error_msg((yylsp[0]), "invalid picture for Alphanumeric-edited");
                      YYERROR;
                    }
                    break;
                  default:
                    gcc_unreachable();
                  }
                }
#line 19802 "parse.cc"
    break;

  case 475: /* alphanum_pic: alphanum_part  */
#line 4059 "parse.y"
                              {
                  current_field()->set_attr((yyvsp[0].pic_part).attr);
                  (yyval.number) = (yyvsp[0].pic_part).nbyte;
                }
#line 19811 "parse.cc"
    break;

  case 476: /* alphanum_pic: alphanum_pic alphanum_part  */
#line 4064 "parse.y"
                {
		  auto field = current_field();
		  dbgmsg("%s has %s against %s",
			 field->name, field_attr_str(field),
			 cbl_field_attr_str((yyvsp[0].pic_part).attr));

		  if( ! field->has_attr((yyvsp[0].pic_part).attr) ) {
                    field->clear_attr(all_ax_e); // clears 2 bits
                  }
                  (yyval.number) += (yyvsp[0].pic_part).nbyte;

		  dbgmsg("%s attrs: %s", field->name, field_attr_str(field));
                }
#line 19829 "parse.cc"
    break;

  case 477: /* alphanum_part: ALNUM count  */
#line 4079 "parse.y"
                {
                  (yyval.pic_part).attr = uniform_picture((yyvsp[-1].string));
                  (yyval.pic_part).nbyte = strlen((yyvsp[-1].string));
		  auto count((yyvsp[0].number));
                  if( count > 0 ) {
                    --count;
                    (yyval.pic_part).nbyte += count; // AX9(3) has count 5
                  }
		  if( count < 0 ) {
		    error_msg((yylsp[0]), "PICTURE count '(%d)' is negative", count );
		    YYERROR;
		  }
                }
#line 19847 "parse.cc"
    break;

  case 478: /* signed: %empty  */
#line 4094 "parse.y"
                                 { (yyval.number) = 0; }
#line 19853 "parse.cc"
    break;

  case 479: /* signed: 'S'  */
#line 4095 "parse.y"
                                 { (yyval.number) = signable_e; }
#line 19859 "parse.cc"
    break;

  case 480: /* nps: %empty  */
#line 4098 "parse.y"
                                 { (yyval.number) = 0; }
#line 19865 "parse.cc"
    break;

  case 481: /* nps: PIC_P  */
#line 4099 "parse.y"
                                 { (yyval.number) = (yyvsp[0].number); }
#line 19871 "parse.cc"
    break;

  case 482: /* nine: %empty  */
#line 4102 "parse.y"
                                 { (yyval.number) = 0; }
#line 19877 "parse.cc"
    break;

  case 483: /* nine: nines  */
#line 4104 "parse.y"
                {
                  (yyval.number) = (yyvsp[0].number);
		  if( (yyval.number) == 0 ) {
		    error_msg((yylsp[0]), "'(0)' invalid in PICTURE (ISO 2023 13.18.40.3)");
		  }
                }
#line 19888 "parse.cc"
    break;

  case 485: /* nines: nines NINES  */
#line 4112 "parse.y"
                            { (yyval.number) = (yyvsp[-1].number) + (yyvsp[0].number); }
#line 19894 "parse.cc"
    break;

  case 486: /* count: %empty  */
#line 4115 "parse.y"
                                 { (yyval.number) = 0; }
#line 19900 "parse.cc"
    break;

  case 487: /* count: '(' "numeric literal" ')'  */
#line 4117 "parse.y"
                {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  (yyval.number) = real_to_integer (&rn);
		  if( (yyval.number) == 0 ) {
		    error_msg((yylsp[-1]), "'(0)' invalid in PICTURE (ISO 2023 13.18.40.3)");
		  }
                }
#line 19912 "parse.cc"
    break;

  case 488: /* count: '(' NAME ')'  */
#line 4125 "parse.y"
                {
		  auto value = cdf_value((yyvsp[-1].string));
		  if( ! (value && value->is_numeric()) ) {
		    error_msg((yylsp[-1]), "PICTURE '(%s)' requires a CONSTANT value", (yyvsp[-1].string) );
		    YYERROR;
		  }
		  int nmsg = 0;
		  auto e = symbol_field(PROGRAM, 0, (yyvsp[-1].string));
		  if( e ) { // verify not floating point with nonzero fraction
		    auto field = cbl_field_of(e);
		    assert(is_literal(field));
		    REAL_VALUE_TYPE vi;
		    real_from_integer (&vi, VOIDmode, field->as_integer(), SIGNED);
		    if( !real_identical (TREE_REAL_CST_PTR (field->data.value_of()),
				         &vi) ) {
		      nmsg++;
		      error_msg((yylsp[-1]), "invalid PICTURE count '(%s)'",
				field->data.initial );
		    }
		  }
		  (yyval.number) = value->as_number();
		  if( (yyval.number) <= 0 && !nmsg) {
		    error_msg((yylsp[-1]), "invalid PICTURE count '(%s)'", (yyvsp[-1].string) );
		  }
                }
#line 19942 "parse.cc"
    break;

  case 492: /* usage_clause: usage_clause1  */
#line 4158 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  cbl_field_type_t type = static_cast<cbl_field_type_t>((yyvsp[0].number));
                  if( ! field_type_update(field, type, (yyloc), true) ) {
                    YYERROR;
                  }
                }
#line 19954 "parse.cc"
    break;

  case 493: /* usage_clause1: usage COMPUTATIONAL native  */
#line 4167 "parse.y"
                {
                  bool infer = true;
                  cbl_field_t *field = current_field();

                  // Some binary types have defined capacity;
                  switch((yyvsp[-1].computational).type) {
                  // COMPUTATIONAL and COMP-5 rely on PICTURE.
                  case FldNumericBinary:
                    field->attr |= big_endian_e;
                    __attribute__((fallthrough));
                  case FldNumericBin5:
		    // If no capacity yet, then no picture, infer $comp.capacity.
		    // If field has capacity, ensure USAGE is compatible.
		    if( field->data.capacity > 0 ) { // PICTURE before USAGE
		      infer = false;
		      switch( field->type ) {
		      case FldAlphanumeric:   // PIC X COMP-5 or COMP-X
			assert( field->data.digits == 0 );
			assert( field->data.rdigits == 0 );
		        if( dialect_mf() ) {
                          field->type = (yyvsp[-1].computational).type;
			  field->clear_attr(signable_e);
		        } else {
			  error_msg((yylsp[-1]), "numeric USAGE invalid "
				   "with Alpnanumeric PICTURE");
			  YYERROR;
		        }
                        break;
		      case FldNumericDisplay: // PIC 9 COMP-5 or COMP-X
		        if( (yyvsp[-1].computational).capacity == 0xFF ) { // comp-x is a bit like comp-5
			  assert( field->data.digits == field->data.capacity );
		          if( ! dialect_mf() ) {
				  dialect_error((yylsp[-2]), "COMP-X", "mf");
		          }
			}
                        field->type = (yyvsp[-1].computational).type;
                        field->data.capacity = type_capacity(field->type,
                                                             field->data.digits);
		        break;
		      default: break;
                      }
		    }
                    break;
		  case FldPacked: // comp-6 is unsigned comp-3
		    assert(! (yyvsp[-1].computational).signable);  // else PACKED_DECIMAL from scanner
		    field->attr |= separate_e;
		    if( ! dialect_mf() ) {
		      dialect_error((yylsp[-2]), "COMP-6", "mf");
		    }
                    if( field->type == FldNumericDisplay ) {// PICTURE before USAGE
                      infer = false;
                      assert(field->data.capacity > 0);
                      field->type = (yyvsp[-1].computational).type;
                      field->data.capacity = type_capacity(field->type,
                                                           field->data.digits);
                    }
		    break;
                  default:
                    break;
                  }

                  if( infer ) {
                    if( (yyvsp[-1].computational).capacity > 0 ) {
                      if( field->data.capacity > 0 ) {
                        error_msg((yylsp[-1]), "%s is BINARY type, incompatible with PICTURE",
                               field->name);
                        YYERROR;
                      }
                      field->data.capacity = (yyvsp[-1].computational).capacity;
                      field->type = (yyvsp[-1].computational).type;
                      if( (yyvsp[-1].computational).signable ) {
                        field->attr = (field->attr | signable_e);
                      }
                    }
                  }
                  (yyval.number) = (yyvsp[-1].computational).type;
                }
#line 20036 "parse.cc"
    break;

  case 494: /* usage_clause1: usage DISPLAY native  */
#line 4244 "parse.y"
                                             { (yyval.number) = FldDisplay; }
#line 20042 "parse.cc"
    break;

  case 495: /* usage_clause1: usage PACKED_DECIMAL native  */
#line 4245 "parse.y"
                                             { (yyval.number) = FldPacked; }
#line 20048 "parse.cc"
    break;

  case 496: /* usage_clause1: usage PACKED_DECIMAL with NO SIGN  */
#line 4247 "parse.y"
                {
                  cbl_field_t *field = current_field();
		  if( field->data.capacity > 0 &&
		      field->type != FldNumericDisplay) {
		    error_msg((yylsp[-3]), "%s PICTURE is incompatible with USAGE PACKED DECIMAL",
			     field->name);
		    YYERROR;
		  }
		  field->clear_attr(separate_e);
		  field->clear_attr(signable_e);
                  if( field->type == FldNumericDisplay ) {// PICTURE before USAGE
                    assert(field->data.capacity > 0);
                    field->data.capacity = type_capacity(FldPacked,
                                                         field->data.digits);
                  }
		  (yyval.number) = field->type = FldPacked;
		}
#line 20070 "parse.cc"
    break;

  case 497: /* usage_clause1: usage INDEX  */
#line 4264 "parse.y"
                                             {
                  (yyval.number) = symbol_field_index_set( current_field() )->type;
                }
#line 20078 "parse.cc"
    break;

  case 498: /* usage_clause1: usage POINTER  */
#line 4269 "parse.y"
                {
                  (yyval.number) = FldPointer;
                  auto field = current_field();
                  auto redefined = symbol_redefines(field);

		  if( (yyvsp[0].field_attr) ) {
		    field->set_attr((yyvsp[0].field_attr));
		  }
                  if( gcobol_feature_embiggen() && redefined &&
                      is_numeric(redefined->type) && redefined->size() == 4) {
                    // For now, we allow POINTER to expand a 32-bit item to 64 bits.
                    field->data.capacity = int_size_in_bytes(ptr_type_node);
                    dbgmsg("%s: expanding #%zu %s capacity %u => %u", __func__,
                          field_index(redefined), redefined->name,
                          redefined->data.capacity, field->data.capacity);

                    redefined->embiggen();

                    if( redefined->data.initial ) {
                      auto s = xasprintf( "%s    ", redefined->data.initial);
                      std::replace(s, s + strlen(s), '!', char(0x20));
                      redefined->data.initial = s;
                    }
                  }
                }
#line 20108 "parse.cc"
    break;

  case 499: /* usage_clause1: usage POINTER TO error  */
#line 4295 "parse.y"
                {
                  cbl_unimplemented("POINTER TO");
                  (yyval.number) = FldPointer;
                }
#line 20117 "parse.cc"
    break;

  case 500: /* value_clause: VALUE all LITERAL  */
#line 4301 "parse.y"
                                       {
                  cbl_field_t *field = current_field();
                  field->data.initial  = (yyvsp[0].literal).data;
                  field->attr |= literal_attr((yyvsp[0].literal).prefix);
                  // The __gg__initialize_data routine needs to know that VALUE is a
                  // quoted literal. This is critical for NumericEdited variables
                  field->attr |= quoted_e;

                  if( field->data.capacity == 0 ) {
                    field->data.capacity = (yyvsp[0].literal).len;
                  } else {
                    if( (yyvsp[-1].boolean) ) {
                      field_value_all(field);
                    } else {
                      if( (yyvsp[0].literal).len < field->data.capacity ) {
                        auto p = blank_pad_initial( (yyvsp[0].literal).data, (yyvsp[0].literal).len,
                                                    field->data.capacity );
                        if( !p ) YYERROR;
                        field->data.initial = p;
                      }
                    }
                  }
                  value_encoding_check((yylsp[0]), field);
                }
#line 20146 "parse.cc"
    break;

  case 501: /* value_clause: VALUE all cce_expr  */
#line 4325 "parse.y"
                                          {
                  cbl_field_t *field = current_field();
                  auto orig_str = original_number();
		  REAL_VALUE_TYPE orig_val;
		  real_from_string3 (&orig_val, orig_str,
				     TYPE_MODE (float128_type_node));
                  char *initial = NULL;

                  if( real_identical (&orig_val, &(yyvsp[0].float128)) ) {
                    initial = orig_str;
                    pristine_values.insert(initial);
                  } else {
                    initial = string_of((yyvsp[0].float128));
                    gcc_assert(initial);
                  }

                  char decimal = symbol_decimal_point();
                  std::replace(initial, initial + strlen(initial), '.', decimal);

                  field->data.initial = initial;
                  field->data = build_real (float128_type_node, (yyvsp[0].float128));

                  if( (yyvsp[-1].boolean) ) field_value_all(field);
                }
#line 20175 "parse.cc"
    break;

  case 502: /* value_clause: VALUE all reserved_value  */
#line 4350 "parse.y"
                {
                  if( (yyvsp[0].number) != NULLS ) {
                    auto fig = constant_of(constant_index((yyvsp[0].number)));
                    current_field()->data.initial = fig->data.initial;
                  }
                }
#line 20186 "parse.cc"
    break;

  case 503: /* value_clause: NULLPTR  */
#line 4357 "parse.y"
                {
                    auto fig = constant_of(constant_index(NULLS));
                    current_field()->data.initial = fig->data.initial;
                }
#line 20195 "parse.cc"
    break;

  case 504: /* value_clause: VALUE error  */
#line 4362 "parse.y"
                {
                  error_msg((yylsp[0]), "no valid VALUE supplied");
                }
#line 20203 "parse.cc"
    break;

  case 505: /* global_clause: is GLOBAL  */
#line 4368 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  field->attr |= (field->attr | global_e);
                }
#line 20212 "parse.cc"
    break;

  case 506: /* external_clause: is EXTERNAL  */
#line 4374 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  field->attr |= (field->attr | external_e);
                }
#line 20221 "parse.cc"
    break;

  case 507: /* justified_clause: is JUSTIFIED  */
#line 4381 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  field->attr |= rjust_e;
                }
#line 20230 "parse.cc"
    break;

  case 508: /* redefines_clause: REDEFINES NAME  */
#line 4388 "parse.y"
                {
                  struct symbol_elem_t *e = field_of((yyvsp[0].string));
                  if( !e ) {
                    error_msg((yylsp[0]), "REDEFINES target not defined");
                    YYERROR;
                  }
                  cbl_field_t *field = current_field();
                  cbl_field_t *orig = cbl_field_of(e);
		  if( orig->has_attr(filler_e) ) {
                    error_msg((yylsp[0]), "%s may not REDEFINE %s",
                            field->name, orig->name);
		  }
                  cbl_field_t *super = symbol_redefines(orig);
                  if( super ) {
                    error_msg((yylsp[0]), "%s may not REDEFINE %s, "
                            "which redefines %s",
                            field->name, orig->name, super->name);
                  }
                  if( field->level != orig->level ) {
                    error_msg((yylsp[0]), "cannot redefine %s %s as %s %s "
                             "because they have different levels",
			    orig->level_str(), name_of(orig),
			    field->level_str(), name_of(field));
                  }
		  // ISO 13.18.44.3
		  auto parent( symbol_index(e) );
		  auto p = std::find_if( symbol_elem_of(orig) + 1,
					 symbol_elem_of(field),
					 [parent, level = field->level]( const auto& elem ) {
					   if( elem.type == SymField ) {
					     auto f = cbl_field_of(&elem);
					     return
					       f->level  == level &&
					       f->parent != parent;
					   }
					   return false;
					 } );
		  if( p != symbol_elem_of(field) ) {
		    auto mid( cbl_field_of(p) );
                    error_msg((yylsp[0]), "cannot redefine %s %s as %s %s "
			    "because %s %s intervenes",
			    orig->level_str(), name_of(orig),
			    field->level_str(), name_of(field),
			    mid->level_str(), name_of(mid));
                  }

                  if( valid_redefine((yylsp[0]), field, orig) ) {
                    /*
                     * Defer "inheriting" the parent's description until the
                     * redefine is complete.
                     */
                    current_field()->parent = symbol_index(e);
                  }
                }
#line 20289 "parse.cc"
    break;

  case 509: /* any_length: ANY LENGTH  */
#line 4445 "parse.y"
                { cbl_field_t *field = current_field();
                  if( field->attr & any_length_e ) {
                    error_msg((yylsp[-1]), "ANY LENGTH already set");
                  }
                  if( ! (field->level == 1 &&
                         current_data_section == linkage_datasect_e &&
                         (1 < current.program_level() ||
			      current.program()->is_function())) ) {
                    error_msg((yylsp[-1]), "ANY LENGTH valid only for 01 "
                            "in LINKAGE SECTION of a function or contained program");
                    YYERROR;
                  }
                  field->attr |= any_length_e;
                }
#line 20308 "parse.cc"
    break;

  case 510: /* based_clause: BASED  */
#line 4462 "parse.y"
                { cbl_field_t *field = current_field();
                  if( field->attr & based_e ) {
                    error_msg((yylsp[0]), "BASED already set");
                  }
                  field->attr |= based_e;
                }
#line 20319 "parse.cc"
    break;

  case 511: /* blank_zero_clause: blank_when_zero  */
#line 4471 "parse.y"
                { cbl_field_t *field = current_field();
                  // the BLANK WHEN ZERO clause defines the item as numeric-edited.
                  if( !field_type_update(field, FldNumericEdited, (yylsp[0])) ) {
                    YYERROR;
                  }
                  field->attr |= blank_zero_e;
                }
#line 20331 "parse.cc"
    break;

  case 517: /* same_clause: SAME AS name  */
#line 4490 "parse.y"
                {
                  cbl_field_t *field = current_field(), *other = (yyvsp[0].field);
                  if( other->occurs.ntimes() > 0 ) {
                    error_msg((yylsp[0]), "SAME AS %s: cannot have OCCURS",
                             other->name); // 13.18.49.2,P5
                    YYERROR;
                  }
                  if( field->level == 77 and !is_elementary(other->type) ) {
		    // ISO 2023 13.18.49.2,P8
                    error_msg((yylsp[0]), "%s %s SAME AS %s: must be elementary",
			    field->level_str(), field->name, other->name);
                    YYERROR;
                  }

                  if( (other->attr & (sign_clause_e | usage_clause_e)) > 0 ) {
                    error_msg((yylsp[0]), "%s: source of SAME AS cannot have "
                               "SIGN or USAGE clause", other->name);
                    YYERROR;
                  }
                  if( other->usage == FldGroup ) {
                    error_msg((yylsp[0]), "%s: source of SAME AS cannot have "
                               "GROUP-USAGE clause", other->name);
                    YYERROR;
                  }
                  if( other->has_attr(constant_e ) ) {
                    error_msg((yylsp[0]), "%s: source of SAME AS cannot "
                               "be constant", other->name);
                    YYERROR;
                  }
                  if( field->parent == field_index(other) ) {
                    error_msg((yylsp[0]), "%s: SAME AS uses "
                             "its own parent %s", field->name, other->name);
                    YYERROR;
                  }

                  auto e = symbol_field_same_as( field, other );
                  symbol_field_location( symbol_index(e), (yylsp[0]) );
                }
#line 20374 "parse.cc"
    break;

  case 518: /* sign_clause: sign_is sign_leading sign_separate  */
#line 4531 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  if( (yyvsp[-1].boolean) ) {
                    field->attr |= leading_e;
                  } else {
                    field->attr &= ~size_t(leading_e); // turn off in case inherited
                    field->attr |= signable_e;
                  }
                  if( (yyvsp[0].boolean) ) field->attr |= separate_e;
                }
#line 20389 "parse.cc"
    break;

  case 521: /* sign_leading: LEADING  */
#line 4545 "parse.y"
                         { (yyval.boolean) = true; }
#line 20395 "parse.cc"
    break;

  case 522: /* sign_leading: TRAILING  */
#line 4546 "parse.y"
                         { (yyval.boolean) = false; }
#line 20401 "parse.cc"
    break;

  case 523: /* sign_separate: %empty  */
#line 4548 "parse.y"
                                    { (yyval.boolean) = false; }
#line 20407 "parse.cc"
    break;

  case 524: /* sign_separate: SEPARATE CHARACTER  */
#line 4549 "parse.y"
                                    { (yyval.boolean) = true; }
#line 20413 "parse.cc"
    break;

  case 525: /* sign_separate: SEPARATE  */
#line 4550 "parse.y"
                                    { (yyval.boolean) = true; }
#line 20419 "parse.cc"
    break;

  case 526: /* type_clause: TYPE to typename  */
#line 4571 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  if( (yyvsp[0].field) ) {
                    auto e = symbol_field_same_as(field, (yyvsp[0].field));
		    symbol_field_location( symbol_index(e), (yylsp[0]) );
                  }
                }
#line 20431 "parse.cc"
    break;

  case 527: /* type_clause: USAGE is typename  */
#line 4579 "parse.y"
                {
                  if( ! dialect_mf() ) {
                    dialect_error((yylsp[0]), "USAGE TYPENAME", "mf");
                    YYERROR;
                  }
                  cbl_field_t *field = current_field();
                  if( (yyvsp[0].field) ) {
                    auto e = symbol_field_same_as(field, (yyvsp[0].field));
		    symbol_field_location( symbol_index(e), (yylsp[0]) );
                  }
                }
#line 20447 "parse.cc"
    break;

  case 528: /* typedef_clause: is TYPEDEF strong  */
#line 4593 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  switch( field->level ) {
                  case 1: case 77: break;
                  default:
                    error_msg((yylsp[-1]), "%s %s IS TYPEDEF must be level 01",
			    field->level_str(), field->name);
                  }
                  field->attr |= typedef_e;
                  if( (yyvsp[0].boolean) ) field->attr |= strongdef_e;
                  if( ! current.typedef_add(field) ) {
                    auto prior = current.has_typedef(field);
                    assert(prior);
                    error_msg((yylsp[-1]), "%s %s IS TYPEDEF is not unique "
                             "(see %s, line %d)",
			    field->level_str(), field->name,
			    prior->name, prior->line);
                  }
                }
#line 20471 "parse.cc"
    break;

  case 529: /* volatile_clause: VOLATILE  */
#line 4616 "parse.y"
                {
                  if( dialect_ibm() ) {
                    yywarn("VOLATILE has no effect");
                  } else {
                    dialect_error((yylsp[0]), "VOLATILE", "ibm");
                  }
                }
#line 20483 "parse.cc"
    break;

  case 530: /* procedure_div: %empty  */
#line 4625 "parse.y"
                       {
		  if( !procedure_division_ready((yyloc), NULL, NULL) ) YYABORT;
                }
#line 20491 "parse.cc"
    break;

  case 531: /* $@10: %empty  */
#line 4628 "parse.y"
                                  {
                  if( !procedure_division_ready((yyloc), NULL, NULL) ) YYABORT;
                }
#line 20499 "parse.cc"
    break;

  case 535: /* procedure_args: USING procedure_uses  */
#line 4636 "parse.y"
                {
                  if( !procedure_division_ready((yylsp[0]), NULL, (yyvsp[0].ffi_args)) ) YYABORT;
                }
#line 20507 "parse.cc"
    break;

  case 536: /* procedure_args: USING procedure_uses RETURNING name  */
#line 4640 "parse.y"
                {
                  if( !procedure_division_ready((yylsp[0]), (yyvsp[0].field), (yyvsp[-2].ffi_args)) ) YYABORT;
                  if( ! (yyvsp[0].field)->has_attr(linkage_e) ) {
                    error_msg((yylsp[0]), "RETURNING %s is not defined in LINKAGE SECTION",
			      (yyvsp[0].field)->name);
                  }
                }
#line 20519 "parse.cc"
    break;

  case 537: /* procedure_args: RETURNING name  */
#line 4648 "parse.y"
                {
                  if( !procedure_division_ready((yylsp[0]), (yyvsp[0].field), NULL) ) YYABORT;
                  if( ! (yyvsp[0].field)->has_attr(linkage_e) ) {
                    error_msg((yylsp[0]), "RETURNING %s is not defined in LINKAGE SECTION",
			      (yyvsp[0].field)->name);
                  }
                }
#line 20531 "parse.cc"
    break;

  case 538: /* procedure_uses: procedure_use  */
#line 4656 "parse.y"
                              { (yyval.ffi_args) = new ffi_args_t((yyvsp[0].ffi_arg)); }
#line 20537 "parse.cc"
    break;

  case 539: /* procedure_uses: procedure_uses procedure_use  */
#line 4657 "parse.y"
                                             { (yyval.ffi_args)->push_back((yyvsp[0].ffi_arg)); }
#line 20543 "parse.cc"
    break;

  case 540: /* procedure_use: optional scalar  */
#line 4659 "parse.y"
                                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_default_e, (yyvsp[0].refer));
                  (yyval.ffi_arg)->optional = (yyvsp[-1].boolean);
                  (yyval.ffi_arg)->validate(); // produces message
                }
#line 20553 "parse.cc"
    break;

  case 541: /* procedure_use: by REFERENCE optional scalar  */
#line 4664 "parse.y"
                                             {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_reference_e, (yyvsp[0].refer));
                  (yyval.ffi_arg)->optional = (yyvsp[-1].boolean);
                  (yyval.ffi_arg)->validate(); // produces message
                }
#line 20563 "parse.cc"
    break;

  case 542: /* procedure_use: by CONTENT error  */
#line 4669 "parse.y"
                                 { // no "by content" in procedure definition
                    (yyval.ffi_arg) = new cbl_ffi_arg_t(by_content_e,
                                           new_reference(literally_zero));
                }
#line 20572 "parse.cc"
    break;

  case 543: /* procedure_use: by VALUE by_value_arg  */
#line 4673 "parse.y"
                                           {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_value_e, (yyvsp[0].refer));
                  (yyval.ffi_arg)->validate(); // produces message
                }
#line 20581 "parse.cc"
    break;

  case 545: /* by_value_arg: LITERAL  */
#line 4679 "parse.y"
                         { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 20587 "parse.cc"
    break;

  case 546: /* by_value_arg: reserved_value  */
#line 4681 "parse.y"
                {
                  (yyval.refer) = new_reference(constant_of(constant_index((yyvsp[0].number))));
                }
#line 20595 "parse.cc"
    break;

  case 548: /* @11: %empty  */
#line 4688 "parse.y"
                       {
                  current.enabled_exception_cache = enabled_exceptions;
                  enabled_exceptions.clear();
                  current.doing_declaratives(true);
                  (yyval.label) = label_add(LblString, "_end_declaratives", 0);
                  assert((yyval.label));
                  parser_label_goto((yyval.label));
                }
#line 20608 "parse.cc"
    break;

  case 549: /* declaratives: DECLARATIVES '.' @11 sentences END DECLARATIVES '.'  */
#line 4697 "parse.y"
                {
                  current.doing_declaratives(false);
                  /* TODO: if( intradeclarative_reference() ) yyerror;
                   * Test also at paragraph_reference, for non-forward
                   * reference with good line numbers.  See
                   * utilcc::procedures_t and ambiguous_reference().  At this
                   * point, no reference should pick up anything except a
                   * forward reference, because we haven't yet begun to parse
                   * nondeclarative procedures.
                   */
                  parser_label_label((yyvsp[-4].label));
                  enabled_exceptions = current.enabled_exception_cache;
                  current.enabled_exception_cache.clear();
		  ast_enter_section(implicit_section());
                }
#line 20628 "parse.cc"
    break;

  case 550: /* sentences: sentence  */
#line 4714 "parse.y"
                         {
		  ast_first_statement((yylsp[0]));
		  symbol_temporaries_free();
		}
#line 20637 "parse.cc"
    break;

  case 552: /* sentences: paragraph_name '.'  */
#line 4720 "parse.y"
                {
                  location_set((yylsp[-1]));
                  cbl_label_t *label = label_add((yylsp[-1]), LblParagraph, (yyvsp[-1].string));
                  if( !label ) {
                    YYERROR;
                  }
                  ast_enter_paragraph(label);
                  current.new_paragraph(label);
                  apply_declaratives();
                }
#line 20652 "parse.cc"
    break;

  case 553: /* sentences: sentences sentence  */
#line 4731 "parse.y"
                { // sentences might not be sentence
		  ast_first_statement((yylsp[0]));
		  symbol_temporaries_free();
		}
#line 20661 "parse.cc"
    break;

  case 555: /* sentences: sentences paragraph_name '.'  */
#line 4737 "parse.y"
                {
                  location_set((yylsp[-1]));
                  cbl_label_t *label = label_add((yylsp[-1]), LblParagraph, (yyvsp[-1].string));
                  if( !label ) {
                    YYERROR;
                  }
                  ast_enter_paragraph(label);
                  current.new_paragraph(label);
                  apply_declaratives();
                }
#line 20676 "parse.cc"
    break;

  case 557: /* paragraph_name: "numeric literal"  */
#line 4749 "parse.y"
                       { (yyval.string) = (yyvsp[0].numstr).string; }
#line 20682 "parse.cc"
    break;

  case 559: /* sentence: statements "end of file"  */
#line 4754 "parse.y"
                {
                  if( ! goodnight_gracie() ) {
                    YYABORT;
                  }
                  if( nparse_error > 0 ) YYABORT;
                  YYACCEPT;
                }
#line 20694 "parse.cc"
    break;

  case 560: /* sentence: program "END PROGRAM <contained program>" namestr '.'  */
#line 4762 "parse.y"
                { // a contained program (no prior END PROGRAM) is a "sentence"
                  const cbl_label_t *prog = current.program();
                  assert(prog);
                  const char *name = string_of((yyvsp[-1].literal));
                  if( !name || 0 != strcasecmp(prog->name, name) ) {
                    error_msg((yylsp[-1]),  "END PROGRAM '%s' does not match PROGRAM-ID '%s'",
                              name? name : (yyvsp[-1].literal).data, prog->name);
                    YYERROR;
                  }

                  std::set<std::string> externals = current.end_program();
                  if( !externals.empty() ) {
                    for( const auto& name : externals ) {
                      yywarn("%s calls external symbol '%s'",
                             prog->name, name.c_str());
                    }
                    YYERROR;
                  }
                  // pointer still valid because name is in symbol table
                  ast_end_program(prog->name);
                }
#line 20720 "parse.cc"
    break;

  case 561: /* sentence: program "end of file"  */
#line 4784 "parse.y"
                { // a contained program (no prior END PROGRAM) is a "sentence"
                  if( nparse_error > 0 ) YYABORT;
                  do {
		    if( ! goodnight_gracie() ) YYABORT; // no recovery
                  } while( current.program_level() > 0 );
                  YYACCEPT;
                }
#line 20732 "parse.cc"
    break;

  case 562: /* statements: statement  */
#line 4793 "parse.y"
                                     { (yyval.number) = (yyvsp[0].number); }
#line 20738 "parse.cc"
    break;

  case 563: /* statements: statements statement  */
#line 4794 "parse.y"
                                     { (yyval.number) = (yyvsp[0].number); }
#line 20744 "parse.cc"
    break;

  case 564: /* statement: error  */
#line 4797 "parse.y"
                      {
                  if( current.declarative_section_name() ) {
		    error_msg((yylsp[0]), "missing END DECLARATIVES or SECTION name",
			      nparse_error);
                    YYABORT;
                  }
                  if( max_errors_exceeded(nparse_error) ) {
                    error_msg((yylsp[0]), "max errors %d reached", nparse_error);
                    YYABORT;
                  }
                }
#line 20760 "parse.cc"
    break;

  case 565: /* statement: accept  */
#line 4808 "parse.y"
                                { (yyval.number) =  ACCEPT; }
#line 20766 "parse.cc"
    break;

  case 566: /* statement: add  */
#line 4809 "parse.y"
                                { (yyval.number) =  ADD; }
#line 20772 "parse.cc"
    break;

  case 567: /* statement: allocate  */
#line 4810 "parse.y"
                                { (yyval.number) =  ALLOCATE; }
#line 20778 "parse.cc"
    break;

  case 568: /* statement: alter  */
#line 4811 "parse.y"
                                { (yyval.number) =  ALTER; }
#line 20784 "parse.cc"
    break;

  case 569: /* statement: call  */
#line 4812 "parse.y"
                                { (yyval.number) =  CALL; }
#line 20790 "parse.cc"
    break;

  case 570: /* statement: cancel  */
#line 4813 "parse.y"
                                { (yyval.number) =  CANCEL; }
#line 20796 "parse.cc"
    break;

  case 571: /* statement: close  */
#line 4814 "parse.y"
                                { (yyval.number) =  CLOSE; }
#line 20802 "parse.cc"
    break;

  case 572: /* statement: compute  */
#line 4815 "parse.y"
                                { (yyval.number) =  COMPUTE; }
#line 20808 "parse.cc"
    break;

  case 573: /* statement: continue_stmt  */
#line 4816 "parse.y"
                                { (yyval.number) =  CONTINUE; }
#line 20814 "parse.cc"
    break;

  case 574: /* statement: delete  */
#line 4817 "parse.y"
                                { (yyval.number) =  DELETE; }
#line 20820 "parse.cc"
    break;

  case 575: /* statement: display  */
#line 4818 "parse.y"
                                { (yyval.number) =  DISPLAY; }
#line 20826 "parse.cc"
    break;

  case 576: /* statement: divide  */
#line 4819 "parse.y"
                                { (yyval.number) =  DIVIDE; }
#line 20832 "parse.cc"
    break;

  case 577: /* statement: entry  */
#line 4820 "parse.y"
                                { (yyval.number) =  ENTRY; }
#line 20838 "parse.cc"
    break;

  case 578: /* statement: evaluate  */
#line 4821 "parse.y"
                                { (yyval.number) =  EVALUATE; }
#line 20844 "parse.cc"
    break;

  case 579: /* statement: exit  */
#line 4822 "parse.y"
                                { (yyval.number) =  EXIT; }
#line 20850 "parse.cc"
    break;

  case 580: /* statement: free  */
#line 4823 "parse.y"
                                { (yyval.number) =  FREE; }
#line 20856 "parse.cc"
    break;

  case 581: /* statement: go_to  */
#line 4824 "parse.y"
                                { (yyval.number) =  GOTO; }
#line 20862 "parse.cc"
    break;

  case 582: /* statement: if_stmt  */
#line 4825 "parse.y"
                                { (yyval.number) =  IF; }
#line 20868 "parse.cc"
    break;

  case 583: /* statement: initialize  */
#line 4826 "parse.y"
                                { (yyval.number) =  INITIALIZE; }
#line 20874 "parse.cc"
    break;

  case 584: /* statement: inspect  */
#line 4827 "parse.y"
                                { (yyval.number) =  INSPECT; }
#line 20880 "parse.cc"
    break;

  case 585: /* statement: merge  */
#line 4828 "parse.y"
                                { (yyval.number) =  MERGE; }
#line 20886 "parse.cc"
    break;

  case 586: /* statement: move  */
#line 4829 "parse.y"
                                { (yyval.number) =  MOVE; }
#line 20892 "parse.cc"
    break;

  case 587: /* statement: multiply  */
#line 4830 "parse.y"
                                { (yyval.number) =  MULTIPLY; }
#line 20898 "parse.cc"
    break;

  case 588: /* statement: open  */
#line 4831 "parse.y"
                                { (yyval.number) =  OPEN; }
#line 20904 "parse.cc"
    break;

  case 589: /* statement: return_stmt  */
#line 4832 "parse.y"
                                { (yyval.number) =  RETURN; }
#line 20910 "parse.cc"
    break;

  case 590: /* statement: perform  */
#line 4833 "parse.y"
                                { (yyval.number) =  PERFORM; }
#line 20916 "parse.cc"
    break;

  case 591: /* statement: raise  */
#line 4834 "parse.y"
                                { (yyval.number) =  RAISE; }
#line 20922 "parse.cc"
    break;

  case 592: /* statement: read  */
#line 4835 "parse.y"
                                { (yyval.number) =  READ; }
#line 20928 "parse.cc"
    break;

  case 593: /* statement: release  */
#line 4836 "parse.y"
                                { (yyval.number) =  RELEASE; }
#line 20934 "parse.cc"
    break;

  case 594: /* statement: resume  */
#line 4837 "parse.y"
                                { (yyval.number) =  RESUME; }
#line 20940 "parse.cc"
    break;

  case 595: /* statement: rewrite  */
#line 4838 "parse.y"
                                { (yyval.number) =  REWRITE; }
#line 20946 "parse.cc"
    break;

  case 596: /* statement: search  */
#line 4839 "parse.y"
                                { (yyval.number) =  SEARCH; }
#line 20952 "parse.cc"
    break;

  case 597: /* statement: set  */
#line 4840 "parse.y"
                                { (yyval.number) =  SET; }
#line 20958 "parse.cc"
    break;

  case 598: /* statement: sort  */
#line 4841 "parse.y"
                                { (yyval.number) =  SORT; }
#line 20964 "parse.cc"
    break;

  case 599: /* statement: start  */
#line 4842 "parse.y"
                                { (yyval.number) =  START; }
#line 20970 "parse.cc"
    break;

  case 600: /* statement: stop  */
#line 4843 "parse.y"
                                { (yyval.number) =  STOP; }
#line 20976 "parse.cc"
    break;

  case 601: /* statement: string  */
#line 4844 "parse.y"
                                { (yyval.number) =  STRING_kw; }
#line 20982 "parse.cc"
    break;

  case 602: /* statement: subtract  */
#line 4845 "parse.y"
                                { (yyval.number) =  SUBTRACT; }
#line 20988 "parse.cc"
    break;

  case 603: /* statement: unstring  */
#line 4846 "parse.y"
                                { (yyval.number) =  UNSTRING; }
#line 20994 "parse.cc"
    break;

  case 604: /* statement: write  */
#line 4847 "parse.y"
                                { (yyval.number) =  WRITE; }
#line 21000 "parse.cc"
    break;

  case 605: /* accept: accept_body end_accept  */
#line 4864 "parse.y"
                                       {
		  cbl_field_t *argi = register_find("_ARGI");
		  switch( (yyvsp[-1].accept_func).func ) {
		  case accept_done_e:
		    break;
		  case accept_command_line_e:
		    if( (yyvsp[-1].accept_func).from->field == NULL ) { // take next command-line arg
		      parser_accept_command_line(*(yyvsp[-1].accept_func).into, argi, NULL, NULL);
		      cbl_num_result_t tgt { truncation_e, argi };
		      parser_add2(tgt, literally_one);	// increment argi
		    } else if( (yyvsp[-1].accept_func).from->field == argi ) {
		      parser_move(*(yyvsp[-1].accept_func).into, *(yyvsp[-1].accept_func).from);
		    } else {
		      parser_accept_command_line(*(yyvsp[-1].accept_func).into, *(yyvsp[-1].accept_func).from, NULL, NULL);
		    }
		    break;
		  case accept_envar_e:
		    parser_accept_envar(*(yyvsp[-1].accept_func).into, *(yyvsp[-1].accept_func).from, NULL, NULL);
		    break;
		  }
		}
#line 21026 "parse.cc"
    break;

  case 606: /* accept: accept_body accept_excepts end_accept  */
#line 4885 "parse.y"
                                                          {
		  cbl_field_t *argi = register_find("_ARGI");
		  switch( (yyvsp[-2].accept_func).func ) {
		  case accept_done_e:
		    error_msg((yylsp[-1]), "ON EXCEPTION valid only "
			    "with ENVIRONMENT or COMAMND-LINE(n)");
		    break;
		  case accept_command_line_e:
		    if( (yyvsp[-2].accept_func).from->field == NULL ) { // take next command-line arg
		      parser_accept_command_line(*(yyvsp[-2].accept_func).into, argi,
						 (yyvsp[-1].error).on_error, (yyvsp[-1].error).not_error);
		      cbl_num_result_t tgt { truncation_e, argi };
		      parser_add2(tgt, literally_one);	// increment argi
		    } else if( (yyvsp[-2].accept_func).from->field == argi ) {
		      parser_move(*(yyvsp[-2].accept_func).into, *(yyvsp[-2].accept_func).from);
		      if( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error ) {
			error_msg((yylsp[-1]), "ON EXCEPTION valid only "
				"with ENVIRONMENT or COMAMND-LINE(n)");
		      }
		    } else {
		      parser_accept_command_line(*(yyvsp[-2].accept_func).into, *(yyvsp[-2].accept_func).from,
						 (yyvsp[-1].error).on_error, (yyvsp[-1].error).not_error);
		    }
		    break;
		  case accept_envar_e:
		    parser_accept_envar(*(yyvsp[-2].accept_func).into, *(yyvsp[-2].accept_func).from,
					(yyvsp[-1].error).on_error, (yyvsp[-1].error).not_error);
		    break;
		  }
		}
#line 21061 "parse.cc"
    break;

  case 609: /* accept_body: accept_refer  */
#line 4921 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  parser_accept(*(yyvsp[0].refer), CONSOLE_e);
                }
#line 21070 "parse.cc"
    break;

  case 610: /* accept_body: accept_refer FROM DATE  */
#line 4926 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-2].refer)->is_reference() ) {
                    error_msg((yylsp[-2]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_yymmdd((yyvsp[-2].refer)->field);
                }
#line 21083 "parse.cc"
    break;

  case 611: /* accept_body: accept_refer FROM DATE YYYYMMDD  */
#line 4935 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-3].refer)->is_reference() ) {
                    error_msg((yylsp[-3]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_yyyymmdd((yyvsp[-3].refer)->field);
                }
#line 21096 "parse.cc"
    break;

  case 612: /* accept_body: accept_refer FROM DAY  */
#line 4944 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-2].refer)->is_reference() ) {
                    error_msg((yylsp[-2]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_yyddd((yyvsp[-2].refer)->field);
                }
#line 21109 "parse.cc"
    break;

  case 613: /* accept_body: accept_refer FROM DAY YYYYDDD  */
#line 4953 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-3].refer)->is_reference() ) {
                    error_msg((yylsp[-3]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_yyyyddd((yyvsp[-3].refer)->field);
                }
#line 21122 "parse.cc"
    break;

  case 614: /* accept_body: accept_refer FROM "DAY-OF-WEEK"  */
#line 4962 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-2].refer)->is_reference() ) {
                    error_msg((yylsp[-2]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_dow((yyvsp[-2].refer)->field);
                }
#line 21135 "parse.cc"
    break;

  case 615: /* accept_body: accept_refer FROM TIME  */
#line 4972 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-2].refer)->is_reference() ) {
                    error_msg((yylsp[-2]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_hhmmssff((yyvsp[-2].refer)->field);
                }
#line 21148 "parse.cc"
    break;

  case 616: /* accept_body: accept_refer FROM acceptable  */
#line 4981 "parse.y"
                {
		  cbl_field_t *argc = register_find("_ARGI");
		  switch( (yyvsp[0].special)->id ) {
		  case ARG_NUM_e:
		    (yyval.accept_func).func = accept_command_line_e;
		    (yyval.accept_func).into = (yyvsp[-2].refer);
		    (yyval.accept_func).from = new_reference(argc);
		    break;
		  case ARG_VALUE_e:
		    (yyval.accept_func).func = accept_command_line_e;
		    (yyval.accept_func).into = (yyvsp[-2].refer);
		    (yyval.accept_func).from = cbl_refer_t::empty();
		    break;
		  default:
		    (yyval.accept_func).func = accept_done_e;
		    parser_accept( *(yyvsp[-2].refer), (yyvsp[0].special)->id );
		  }
                }
#line 21171 "parse.cc"
    break;

  case 617: /* accept_body: accept_refer FROM ENVIRONMENT envar  */
#line 5000 "parse.y"
                {
		  (yyval.accept_func).func = accept_envar_e;
		  (yyval.accept_func).into = (yyvsp[-3].refer);
		  (yyval.accept_func).from = (yyvsp[0].refer);
                  ////  parser_accept_envar( *$1, *$envar );
                }
#line 21182 "parse.cc"
    break;

  case 618: /* accept_body: accept_refer FROM "COMMAND-LINE"  */
#line 5007 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  parser_accept_command_line(*(yyvsp[-2].refer), NULL, NULL, NULL );
                }
#line 21191 "parse.cc"
    break;

  case 619: /* accept_body: accept_refer FROM "COMMAND-LINE" '(' expr ')'  */
#line 5012 "parse.y"
                {
		  (yyval.accept_func).func = accept_command_line_e;
		  (yyval.accept_func).into = (yyvsp[-5].refer);
		  (yyval.accept_func).from = (yyvsp[-1].refer);
                  //// parser_accept_command_line(*$1, $expr->field );
                }
#line 21202 "parse.cc"
    break;

  case 620: /* accept_body: accept_refer FROM "COMMAND-LINE-COUNT"  */
#line 5018 "parse.y"
                                                     {
		  (yyval.accept_func).func = accept_done_e;
                  parser_accept_command_line_count(*(yyvsp[-2].refer));
                }
#line 21211 "parse.cc"
    break;

  case 621: /* accept_refer: ACCEPT scalar  */
#line 5024 "parse.y"
                              { statement_begin((yylsp[-1]), ACCEPT); (yyval.refer) = (yyvsp[0].refer); }
#line 21217 "parse.cc"
    break;

  case 622: /* accept_excepts: accept_excepts accept_except statements  */
#line 5028 "parse.y"
                {
                  if( (yyvsp[-2].error).on_error && (yyvsp[-2].error).not_error ) {
                    error_msg((yylsp[-1]), "too many ON EXCEPTION clauses");
                    YYERROR;
                  }
                  // "ON" and "NOT ON" could be reversed, but not duplicated.
                  if( (yyvsp[-2].error).on_error && (yyvsp[-1].error).on_error ) {
                    error_msg((yylsp[-1]), "duplicate ON EXCEPTION clauses");
                    YYERROR;
                  }
                  if( (yyvsp[-2].error).not_error && (yyvsp[-1].error).not_error ) {
                    error_msg((yylsp[-1]), "duplicate NOT ON EXCEPTION clauses");
                    YYERROR;
                  }
                  (yyval.error) = (yyvsp[-2].error);
                  if( (yyvsp[-1].error).on_error ) {
                    (yyval.error).on_error = (yyvsp[-1].error).on_error;
                    assert((yyvsp[-2].error).not_error);
                  } else {
                    (yyval.error).not_error = (yyvsp[-1].error).not_error;
                    assert((yyvsp[-2].error).on_error);
                  }
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error? (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_accept_exception_end(tgt);
                }
#line 21249 "parse.cc"
    break;

  case 623: /* accept_excepts: accept_except statements  */
#line 5056 "parse.y"
                {
                  (yyval.error) = (yyvsp[-1].error);
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error? (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_accept_exception_end(tgt);
                }
#line 21261 "parse.cc"
    break;

  case 624: /* accept_except: EXCEPTION  */
#line 5066 "parse.y"
                {
                  (yyval.error).not_error = NULL;
                  (yyval.error).on_error = label_add(LblArith,
                                          uniq_label("accept"), yylineno);
                  if( !(yyval.error).on_error ) YYERROR;
                  parser_accept_exception( (yyval.error).on_error );

                  assert( (yyvsp[0].number) == EXCEPTION || (yyvsp[0].number) == NOT );
                  if( (yyvsp[0].number) == NOT ) {
                    std::swap((yyval.error).on_error, (yyval.error).not_error);
                  }
                }
#line 21278 "parse.cc"
    break;

  case 625: /* envar: scalar  */
#line 5080 "parse.y"
                       { (yyval.refer) = (yyvsp[0].refer); (yyval.refer)->field->attr |= envar_e; }
#line 21284 "parse.cc"
    break;

  case 626: /* envar: LITERAL  */
#line 5081 "parse.y"
                        {
                  (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e));
                  (yyval.refer)->field->attr |= envar_e;
                }
#line 21293 "parse.cc"
    break;

  case 627: /* acceptable: device_name  */
#line 5088 "parse.y"
                {
                  (yyval.special) = symbol_special( (yyvsp[0].special_type).id );
                  if( !(yyval.special) ) {
                    error_msg((yylsp[0]), "no such environment name");
                    YYERROR;
                  }
                }
#line 21305 "parse.cc"
    break;

  case 628: /* acceptable: NAME  */
#line 5096 "parse.y"
                {
                  (yyval.special) = special_of((yyvsp[0].string));
                  if( !(yyval.special) ) {
                    error_msg((yylsp[0]), "no such environment mnemonic name: %s", (yyvsp[0].string));
                    YYERROR;
                  }
                }
#line 21317 "parse.cc"
    break;

  case 629: /* add: add_impl end_add  */
#line 5105 "parse.y"
                                 { ast_add((yyvsp[-1].arith)); }
#line 21323 "parse.cc"
    break;

  case 630: /* add: add_cond end_add  */
#line 5106 "parse.y"
                                 { ast_add((yyvsp[-1].arith)); }
#line 21329 "parse.cc"
    break;

  case 631: /* add_impl: ADD add_body  */
#line 5109 "parse.y"
                {
                  statement_begin((yylsp[-1]), ADD);
                  (yyval.arith) = (yyvsp[0].arith);
                }
#line 21338 "parse.cc"
    break;

  case 632: /* add_cond: ADD add_body arith_errs  */
#line 5115 "parse.y"
                {
                  statement_begin((yylsp[-2]), ADD);
                  (yyvsp[-1].arith)->on_error = (yyvsp[0].error).on_error;
                  (yyvsp[-1].arith)->not_error = (yyvsp[0].error).not_error;
                  (yyval.arith) = (yyvsp[-1].arith);
                }
#line 21349 "parse.cc"
    break;

  case 635: /* add_body: sum TO rnames  */
#line 5127 "parse.y"
                {
                  (yyval.arith) = new arith_t(no_giving_e, (yyvsp[-2].refers));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 21360 "parse.cc"
    break;

  case 636: /* add_body: sum TO num_operand GIVING rnames  */
#line 5134 "parse.y"
                {
                  (yyval.arith) = new arith_t(giving_e, (yyvsp[-4].refers));
                  (yyval.arith)->A.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 21372 "parse.cc"
    break;

  case 637: /* add_body: sum GIVING rnames  */
#line 5142 "parse.y"
                { // implicit TO
                  (yyval.arith) = new arith_t(giving_e, (yyvsp[-2].refers));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 21383 "parse.cc"
    break;

  case 638: /* add_body: CORRESPONDING sum TO rnames  */
#line 5149 "parse.y"
                {
                  corresponding_fields_t pairs =
                    corresponding_arith_fields( (yyvsp[-2].refers)->refers.front().field,
                                                rhs.front().refer.field );
                    if( pairs.empty() ) {
                      yywarn( "%s and %s have no corresponding fields",
                                (yyvsp[-2].refers)->refers.front().field->name,
                                rhs.front().refer.field->name );
                    }
                  // First src/tgt elements are templates.
                  // Their subscripts apply to the correspondents.
                  (yyval.arith) = new arith_t(corresponding_e, (yyvsp[-2].refers));
                  (yyval.arith)->tgts.push_front(rhs.front());
                  // use arith_t functor to populate A and tgts
                  *(yyval.arith) = std::for_each( pairs.begin(), pairs.end(), *(yyval.arith) );
                  (yyval.arith)->A.pop_front();
                  (yyval.arith)->tgts.pop_front();
                  rhs.clear();
                }
#line 21407 "parse.cc"
    break;

  case 639: /* rounded: %empty  */
#line 5170 "parse.y"
                                        { (yyval.opt_round) = truncation_e; }
#line 21413 "parse.cc"
    break;

  case 640: /* rounded: ROUNDED  */
#line 5171 "parse.y"
                                        { (yyval.opt_round) = current_rounded_mode(); }
#line 21419 "parse.cc"
    break;

  case 641: /* rounded: ROUNDED rounded_mode  */
#line 5172 "parse.y"
                                        { (yyval.opt_round) = rounded_of((yyvsp[0].opt_round)); }
#line 21425 "parse.cc"
    break;

  case 642: /* rounded_mode: MODE is rounded_type  */
#line 5174 "parse.y"
                                        { (yyval.opt_round) = (yyvsp[0].opt_round); }
#line 21431 "parse.cc"
    break;

  case 643: /* rounded_type: "AWAY-FROM-ZERO"  */
#line 5176 "parse.y"
                                        { (yyval.opt_round) = away_from_zero_e; }
#line 21437 "parse.cc"
    break;

  case 644: /* rounded_type: "NEAREST-EVEN NEAREST-TOWARD-ZERO"  */
#line 5177 "parse.y"
                                        { (yyval.opt_round) = nearest_toward_zero_e; }
#line 21443 "parse.cc"
    break;

  case 645: /* rounded_type: "TOWARD-GREATER"  */
#line 5178 "parse.y"
                                        { (yyval.opt_round) = toward_greater_e; }
#line 21449 "parse.cc"
    break;

  case 646: /* rounded_type: "TOWARD-LESSER"  */
#line 5179 "parse.y"
                                        { (yyval.opt_round) = toward_lesser_e; }
#line 21455 "parse.cc"
    break;

  case 648: /* round_between: "NEAREST-AWAY-FROM-ZERO"  */
#line 5182 "parse.y"
                                        { (yyval.opt_round) = nearest_away_from_zero_e; }
#line 21461 "parse.cc"
    break;

  case 649: /* round_between: NEAREST_EVEN  */
#line 5183 "parse.y"
                                        { (yyval.opt_round) = nearest_even_e; }
#line 21467 "parse.cc"
    break;

  case 650: /* round_between: PROHIBITED  */
#line 5184 "parse.y"
                                        { (yyval.opt_round) = prohibited_e; }
#line 21473 "parse.cc"
    break;

  case 651: /* round_between: TRUNCATION  */
#line 5185 "parse.y"
                                        { (yyval.opt_round) = truncation_e; }
#line 21479 "parse.cc"
    break;

  case 652: /* might_be: %empty  */
#line 5188 "parse.y"
                       { (yyval.number) = IS; }
#line 21485 "parse.cc"
    break;

  case 654: /* posneg: POSITIVE  */
#line 5192 "parse.y"
                         { (yyval.number) = (yyvsp[0].number) == NOT? le_op : gt_op; }
#line 21491 "parse.cc"
    break;

  case 655: /* posneg: NEGATIVE  */
#line 5193 "parse.y"
                         { (yyval.number) = (yyvsp[0].number) == NOT? ge_op : lt_op; }
#line 21497 "parse.cc"
    break;

  case 656: /* posneg: ZERO  */
#line 5194 "parse.y"
                         { (yyval.number) = (yyvsp[0].number) == NOT? ne_op : eq_op; }
#line 21503 "parse.cc"
    break;

  case 657: /* scalar88s: scalar88  */
#line 5197 "parse.y"
                                 { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 21509 "parse.cc"
    break;

  case 658: /* scalar88s: scalar88s scalar88  */
#line 5198 "parse.y"
                                   { (yyvsp[-1].refers)->push_back((yyvsp[0].refer)); }
#line 21515 "parse.cc"
    break;

  case 659: /* name88: "Level 88 NAME"  */
#line 5201 "parse.y"
                       {
                  name_queue.qualify((yylsp[0]), (yyvsp[0].string));
		  auto namelocs( name_queue.pop() );
		  auto names( name_queue.namelist_of(namelocs) );
                  if( ((yyval.field) = field_find(names)) == NULL ) {
                    if( procedure_div_e == current_division  ) {
		      error_msg(namelocs.back().loc,
				"DATA-ITEM '%s' not found", names.back() );
                      YYERROR;
                    }
		  }
		  assert((yyval.field)->level == 88);
		}
#line 21533 "parse.cc"
    break;

  case 660: /* scalar88: name88 subscripts refmod  */
#line 5217 "parse.y"
                {
                  size_t n = (yyvsp[-1].refers)->size();
                  auto subscripts = new cbl_refer_t[n];
                  (yyvsp[-1].refers)->use_list(subscripts);
                  if( (yyvsp[0].refmod_parts).from->is_reference() || (yyvsp[0].refmod_parts).len->is_reference() ) {
                    error_msg((yylsp[-1]), "subscripts on start:len refmod "
                            "parameters are unsupported");
                    YYERROR;
                  }
                  cbl_span_t span( (yyvsp[0].refmod_parts).from, (yyvsp[0].refmod_parts).len );
                  (yyval.refer) = new cbl_refer_t((yyvsp[-2].field), n, subscripts, span);
                }
#line 21550 "parse.cc"
    break;

  case 661: /* scalar88: name88 refmod  */
#line 5230 "parse.y"
                {
                  if( (yyvsp[0].refmod_parts).from->is_reference() || (yyvsp[0].refmod_parts).len->is_reference() ) {
                    error_msg((yylsp[0]), "subscripts on start:len refmod "
                            "parameters are unsupported");
                    YYERROR;
                  }
                  cbl_span_t span( (yyvsp[0].refmod_parts).from, (yyvsp[0].refmod_parts).len );
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field), span);
                }
#line 21564 "parse.cc"
    break;

  case 662: /* scalar88: name88 subscripts  */
#line 5240 "parse.y"
                {
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field));
                  if( (yyvsp[0].refers)->refers.size() != (yyval.refer)->subscripts_set((yyvsp[0].refers)->refers) ) {
                    subscript_dimension_error((yylsp[0]), (yyvsp[0].refers)->refers.size(), (yyval.refer));
                  }
                }
#line 21575 "parse.cc"
    break;

  case 663: /* scalar88: name88  */
#line 5247 "parse.y"
                {
                  (yyval.refer) = new_reference((yyvsp[0].field));
                }
#line 21583 "parse.cc"
    break;

  case 664: /* allocate: ALLOCATE expr CHARACTERS initialized RETURNING scalar  */
#line 5253 "parse.y"
                {
                  statement_begin((yylsp[-5]), ALLOCATE);
                  if( (yyvsp[-4].refer)->field->type == FldLiteralN ) {
		    auto size = TREE_REAL_CST_PTR ((yyvsp[-4].refer)->field->data.value_of());
                    if( real_isneg(size) || real_iszero(size) ) { 
                      error_msg((yylsp[-4]), "size must be greater than 0");
                      YYERROR;
                    }
                  }
                  reject_refmod( (yylsp[0]), *(yyvsp[0].refer) );
                  if( ! require_pointer((yylsp[0]), *(yyvsp[0].refer)) ) YYERROR;
                  parser_allocate( *(yyvsp[-4].refer), *(yyvsp[0].refer), (yyvsp[-2].boolean) );
                }
#line 21601 "parse.cc"
    break;

  case 665: /* allocate: ALLOCATE scalar initialized alloc_ret  */
#line 5267 "parse.y"
                {
                  statement_begin((yylsp[-3]), ALLOCATE);
                  if( ! (yyvsp[-2].refer)->field->has_attr(based_e) ) {
                    error_msg((yylsp[-2]), "%s must be BASED", (yyvsp[-2].refer)->name());
                    YYERROR;
                  }
                  reject_refmod( (yylsp[-2]), *(yyvsp[-2].refer) );
                  reject_refmod( (yylsp[0]), *(yyvsp[0].refer) );
                  if( (yyvsp[0].refer)->field &&
		      ! require_pointer((yylsp[0]), *(yyvsp[0].refer)) ) YYERROR;
                  parser_allocate( *(yyvsp[-2].refer), *(yyvsp[0].refer), (yyvsp[-1].boolean) );
                  if( (yyvsp[-1].boolean) ) {
                    initialize_allocated(*(yyvsp[-2].refer));
                  }
                }
#line 21621 "parse.cc"
    break;

  case 666: /* initialized: %empty  */
#line 5283 "parse.y"
                             { (yyval.boolean) = false; }
#line 21627 "parse.cc"
    break;

  case 667: /* initialized: INITIALIZED  */
#line 5284 "parse.y"
                             { (yyval.boolean) = true; }
#line 21633 "parse.cc"
    break;

  case 668: /* alloc_ret: %empty  */
#line 5286 "parse.y"
                       { static cbl_refer_t empty; (yyval.refer) = &empty; }
#line 21639 "parse.cc"
    break;

  case 669: /* alloc_ret: RETURNING scalar  */
#line 5287 "parse.y"
                                                 { (yyval.refer) = (yyvsp[0].refer); }
#line 21645 "parse.cc"
    break;

  case 670: /* compute: compute_impl end_compute  */
#line 5290 "parse.y"
                                         { current.compute_end(); }
#line 21651 "parse.cc"
    break;

  case 671: /* compute: compute_cond end_compute  */
#line 5291 "parse.y"
                                         { current.compute_end(); }
#line 21657 "parse.cc"
    break;

  case 672: /* compute_impl: COMPUTE compute_body  */
#line 5294 "parse.y"
                {
                  parser_assign( (yyvsp[0].compute_body_t).ntgt, (yyvsp[0].compute_body_t).tgts, *(yyvsp[0].compute_body_t).expr,
                                 NULL, NULL, current.compute_label() );
                  current.declaratives_evaluate(ec_none_e);
                }
#line 21667 "parse.cc"
    break;

  case 673: /* compute_cond: COMPUTE compute_body arith_errs  */
#line 5301 "parse.y"
                {
                  parser_assign( (yyvsp[-1].compute_body_t).ntgt, (yyvsp[-1].compute_body_t).tgts, *(yyvsp[-1].compute_body_t).expr,
                                 (yyvsp[0].error).on_error, (yyvsp[0].error).not_error,
                                 current.compute_label() );
                  current.declaratives_evaluate(ec_size_e);
                }
#line 21678 "parse.cc"
    break;

  case 676: /* $@12: %empty  */
#line 5312 "parse.y"
                       { statement_begin((yyloc), COMPUTE); }
#line 21684 "parse.cc"
    break;

  case 677: /* compute_body: rnames $@12 compute_expr  */
#line 5312 "parse.y"
                                                                            {
                  (yyval.compute_body_t).ntgt = rhs.size();
                  auto C = new cbl_num_result_t[(yyval.compute_body_t).ntgt];
                  (yyval.compute_body_t).tgts = use_any(rhs, C);
                  (yyval.compute_body_t).expr = (yyvsp[0].refer);
                }
#line 21695 "parse.cc"
    break;

  case 678: /* $@13: %empty  */
#line 5319 "parse.y"
                    {
                  current.compute_begin();
                }
#line 21703 "parse.cc"
    break;

  case 679: /* compute_expr: '=' $@13 expr  */
#line 5321 "parse.y"
                       {
                  (yyval.refer) = (yyvsp[0].refer);
                }
#line 21711 "parse.cc"
    break;

  case 680: /* $@14: %empty  */
#line 5325 "parse.y"
                      {
		  if( ! dialect_ibm() ) {
		    dialect_error((yylsp[0]), "EQUAL invalid as assignment operator", "ibm");
		  }
		  current.compute_begin();
                }
#line 21722 "parse.cc"
    break;

  case 681: /* compute_expr: EQUAL $@14 expr  */
#line 5330 "parse.y"
                       {
                  (yyval.refer) = (yyvsp[0].refer);
                }
#line 21730 "parse.cc"
    break;

  case 682: /* display: disp_body end_display  */
#line 5336 "parse.y"
                {
		  std::vector <cbl_refer_t> args((yyvsp[-1].display).vargs->args.size());
		  std::copy( (yyvsp[-1].display).vargs->args.begin(), (yyvsp[-1].display).vargs->args.end(), args.begin() );
		  if( (yyvsp[-1].display).special && (yyvsp[-1].display).special->id == ARG_NUM_e ) {
		    if( (yyvsp[-1].display).vargs->args.size() != 1 ) {
		      error_msg((yylsp[-1]), "ARGUMENT-NUMBER can be set to only one value");
		    }
		    cbl_refer_t& src( (yyvsp[-1].display).vargs->args.front() );
		    cbl_field_t *dst = register_find("_ARGI");
		    parser_move( dst, src );
		  } else {
		    parser_display((yyvsp[-1].display).special,
				   args.empty()? NULL : args.data(), args.size(),
				   DISPLAY_ADVANCE);
		  }
		  current.declaratives_evaluate(ec_none_e);
                }
#line 21752 "parse.cc"
    break;

  case 683: /* display: disp_body NO ADVANCING end_display  */
#line 5354 "parse.y"
                {
                  std::vector <cbl_refer_t> args((yyvsp[-3].display).vargs->args.size());
		  std::copy( (yyvsp[-3].display).vargs->args.begin(), (yyvsp[-3].display).vargs->args.end(), args.begin() );

		  if( (yyvsp[-3].display).special && (yyvsp[-3].display).special->id == ARG_NUM_e ) {
		    if( (yyvsp[-3].display).vargs->args.size() != 1 ) {
		      error_msg((yylsp[-3]), "ARGUMENT-NUMBER can be set to only one value");
		    }
		    cbl_refer_t& src( (yyvsp[-3].display).vargs->args.front() );
		    cbl_field_t *dst = register_find("_ARGI");
		    parser_move( dst, src );
		  } else {
		    parser_display((yyvsp[-3].display).special,
				   args.empty()? NULL : args.data(), args.size(), 
				   DISPLAY_NO_ADVANCE);
		  }
		  current.declaratives_evaluate(ec_none_e);
                }
#line 21775 "parse.cc"
    break;

  case 686: /* disp_body: disp_vargs  */
#line 5377 "parse.y"
                {
                  (yyval.display).special = NULL;
                  (yyval.display).vargs = (yyvsp[0].vargs);
                }
#line 21784 "parse.cc"
    break;

  case 687: /* disp_body: disp_vargs UPON disp_target  */
#line 5382 "parse.y"
                {
                  (yyval.display).special = (yyvsp[0].special);
                  (yyval.display).vargs = (yyvsp[-2].vargs);
                }
#line 21793 "parse.cc"
    break;

  case 688: /* disp_vargs: DISPLAY vargs  */
#line 5387 "parse.y"
                              {
                  statement_begin((yylsp[-1]), DISPLAY);
                  (yyval.vargs) = (yyvsp[0].vargs);
                }
#line 21802 "parse.cc"
    break;

  case 689: /* disp_target: device_name  */
#line 5393 "parse.y"
                            {
                  (yyval.special) = symbol_special((yyvsp[0].special_type).id);
                }
#line 21810 "parse.cc"
    break;

  case 690: /* disp_target: NAME  */
#line 5397 "parse.y"
                {
                  symbol_elem_t *e = symbol_special(PROGRAM, (yyvsp[0].string));
                  if( !e ) {
                    error_msg((yylsp[0]), "no such special name '%s'", (yyvsp[0].string));
                    YYERROR;
                  }
                  (yyval.special) = cbl_special_name_of(e);
                }
#line 21823 "parse.cc"
    break;

  case 691: /* divide: divide_impl end_divide  */
#line 5407 "parse.y"
                                       { ast_divide((yyvsp[-1].arith)); }
#line 21829 "parse.cc"
    break;

  case 692: /* divide: divide_cond end_divide  */
#line 5408 "parse.y"
                                       { ast_divide((yyvsp[-1].arith)); }
#line 21835 "parse.cc"
    break;

  case 693: /* divide_impl: DIVIDE divide_body  */
#line 5412 "parse.y"
                {
                  statement_begin((yylsp[-1]), DIVIDE);
                  (yyval.arith) = (yyvsp[0].arith);
                }
#line 21844 "parse.cc"
    break;

  case 694: /* divide_cond: DIVIDE divide_body arith_errs  */
#line 5418 "parse.y"
                {
                  statement_begin((yylsp[-2]), DIVIDE);
                  (yyval.arith) = (yyvsp[-1].arith);
                  (yyval.arith)->on_error = (yyvsp[0].error).on_error;
                  (yyval.arith)->not_error = (yyvsp[0].error).not_error;
                }
#line 21855 "parse.cc"
    break;

  case 697: /* divide_body: num_operand INTO rnames  */
#line 5430 "parse.y"
                { /* format 1 */
                  (yyval.arith) = new arith_t(no_giving_e);
                  (yyval.arith)->A.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 21867 "parse.cc"
    break;

  case 699: /* divide_body: divide_into REMAINDER scalar  */
#line 5439 "parse.y"
                {
                  if( (yyvsp[-2].arith)->tgts.size() != 1 ) {
                    error_msg((yylsp[-2]), "only 1 (not %zu) "
                             "GIVING with REMAINDER", (yyvsp[-2].arith)->tgts.size());
                    YYERROR;
                  }
                  (yyval.arith) = (yyvsp[-2].arith);
                  (yyval.arith)->remainder = *(yyvsp[0].refer);
                }
#line 21881 "parse.cc"
    break;

  case 701: /* divide_body: divide_by REMAINDER scalar  */
#line 5450 "parse.y"
                {
                  if( (yyvsp[-2].arith)->tgts.size() != 1 ) {
                    error_msg((yylsp[-2]), "only 1 (not %zu) "
                             "GIVING with REMAINDER", (yyvsp[-2].arith)->tgts.size());
                    YYERROR;
                  }
                  (yyval.arith) = (yyvsp[-2].arith);
                  (yyval.arith)->remainder = *(yyvsp[0].refer);
                }
#line 21895 "parse.cc"
    break;

  case 702: /* divide_into: num_operand INTO num_operand GIVING rnames  */
#line 5462 "parse.y"
                { // format 2 & 4
                  (yyval.arith) = new arith_t(giving_e);
                  (yyval.arith)->A.push_back(*(yyvsp[-2].refer));
                  (yyval.arith)->B.push_back(*(yyvsp[-4].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 21908 "parse.cc"
    break;

  case 703: /* divide_by: num_operand BY num_operand GIVING rnames  */
#line 5472 "parse.y"
                { // format 3 & 5
                  (yyval.arith) = new arith_t(giving_e);
                  (yyval.arith)->A.push_back(*(yyvsp[-4].refer));
                  (yyval.arith)->B.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 21921 "parse.cc"
    break;

  case 704: /* end_program: end_program1 '.'  */
#line 5483 "parse.y"
                {
                  const cbl_label_t *prog = current.program();
                  assert(prog);
                  const char *name = string_of((yyvsp[-1].prog_end).name);

                  bool matches = false;
                  const char *token_name = keyword_str((yyvsp[-1].prog_end).token) + 4;
                  switch((yyvsp[-1].prog_end).token) {
                  case END_PROGRAM:
                    matches = prog->type == LblProgram;
                    break;
                  case END_FUNCTION:
                    matches = prog->type == LblFunction;
                    break;
                  default:
                    error_msg((yylsp[-1]), "logic error: END token invalid '%s'", name);
                    gcc_unreachable();
                  }
                  if( !matches ) {
                    error_msg((yylsp[-1]), "END %s %s' does not match IDENTIFICATION DIVISION '%s'",
                              token_name, name, prog->name);
                    YYERROR;
                  }

                  if( 0 != strcasecmp(prog->name, name) ) {
                    error_msg((yylsp[-1]), "END PROGRAM '%s' does not match PROGRAM-ID '%s'",
                              name, prog->name);
                    YYERROR;
                  }
                  std::set<std::string> externals = current.end_program();
                  if( !externals.empty() ) {
		    for( auto name : externals ) {
		      yywarn("%s calls external symbol '%s'", prog->name, name.c_str());
		    }
                    YYERROR;
                  }
                  // pointer still valid because name is in symbol table
                  ast_end_program(prog->name);
                }
#line 21965 "parse.cc"
    break;

  case 705: /* end_program: end_program1 error  */
#line 5523 "parse.y"
                {
		  const char *token_name = "???";
                  switch((yyvsp[-1].prog_end).token) {
                  case END_PROGRAM:
		    token_name = "PROGRAM";
                    break;
                  case END_FUNCTION:
		    token_name = "FUNCTION";
                    break;
                  default:
                    cbl_internal_error( "END token invalid");
                  }
		  error_msg((yylsp[-1]), "END %s requires NAME before '.'", token_name);
		  YYERROR;
		}
#line 21985 "parse.cc"
    break;

  case 706: /* end_program1: "END PROGRAM" namestr  */
#line 5540 "parse.y"
                {
                  (yyval.prog_end).token = END_PROGRAM;
                  (yyval.prog_end).name = (yyvsp[0].literal);
                }
#line 21994 "parse.cc"
    break;

  case 707: /* end_program1: "END FUNCTION" namestr  */
#line 5545 "parse.y"
                {
                  (yyval.prog_end).token = END_FUNCTION;
                  (yyval.prog_end).name = (yyvsp[0].literal);
                }
#line 22003 "parse.cc"
    break;

  case 708: /* end_program1: "END PROGRAM" '.'  */
#line 5550 "parse.y"
                {
                  (yyval.prog_end).token = END_PROGRAM;
                }
#line 22011 "parse.cc"
    break;

  case 709: /* end_program1: "END FUNCTION" '.'  */
#line 5554 "parse.y"
                {
                  (yyval.prog_end).token = END_FUNCTION;
                }
#line 22019 "parse.cc"
    break;

  case 710: /* continue_stmt: CONTINUE  */
#line 5559 "parse.y"
                         {
                  statement_begin((yylsp[0]), CONTINUE);
                  parser_sleep(*cbl_refer_t::empty());
                }
#line 22028 "parse.cc"
    break;

  case 711: /* continue_stmt: CONTINUE AFTER expr SECONDS  */
#line 5563 "parse.y"
                                            {
                  statement_begin((yylsp[-3]), CONTINUE);
                  parser_sleep(*(yyvsp[-1].refer));
                }
#line 22037 "parse.cc"
    break;

  case 712: /* exit: GOBACK exit_with  */
#line 5570 "parse.y"
                {
		  statement_begin((yylsp[-1]), GOBACK);
		  parser_exit(*(yyvsp[0].refer));
                }
#line 22046 "parse.cc"
    break;

  case 713: /* exit: GOBACK exit_raising  */
#line 5575 "parse.y"
                {
		  statement_begin((yylsp[-1]), GOBACK);
		  parser_exit(*cbl_refer_t::empty(), (yyvsp[0].ec_type));
		}
#line 22055 "parse.cc"
    break;

  case 714: /* $@15: %empty  */
#line 5579 "parse.y"
                     { statement_begin((yylsp[0]), EXIT); }
#line 22061 "parse.cc"
    break;

  case 716: /* exit: "(simple) EXIT"  */
#line 5581 "parse.y"
                {
                  error_msg((yylsp[0]), "EXIT is invalid here");
                }
#line 22069 "parse.cc"
    break;

  case 717: /* exit_with: %empty  */
#line 5595 "parse.y"
                {
		  /* "If a RETURNING phrase is specified in the procedure
		   *  division header of the program containing the GOBACK
		   *  statement, the value in the data item referenced by that
		   *  RETURNING phrase becomes the result of the program
		   *  activation.  Execution continues in the calling element
		   *  as specified in the rules."
		   */
                  (yyval.refer) = cbl_refer_t::empty();
		  if( dialect_ibm() ) {
		    static auto rt = cbl_field_of(symbol_at(return_code_register()));
		    static cbl_refer_t status(rt);
		    (yyval.refer) = &status;
		  }
		  auto prog = cbl_label_of(symbol_at(current_program_index()));
		  if( prog->returning ) {
		    (yyval.refer) = new cbl_refer_t( cbl_field_of(symbol_at(prog->returning)) );
		  }
                }
#line 22093 "parse.cc"
    break;

  case 718: /* exit_with: with NORMAL stop_status  */
#line 5615 "parse.y"
                {
                  (yyval.refer) = (yyvsp[0].refer)? (yyvsp[0].refer) : new_reference(literally_zero);
                }
#line 22101 "parse.cc"
    break;

  case 719: /* exit_with: with ERROR stop_status  */
#line 5619 "parse.y"
                {
                  (yyval.refer) = (yyvsp[0].refer)? (yyvsp[0].refer) : new_reference(literally_one);
                }
#line 22109 "parse.cc"
    break;

  case 720: /* exit_with: RETURNING stop_status  */
#line 5623 "parse.y"
                {
		  if( ! dialect_mf() ) {
                    dialect_error((yylsp[0]), "RETURNING <number>", "mf");
		  }
                  (yyval.refer) = (yyvsp[0].refer)? (yyvsp[0].refer) : new_reference(literally_one);
                }
#line 22120 "parse.cc"
    break;

  case 721: /* exit_what: "Program"  */
#line 5630 "parse.y"
                                            { parser_exit_program(); }
#line 22126 "parse.cc"
    break;

  case 722: /* exit_what: "Program" exit_raising  */
#line 5631 "parse.y"
                                            { parser_exit_program(); }
#line 22132 "parse.cc"
    break;

  case 723: /* exit_what: SECTION  */
#line 5632 "parse.y"
                                            { parser_exit_section(); }
#line 22138 "parse.cc"
    break;

  case 724: /* exit_what: PARAGRAPH  */
#line 5633 "parse.y"
                                            { parser_exit_paragraph(); }
#line 22144 "parse.cc"
    break;

  case 725: /* exit_what: PERFORM  */
#line 5634 "parse.y"
                          {
                  if( performs.empty() ) {
                    error_msg((yyloc), "EXIT PERFORM valid only "
                             "within inline PERFORM procedure" );
                    YYERROR;
                  }
                  parser_exit_perform(&perform_current()->tgt, (yyvsp[0].boolean));
                }
#line 22157 "parse.cc"
    break;

  case 726: /* exit_raising: RAISING EXCEPTION "EXCEPTION NAME"  */
#line 5645 "parse.y"
                {
		  (yyval.ec_type) = (yyvsp[0].ec_type);
		}
#line 22165 "parse.cc"
    break;

  case 727: /* exit_raising: RAISING error  */
#line 5648 "parse.y"
                              {
		  cbl_unimplemented("RAISING exception-object");
		  (yyval.ec_type) = ec_none_e;
		}
#line 22174 "parse.cc"
    break;

  case 728: /* exit_raising: RAISING LAST  */
#line 5653 "parse.y"
                {
		  (yyval.ec_type) = ec_all_e;
		}
#line 22182 "parse.cc"
    break;

  case 729: /* free: FREE free_tgts  */
#line 5659 "parse.y"
                {
                  size_t n = (yyvsp[0].refers)->size();
                  assert( n > 0 );
                  auto tgts = new cbl_refer_t[n];
                  parser_free( n, (yyvsp[0].refers)->use_list(tgts) );
                }
#line 22193 "parse.cc"
    break;

  case 730: /* free_tgts: free_tgt  */
#line 5666 "parse.y"
                         { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 22199 "parse.cc"
    break;

  case 731: /* free_tgts: free_tgts free_tgt  */
#line 5667 "parse.y"
                                   { (yyval.refers)->push_back((yyvsp[0].refer)); }
#line 22205 "parse.cc"
    break;

  case 732: /* free_tgt: scalar  */
#line 5669 "parse.y"
                       {
		  (yyval.refer) = (yyvsp[0].refer);
		  reject_refmod((yylsp[0]), *(yyvsp[0].refer));
		}
#line 22214 "parse.cc"
    break;

  case 733: /* free_tgt: ADDRESS OF scalar  */
#line 5674 "parse.y"
                {
                  (yyval.refer) = (yyvsp[0].refer);
                  (yyval.refer)->addr_of = true;
		  reject_refmod((yylsp[0]), *(yyvsp[0].refer));
                }
#line 22224 "parse.cc"
    break;

  case 734: /* simple_cond: kind_of_name  */
#line 5685 "parse.y"
                {
                  (yyval.refer) = new_reference((yyvsp[0].field));
                }
#line 22232 "parse.cc"
    break;

  case 735: /* simple_cond: SWITCH  */
#line 5689 "parse.y"
                {
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  cbl_field_t *field = cbl_field_of(symbol_find((yylsp[0]), (yyvsp[0].string)));
                  assert(field->type == FldSwitch);
                  cbl_field_t *parent = parent_of(field);
                  size_t value = field->data.upsi_mask_of()->value;
                  bitop_t op = field->data.upsi_mask_of()->on_off?
                               bit_on_op : bit_off_op;
                   parser_bitop((yyval.refer)->cond(), parent, op, value );
                }
#line 22247 "parse.cc"
    break;

  case 736: /* simple_cond: expr is "class name"  */
#line 5700 "parse.y"
                {
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  // symbol_find does not find FldClass symbols
                  struct symbol_elem_t *e = symbol_field(PROGRAM, 0, (yyvsp[0].string));
                  parser_setop((yyval.refer)->cond(), (yyvsp[-2].refer)->field, is_op, cbl_field_of(e));
                }
#line 22258 "parse.cc"
    break;

  case 737: /* simple_cond: expr NOT "class name"  */
#line 5706 "parse.y"
                                            {
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  // symbol_find does not find FldClass symbols
                  struct symbol_elem_t *e = symbol_field(PROGRAM, 0, (yyvsp[0].string));
                  parser_setop((yyval.refer)->cond(), (yyvsp[-2].refer)->field, is_op, cbl_field_of(e));
                  parser_logop((yyval.refer)->cond(), NULL, not_op, (yyval.refer)->cond());
                }
#line 22270 "parse.cc"
    break;

  case 738: /* simple_cond: expr is OMITTED  */
#line 5714 "parse.y"
                {
                  auto lhs = cbl_refer_t((yyvsp[-2].refer)->field);
                  lhs.addr_of = true;
                  auto rhs = cbl_field_of(symbol_field(0,0, "NULLS"));
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  parser_relop((yyval.refer)->field, lhs, eq_op, rhs);
                }
#line 22282 "parse.cc"
    break;

  case 739: /* simple_cond: expr NOT OMITTED  */
#line 5722 "parse.y"
                {
                  auto lhs = cbl_refer_t((yyvsp[-2].refer)->field);
                  lhs.addr_of = true;
                  auto rhs = cbl_field_of(symbol_field(0,0, "NULLS"));
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  parser_relop((yyval.refer)->field, lhs, ne_op, rhs);
                }
#line 22294 "parse.cc"
    break;

  case 740: /* simple_cond: expr posneg  */
#line 5729 "parse.y"
                                {
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  relop_t op = static_cast<relop_t>((yyvsp[0].number));
                  cbl_field_t *zero = constant_of(constant_index(ZERO));
                  parser_relop((yyval.refer)->cond(), *(yyvsp[-1].refer), op, zero);
                }
#line 22305 "parse.cc"
    break;

  case 741: /* simple_cond: scalar88  */
#line 5735 "parse.y"
                         {
                  // copy the subscripts and set the parent field
                  cbl_refer_t parent = *(yyvsp[0].refer);
                  parent.field = parent_of((yyvsp[0].refer)->field);
                  if( !parent.field ) {
                    cbl_internal_error("Type 88 has no referent");
                    YYERROR;
                  }
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  (yyval.refer)->field->parent = field_index((yyvsp[0].refer)->field);
                  parser_relop((yyval.refer)->cond(), parent, eq_op, *(yyvsp[0].refer));
                }
#line 22322 "parse.cc"
    break;

  case 742: /* kind_of_name: expr might_be variable_type  */
#line 5750 "parse.y"
                {
                  (yyval.field) = new_temporary(FldConditional);
                  enum classify_t type = classify_of((yyvsp[0].number));
                  assert(type != ClassInvalidType );

                  parser_classify( (yyval.field), *(yyvsp[-2].refer), type );
                  if( (yyvsp[-1].number) == NOT ) {
                    parser_logop((yyval.field), NULL, not_op, (yyval.field));
                  }
                }
#line 22337 "parse.cc"
    break;

  case 743: /* bool_expr: log_expr  */
#line 5762 "parse.y"
                         { (yyval.refer) = new_reference((yyvsp[0].log_expr_t)->resolve()); }
#line 22343 "parse.cc"
    break;

  case 744: /* log_expr: log_term  */
#line 5765 "parse.y"
                         { (yyval.log_expr_t) = new log_expr_t((yyvsp[0].field)); }
#line 22349 "parse.cc"
    break;

  case 745: /* log_expr: log_expr OR rel_abbr  */
#line 5767 "parse.y"
                {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->or_term((yyvsp[0].field));
		}
#line 22358 "parse.cc"
    break;

  case 746: /* log_expr: log_expr OR log_expr  */
#line 5772 "parse.y"
                {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  assert( ! (yyvsp[0].log_expr_t)->unresolved() ); // what to do?
		  (yyval.log_expr_t)->or_term((yyvsp[0].log_expr_t)->and_term());
		}
#line 22368 "parse.cc"
    break;

  case 747: /* log_expr: log_expr AND rel_abbr  */
#line 5778 "parse.y"
                {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->and_term((yyvsp[0].field));
		}
#line 22377 "parse.cc"
    break;

  case 748: /* log_expr: log_expr AND log_expr  */
#line 5783 "parse.y"
                {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  assert( ! (yyvsp[0].log_expr_t)->unresolved() ); // what to do?
		  (yyval.log_expr_t)->and_term((yyvsp[0].log_expr_t)->and_term());
                }
#line 22387 "parse.cc"
    break;

  case 749: /* log_term: '(' log_expr ')'  */
#line 5790 "parse.y"
                                 {
		  current.antecedent_reset();
		  (yyval.field) = (yyvsp[-1].log_expr_t)->resolve();
		}
#line 22396 "parse.cc"
    break;

  case 750: /* log_term: NOT '(' log_expr ')'  */
#line 5794 "parse.y"
                                     {
		  current.antecedent_reset();
		  (yyval.field) = (yyvsp[-1].log_expr_t)->resolve();
		  parser_logop((yyval.field), NULL, not_op, (yyval.field));
		}
#line 22406 "parse.cc"
    break;

  case 752: /* log_term: simple_cond  */
#line 5800 "parse.y"
                                {
		  current.antecedent_reset();
		  (yyval.field) = (yyvsp[0].refer)->cond();
		}
#line 22415 "parse.cc"
    break;

  case 753: /* log_term: NOT simple_cond  */
#line 5804 "parse.y"
                                {
		  current.antecedent_reset();
		  (yyval.field) = (yyvsp[0].refer)->cond();
		  parser_logop((yyval.field), NULL, not_op, (yyval.field));
		}
#line 22425 "parse.cc"
    break;

  case 754: /* rel_expr: rel_lhs rel_term  */
#line 5812 "parse.y"
                {
		  rel_part_t& ante = current.antecedent();
		  if( (yyvsp[0].rel_term_t).invert ) {
		    error_msg((yylsp[0]), "NOT %s is invalid, cannot negate RHS",
			     ante.operand->field->name);
		  }
		  auto op = ante.relop;
		  if( ante.invert ) {
		    op = relop_invert(op);
		    ante.invert = false;
		  }
		  auto cond = new_temporary(FldConditional);
		  parser_relop( cond, *ante.operand, op, *(yyvsp[0].rel_term_t).term );
		  (yyval.field) = cond;
                }
#line 22445 "parse.cc"
    break;

  case 755: /* rel_expr: rel_lhs '(' rel_abbrs ')'  */
#line 5827 "parse.y"
                                               {
		  (yyval.field) = (yyvsp[-1].log_expr_t)->resolve();
		}
#line 22453 "parse.cc"
    break;

  case 756: /* rel_abbrs: rel_abbr  */
#line 5832 "parse.y"
                         { (yyval.log_expr_t) = new log_expr_t((yyvsp[0].field)); }
#line 22459 "parse.cc"
    break;

  case 757: /* rel_abbrs: '(' rel_abbrs ')'  */
#line 5833 "parse.y"
                                  {
		  (yyval.log_expr_t) = (yyvsp[-1].log_expr_t);
		  (yyval.log_expr_t)->resolve();

		}
#line 22469 "parse.cc"
    break;

  case 758: /* rel_abbrs: rel_abbrs OR rel_abbr  */
#line 5838 "parse.y"
                                           {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->or_term((yyvsp[0].field));
		}
#line 22478 "parse.cc"
    break;

  case 759: /* rel_abbrs: rel_abbrs OR '(' rel_abbr ')'  */
#line 5842 "parse.y"
                                                   {
		  (yyval.log_expr_t) = (yyvsp[-4].log_expr_t);
		  (yyval.log_expr_t)->or_term((yyvsp[-1].field));
		}
#line 22487 "parse.cc"
    break;

  case 760: /* rel_abbrs: rel_abbrs AND rel_abbr  */
#line 5846 "parse.y"
                                            {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->and_term((yyvsp[0].field));
		}
#line 22496 "parse.cc"
    break;

  case 761: /* rel_abbrs: rel_abbrs AND '(' rel_abbr ')'  */
#line 5850 "parse.y"
                                                    {
		  (yyval.log_expr_t) = (yyvsp[-4].log_expr_t);
		  (yyval.log_expr_t)->and_term((yyvsp[-1].field));
		}
#line 22505 "parse.cc"
    break;

  case 762: /* rel_lhs: rel_term relop  */
#line 5856 "parse.y"
                                    {
		  // no value, just set current antecedent
		  auto op   = relop_of((yyvsp[0].number));
		  auto ante = new rel_part_t((yyvsp[-1].rel_term_t).term, op, (yyvsp[-1].rel_term_t).invert);
		  current.antecedent(*ante);
		}
#line 22516 "parse.cc"
    break;

  case 763: /* rel_abbr: rel_term  */
#line 5864 "parse.y"
                         {
		  static rel_part_t ante;
		  ante = current.antecedent();
		  if( ! ante.operand ) {
		      error_msg((yylsp[0]), "'AND %s' invalid because "
				"LHS is not a relation condition",
				name_of((yyvsp[0].rel_term_t).term->field) );
		    YYERROR;
		  }
		  assert(ante.has_relop);
		  if( (yyvsp[0].rel_term_t).invert ) ante.relop = relop_invert(ante.relop);
		  auto cond = new_temporary(FldConditional);
		  parser_relop(cond, *ante.operand, ante.relop, *(yyvsp[0].rel_term_t).term);
		  (yyval.field) = cond;
		}
#line 22536 "parse.cc"
    break;

  case 764: /* rel_abbr: relop rel_term  */
#line 5879 "parse.y"
                               {
		  static rel_part_t ante;
		  if( (yyvsp[0].rel_term_t).invert ) {
		    error_msg((yylsp[0]), "%s NOT %s is invalid",
			     keyword_str((yyvsp[-1].number)),
		             name_of((yyvsp[0].rel_term_t).term->field));
		  }
		  auto op( relop_of((yyvsp[-1].number)) );
		  ante = current.antecedent().relop_set(op);
		  if( ! ante.operand ) {
		      error_msg((yylsp[-1]), "AND %s invalid because "
				"LHS is not a relation condition",
				name_of((yyvsp[0].rel_term_t).term->field) );
		    YYERROR;
		  }
		  auto cond = new_temporary(FldConditional);
		  parser_relop(cond, *ante.operand, ante.relop, *(yyvsp[0].rel_term_t).term);
		  (yyval.field) = cond;
		}
#line 22560 "parse.cc"
    break;

  case 766: /* rel_term1: all LITERAL  */
#line 5904 "parse.y"
                {
		  (yyval.rel_term_t).invert = false;
                  (yyval.rel_term_t).term = new_reference(new_literal((yyvsp[0].literal), quoted_e));
                  (yyval.rel_term_t).term->all = (yyvsp[-1].boolean);
                }
#line 22570 "parse.cc"
    break;

  case 767: /* rel_term1: all spaces_etc  */
#line 5910 "parse.y"
                {
		  (yyval.rel_term_t).invert = false;
                  (yyval.rel_term_t).term = new_reference(constant_of(constant_index((yyvsp[0].number))));
                  (yyval.rel_term_t).term->all = (yyvsp[-1].boolean);
                }
#line 22580 "parse.cc"
    break;

  case 768: /* rel_term1: all NULLS  */
#line 5916 "parse.y"
                {
		  (yyval.rel_term_t).invert = false;
                  (yyval.rel_term_t).term = new_reference(constant_of(constant_index(NULLS)));
                  (yyval.rel_term_t).term->all = (yyvsp[-1].boolean);
                }
#line 22590 "parse.cc"
    break;

  case 769: /* rel_term1: ALL ZERO  */
#line 5922 "parse.y"
                { // ZERO without ALL comes from expr, from num_term.
		  (yyval.rel_term_t).invert = false;
                  (yyval.rel_term_t).term = new_reference(constant_of(constant_index(ZERO)));
                  (yyval.rel_term_t).term->all = true;
                }
#line 22600 "parse.cc"
    break;

  case 770: /* rel_term1: expr  */
#line 5927 "parse.y"
                     {
		  (yyval.rel_term_t).invert = false;
		  (yyval.rel_term_t).term = (yyvsp[0].refer);
		}
#line 22609 "parse.cc"
    break;

  case 771: /* rel_term1: NOT rel_term  */
#line 5931 "parse.y"
                             {
		  (yyval.rel_term_t) = (yyvsp[0].rel_term_t);
		  (yyval.rel_term_t).invert = true;
		}
#line 22618 "parse.cc"
    break;

  case 773: /* expr_term: expr_term '+' num_term  */
#line 5940 "parse.y"
                {
                  if( ((yyval.refer) = ast_op((yyvsp[-2].refer), '+', (yyvsp[0].refer))) == NULL  ) YYERROR;
                }
#line 22626 "parse.cc"
    break;

  case 774: /* expr_term: expr_term '-' num_term  */
#line 5944 "parse.y"
                {
                  if( ((yyval.refer) = ast_op((yyvsp[-2].refer), '-', (yyvsp[0].refer))) == NULL  ) YYERROR;
                }
#line 22634 "parse.cc"
    break;

  case 776: /* num_term: num_term '*' value  */
#line 5951 "parse.y"
                {
                  if( ((yyval.refer) = ast_op((yyvsp[-2].refer), '*', (yyvsp[0].refer))) == NULL  ) YYERROR;
                }
#line 22642 "parse.cc"
    break;

  case 777: /* num_term: num_term '/' value  */
#line 5955 "parse.y"
                {
                  if( ((yyval.refer) = ast_op((yyvsp[-2].refer), '/', (yyvsp[0].refer))) == NULL  ) YYERROR;
                }
#line 22650 "parse.cc"
    break;

  case 779: /* value: value POW factor  */
#line 5962 "parse.y"
                {
                  if( ((yyval.refer) = ast_op((yyvsp[-2].refer), '^', (yyvsp[0].refer))) == NULL  ) YYERROR;
                }
#line 22658 "parse.cc"
    break;

  case 780: /* value: '-' value  */
#line 5965 "parse.y"
                                          { (yyval.refer) = negate( (yyvsp[0].refer) );}
#line 22664 "parse.cc"
    break;

  case 781: /* value: '+' factor  */
#line 5966 "parse.y"
                                     { (yyval.refer) = (yyvsp[0].refer);}
#line 22670 "parse.cc"
    break;

  case 783: /* factor: '(' expr ')'  */
#line 5970 "parse.y"
                             { (yyval.refer) = (yyvsp[-1].refer); }
#line 22676 "parse.cc"
    break;

  case 784: /* factor: num_value  */
#line 5971 "parse.y"
                          { (yyval.refer) = (yyvsp[0].refer); }
#line 22682 "parse.cc"
    break;

  case 786: /* if_impl: if_verb if_test if_body  */
#line 5978 "parse.y"
                {
                  parser_fi();
                }
#line 22690 "parse.cc"
    break;

  case 787: /* if_verb: IF  */
#line 5982 "parse.y"
                   { statement_begin((yylsp[0]), IF); }
#line 22696 "parse.cc"
    break;

  case 788: /* if_test: bool_expr then  */
#line 5985 "parse.y"
                {
		  if( ! is_conditional((yyvsp[-1].refer)) ) {
		    error_msg((yylsp[-1]), "%s is not a Boolean expression",
			     name_of((yyvsp[-1].refer)->field) );
		    YYERROR;
		  }
                  parser_if( (yyvsp[-1].refer)->cond() );
                }
#line 22709 "parse.cc"
    break;

  case 789: /* if_body: next_statements  */
#line 5996 "parse.y"
                {
                  parser_else();
                }
#line 22717 "parse.cc"
    break;

  case 790: /* $@16: %empty  */
#line 5999 "parse.y"
                                     {
                  location_set((yylsp[0]));
                  parser_else();
                }
#line 22726 "parse.cc"
    break;

  case 793: /* next_statements: NEXT SENTENCE  */
#line 6007 "parse.y"
                {
                  next_sentence = label_add(LblNone, "next_sentence", 0);
                  parser_label_goto(next_sentence);
                }
#line 22735 "parse.cc"
    break;

  case 796: /* evaluate: eval_verb eval_subjects eval_switch end_evaluate  */
#line 6017 "parse.y"
                                                                 {
		  auto& ev( eval_stack.current() );
		  parser_label_label(ev.when());
		  parser_label_label(ev.done());
                  eval_stack.free();
		}
#line 22746 "parse.cc"
    break;

  case 797: /* eval_verb: EVALUATE  */
#line 6024 "parse.y"
                         {
                  statement_begin((yylsp[0]), EVALUATE);
		  eval_stack.alloc();
                }
#line 22755 "parse.cc"
    break;

  case 800: /* eval_subject: eval_subject1  */
#line 6033 "parse.y"
                              {
		  auto& ev( eval_stack.current() );
		  ev.append(*(yyvsp[0].refer));
		}
#line 22764 "parse.cc"
    break;

  case 803: /* eval_subject1: true_false  */
#line 6041 "parse.y"
                {
                  static cbl_field_t *zero = constant_of(constant_index(ZERO));
                  enum relop_t op = (yyvsp[0].number) == TRUE_kw? eq_op : ne_op;
                  (yyval.refer) = new cbl_refer_t( new_temporary(FldConditional) );
                  parser_relop((yyval.refer)->field, zero, op, zero);
                }
#line 22775 "parse.cc"
    break;

  case 805: /* $@17: %empty  */
#line 6050 "parse.y"
                                      {
		  auto& ev( eval_stack.current() );
		  ev.write_when_label();
		}
#line 22784 "parse.cc"
    break;

  case 809: /* eval_case: eval_objects statements  */
#line 6061 "parse.y"
                                                  {
		  auto& ev( eval_stack.current() );
		  parser_label_goto( ev.done() );
		  ev.rewind();
		}
#line 22794 "parse.cc"
    break;

  case 810: /* eval_case: eval_objects NEXT SENTENCE  */
#line 6067 "parse.y"
                {
		  auto& ev( eval_stack.current() );
		  ev.write_when_label();
                  next_sentence = label_add(LblNone, "next_sentence", 0);
                  parser_label_goto(next_sentence);
                }
#line 22805 "parse.cc"
    break;

  case 811: /* eval_objects: eval_whens  */
#line 6075 "parse.y"
                           {
		  auto& ev( eval_stack.current() );
		  // Place the object's Yeah label before the statements.
		  ev.write_yeah_label();
		}
#line 22815 "parse.cc"
    break;

  case 814: /* $@18: %empty  */
#line 6085 "parse.y"
                     {
		  auto& ev( eval_stack.current() );
		  ev.write_when_label();
		}
#line 22824 "parse.cc"
    break;

  case 815: /* eval_when: WHEN $@18 eval_obj_cols  */
#line 6089 "parse.y"
                                        { // all TRUE, go to statements
		  auto& ev( eval_stack.current() );
		  parser_label_goto(ev.yeah());
		  auto subj( ev.subject() );
		  if( subj ) {
		    error_msg((yylsp[-1]), "WHEN clause incomplete, %zu of %zu evaluated",
			     ev.object_count(), ev.subject_count());
		  }
		  ev.rewind();
		}
#line 22839 "parse.cc"
    break;

  case 819: /* eval_obj_col: ANY  */
#line 6106 "parse.y"
                     {
		  auto& ev( eval_stack.current() );
		  if( ! ev.decide(ANY) ) {
		    error_msg((yylsp[0]), "WHEN 'ANY' phrase exceeds subject set count of %zu",
			     ev.subject_count());
		    YYERROR;
		  }
                }
#line 22852 "parse.cc"
    break;

  case 820: /* eval_obj_col: true_false  */
#line 6114 "parse.y"
                           {
		  auto& ev( eval_stack.current() );
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yyloc), "WHEN '%s' phrase exceeds subject set count of %zu",
			     keyword_str((yyvsp[0].number)), ev.subject_count());
		    YYERROR;
		  }
		  if( ! is_conditional( subj ) ) {
		    error_msg((yylsp[0]), "subject %s, type %s, "
			     "cannot be compared to TRUE/FALSE",
			     subj->name, 3 + cbl_field_type_str(subj->type) );
		  }
		  ev.decide((yyvsp[0].number));
                }
#line 22872 "parse.cc"
    break;

  case 821: /* eval_obj_col: eval_posneg  */
#line 6129 "parse.y"
                                {
                  relop_t op = static_cast<relop_t>((yyvsp[0].number));
                  cbl_field_t *zero = constant_of(constant_index(ZERO));
		  auto& ev( eval_stack.current() );
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yylsp[0]), "WHEN '%s' phrase exceeds subject set count of %zu",
			     relop_str(op), ev.subject_count());
		    YYERROR;
		  }
		  ev.decide(op, zero, false);
                }
#line 22889 "parse.cc"
    break;

  case 822: /* eval_obj_col: bool_expr  */
#line 6141 "parse.y"
                          {
		  auto& ev( eval_stack.current() );
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yylsp[0]), "WHEN CONDITIONAL phrase exceeds "
			     "subject set count of %zu",
			     ev.subject_count());
		    YYERROR;
		  }
		  if( ! is_conditional( subj ) ) {
		    error_msg((yylsp[0]), "subject %s, type %s, "
			      "cannot be compared to conditional expression",
			      subj->name, 3 + cbl_field_type_str(subj->type) );
		  }
		  ev.decide(*(yyvsp[0].refer), false);
                }
#line 22910 "parse.cc"
    break;

  case 823: /* eval_obj_col: eval_abbrs  */
#line 6157 "parse.y"
                            {
		  auto& ev( eval_stack.current() );
		  ev.decided( (yyvsp[0].log_expr_t)->resolve() );
                }
#line 22919 "parse.cc"
    break;

  case 824: /* eval_obj_col: rel_term THRU rel_term  */
#line 6161 "parse.y"
                                                        {
		  auto& ev( eval_stack.current() );
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yylsp[-2]), "WHEN %s THRU %s phrase exceeds "
			     "subject set count of %zu",
			     (yyvsp[-2].rel_term_t).term->name(), (yyvsp[0].rel_term_t).term->name(), ev.subject_count());
		    YYERROR;
		  }
		  if( is_conditional((yyvsp[-2].rel_term_t).term) || is_conditional((yyvsp[0].rel_term_t).term) ) {
		    error_msg((yylsp[-2]), "THRU with boolean operand");
		  }
		  if( (yyvsp[0].rel_term_t).invert ) {
		    error_msg((yylsp[0]), "NOT %s is invalid with THRU",
			     name_of((yyvsp[0].rel_term_t).term->field));
		  }
		  ev.decide(*(yyvsp[-2].rel_term_t).term, *(yyvsp[0].rel_term_t).term, (yyvsp[-2].rel_term_t).invert);
                }
#line 22942 "parse.cc"
    break;

  case 825: /* eval_obj_col: rel_term ELSE  */
#line 6180 "parse.y"
                {
		  error_msg((yylsp[0]), "ELSE not valid in WHEN");
		  YYERROR;
		}
#line 22951 "parse.cc"
    break;

  case 826: /* eval_posneg: POSITIVE  */
#line 6185 "parse.y"
                         { (yyval.number) = (yyvsp[0].number) == NOT? le_op : gt_op; }
#line 22957 "parse.cc"
    break;

  case 827: /* eval_posneg: NEGATIVE  */
#line 6186 "parse.y"
                         { (yyval.number) = (yyvsp[0].number) == NOT? ge_op : lt_op; }
#line 22963 "parse.cc"
    break;

  case 828: /* eval_abbrs: rel_term  */
#line 6189 "parse.y"
                            {
		  auto& ev( eval_stack.current() );
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yylsp[0]), "WHEN %s phrase exceeds "
			     "subject set count of %zu",
			     (yyvsp[0].rel_term_t).term->name(), ev.subject_count());
		    YYERROR;
		  }
		  if( ! ev.compatible((yyvsp[0].rel_term_t).term->field) ) {
		    auto obj((yyvsp[0].rel_term_t).term->field);
		    error_msg((yylsp[0]), "subject %s, type %s, "
			     "cannot be compared %s, type %s",
			     subj->name, 3 + cbl_field_type_str(subj->type),
			     obj->name,	 3 + cbl_field_type_str(obj->type) );
		  }
		  auto result = ev.compare(*(yyvsp[0].rel_term_t).term);
		  if( ! result ) YYERROR;
		  if( (yyvsp[0].rel_term_t).invert ) {
		    parser_logop(result, nullptr, not_op, result);
		  }
		  (yyval.log_expr_t) =  new log_expr_t(result);
                }
#line 22991 "parse.cc"
    break;

  case 829: /* eval_abbrs: relop rel_term  */
#line 6212 "parse.y"
                                  {
		  auto& ev( eval_stack.current() );
		  relop_t relop(relop_of((yyvsp[-1].number)));
		  ev.object_relop(relop);
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yylsp[-1]), "WHEN %s %s phrase exceeds "
			     "subject set count of %zu",
			     relop_str(relop_of((yyvsp[-1].number))), (yyvsp[0].rel_term_t).term->name(), ev.subject_count());
		    YYERROR;
		  }
		  if( ! ev.compatible((yyvsp[0].rel_term_t).term->field) ) {
		    auto obj((yyvsp[0].rel_term_t).term->field);
		    error_msg((yylsp[-1]), "subject %s, type %s, "
			     "cannot be compared %s, type %s",
			     subj->name, 3 + cbl_field_type_str(subj->type),
			     obj->name,	 3 + cbl_field_type_str(obj->type) );
		  }
		  if( is_conditional(ev.subject()) ) {
		    auto obj((yyvsp[0].rel_term_t).term->field);
		    error_msg((yylsp[-1]), "subject %s, type %s, "
			     "cannot be %s %s, type %s",
			     subj->name, 3 + cbl_field_type_str(subj->type),
			      relop_str(relop_of((yyvsp[-1].number))),
			     obj->name,	 3 + cbl_field_type_str(obj->type) );
		  }
		  auto result = ev.compare(relop, *(yyvsp[0].rel_term_t).term);
		  if( ! result ) YYERROR;
		  if( (yyvsp[0].rel_term_t).invert ) {
		    parser_logop(result, nullptr, not_op, result);
		  }
		  (yyval.log_expr_t) = new log_expr_t(result);
		}
#line 23029 "parse.cc"
    break;

  case 830: /* eval_abbrs: '(' eval_abbrs ')'  */
#line 6245 "parse.y"
                                   {
		  (yyval.log_expr_t) = (yyvsp[-1].log_expr_t);
		  (yyval.log_expr_t)->resolve();
		}
#line 23038 "parse.cc"
    break;

  case 831: /* eval_abbrs: eval_abbrs OR eval_abbr  */
#line 6249 "parse.y"
                                             {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->or_term((yyvsp[0].field));
		}
#line 23047 "parse.cc"
    break;

  case 832: /* eval_abbrs: eval_abbrs OR '(' eval_abbr ')'  */
#line 6253 "parse.y"
                                                     {
		  (yyval.log_expr_t) = (yyvsp[-4].log_expr_t);
		  (yyval.log_expr_t)->or_term((yyvsp[-1].field));
		}
#line 23056 "parse.cc"
    break;

  case 833: /* eval_abbrs: eval_abbrs AND eval_abbr  */
#line 6257 "parse.y"
                                              {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->and_term((yyvsp[0].field));
		}
#line 23065 "parse.cc"
    break;

  case 834: /* eval_abbrs: eval_abbrs AND '(' eval_abbr ')'  */
#line 6261 "parse.y"
                                                      {
		  (yyval.log_expr_t) = (yyvsp[-4].log_expr_t);
		  (yyval.log_expr_t)->and_term((yyvsp[-1].field));
		}
#line 23074 "parse.cc"
    break;

  case 835: /* eval_abbr: rel_term  */
#line 6267 "parse.y"
                            {
		  auto& ev( eval_stack.current() );
		  relop_t relop(ev.object_relop());
		  auto subj( ev.subject() );
		  assert( subj );
		  (yyval.field) = ev.compare(relop, *(yyvsp[0].rel_term_t).term);
		  if( (yyvsp[0].rel_term_t).invert ) {
		    parser_logop((yyval.field), nullptr, not_op, (yyval.field));
		  }
                }
#line 23089 "parse.cc"
    break;

  case 836: /* eval_abbr: relop rel_term  */
#line 6277 "parse.y"
                                  {
		  auto& ev( eval_stack.current() );
		  relop_t relop(relop_of((yyvsp[-1].number)));
		  ev.object_relop(relop);
		  (yyval.field) = ev.compare(relop, *(yyvsp[0].rel_term_t).term);
		  if( (yyvsp[0].rel_term_t).invert ) {
		    parser_logop((yyval.field), nullptr, not_op, (yyval.field));
		  }
                }
#line 23103 "parse.cc"
    break;

  case 839: /* true_false: "True"  */
#line 6292 "parse.y"
                         { (yyval.number) = TRUE_kw; }
#line 23109 "parse.cc"
    break;

  case 840: /* true_false: "False"  */
#line 6293 "parse.y"
                         { (yyval.number) = FALSE_kw; }
#line 23115 "parse.cc"
    break;

  case 841: /* scalar: tableref  */
#line 6296 "parse.y"
                         {
		  // Check for missing subscript; others already checked.
                  if( (yyvsp[0].refer)->nsubscript == 0 && 0 < dimensions((yyvsp[0].refer)->field) ) {
                    subscript_dimension_error((yylsp[0]), 0, (yyval.refer));
                  }
		}
#line 23126 "parse.cc"
    break;

  case 842: /* tableref: tableish  */
#line 6304 "parse.y"
                         {
		  // tableref is used by SORT.  It may name a table without subscripts.
		  (yyval.refer) = (yyvsp[0].refer);
		  (yyval.refer)->loc = (yylsp[0]);
		  if( (yyval.refer)->is_table_reference() ) {
                    if( (yyval.refer)->nsubscript != dimensions((yyval.refer)->field) ) {
                      subscript_dimension_error((yylsp[0]), (yyval.refer)->nsubscript, (yyval.refer));
		      YYERROR;
		    }
		  }
		}
#line 23142 "parse.cc"
    break;

  case 843: /* tableish: name subscripts refmod  */
#line 6316 "parse.y"
                {
		  assert(yychar != LPAREN);
                  (yyval.refer) = new cbl_refer_t((yyvsp[-2].field));
                  (yyval.refer)->subscripts_set((yyvsp[-1].refers)->refers);
                  literal_subscripts_valid( (yylsp[-1]), *(yyval.refer) );
                  (yyval.refer)->refmod = cbl_span_t( (yyvsp[0].refmod_parts).from,
                                           (yyvsp[0].refmod_parts).len );
                  literal_refmod_valid( (yylsp[0]), *(yyval.refer) );
                }
#line 23156 "parse.cc"
    break;

  case 844: /* tableish: name refmod  */
#line 6326 "parse.y"
                {
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field));
                  (yyval.refer)->refmod = cbl_span_t( (yyvsp[0].refmod_parts).from,
                                           (yyvsp[0].refmod_parts).len );
                  literal_refmod_valid( (yylsp[0]), *(yyval.refer) );
                }
#line 23167 "parse.cc"
    break;

  case 845: /* tableish: name subscripts  */
#line 6333 "parse.y"
                {
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field));
                  (yyval.refer)->subscripts_set((yyvsp[0].refers)->refers);
                  literal_subscripts_valid( (yylsp[0]), *(yyval.refer) );
                }
#line 23177 "parse.cc"
    break;

  case 846: /* tableish: name  */
#line 6339 "parse.y"
                {
		  (yyval.refer) = new cbl_refer_t((yyvsp[0].field));
		}
#line 23185 "parse.cc"
    break;

  case 847: /* refmod: " )" expr ':' expr ')'  */
#line 6345 "parse.y"
                {
		  if( ! require_numeric((yylsp[-3]), *(yyvsp[-3].refer)) ) YYERROR;
		  if( ! require_numeric((yylsp[-1]), *(yyvsp[-1].refer)) ) YYERROR;
                  (yyval.refmod_parts).from = (yyvsp[-3].refer);
                  (yyval.refmod_parts).len = (yyvsp[-1].refer);
                }
#line 23196 "parse.cc"
    break;

  case 848: /* refmod: " )" expr ':' ')'  */
#line 6352 "parse.y"
                {
		  if( ! require_numeric((yylsp[-2]), *(yyvsp[-2].refer)) ) YYERROR;
                  (yyval.refmod_parts).from = (yyvsp[-2].refer);
                  (yyval.refmod_parts).len = nullptr;
                }
#line 23206 "parse.cc"
    break;

  case 849: /* typename: NAME  */
#line 6360 "parse.y"
                {
                  auto e = symbol_typedef(PROGRAM, (yyvsp[0].string));
                  if( ! e ) {
		    error_msg((yylsp[0]), "DATA-ITEM '%s' not found", (yyvsp[0].string) );
                    YYERROR;
                  }
                  (yyval.field) = cbl_field_of(e);
                }
#line 23219 "parse.cc"
    break;

  case 850: /* name: qname  */
#line 6371 "parse.y"
                {
                  build_symbol_map();
		  auto namelocs( name_queue.pop() );
		  auto names( name_queue.namelist_of(namelocs) );
		  auto inner = namelocs.back();
                  if( ((yyval.field) = field_find(names)) == NULL ) {
                    if( procedure_div_e == current_division  ) {
		      error_msg(inner.loc,
				"DATA-ITEM '%s' not found", inner.name );
                      YYERROR;
                    }
                    /*
                     * Insert forward references, starting outermost.
                     */
                    size_t parent = 0;
                    while( ! names.empty() ) {
                      auto name = names.front();
                      names.pop_front();
                      auto e = symbol_field_forward_add(PROGRAM, parent,
                                                        name, yylineno);
                      if( !e ) YYERROR;
		      symbol_field_location( symbol_index(e), (yylsp[0]) );
                      parent = symbol_index(e);
                      (yyval.field) = cbl_field_of(e);
                    }
                  }
                  gcc_assert((yyval.field));
                }
#line 23252 "parse.cc"
    break;

  case 851: /* qname: ctx_name  */
#line 6402 "parse.y"
                {
                  name_queue.qualify((yylsp[0]), (yyvsp[0].string));
                }
#line 23260 "parse.cc"
    break;

  case 852: /* qname: qname inof ctx_name  */
#line 6406 "parse.y"
                {
                  name_queue.qualify((yylsp[0]), (yyvsp[0].string));
                }
#line 23268 "parse.cc"
    break;

  case 857: /* context_word: APPLY  */
#line 6418 "parse.y"
                                        { static char s[] ="APPLY";
                                         (yyval.string) = s; }
#line 23275 "parse.cc"
    break;

  case 858: /* context_word: ARITHMETIC  */
#line 6420 "parse.y"
                                       { static char s[] ="ARITHMETIC";
                                         (yyval.string) = s; }
#line 23282 "parse.cc"
    break;

  case 859: /* context_word: ATTRIBUTE  */
#line 6422 "parse.y"
                                       { static char s[] ="ATTRIBUTE";
                                         (yyval.string) = s; }
#line 23289 "parse.cc"
    break;

  case 860: /* context_word: AUTO  */
#line 6424 "parse.y"
                                       { static char s[] ="AUTO";
                                         (yyval.string) = s; }
#line 23296 "parse.cc"
    break;

  case 861: /* context_word: AUTOMATIC  */
#line 6426 "parse.y"
                                       { static char s[] ="AUTOMATIC";
                                         (yyval.string) = s; }
#line 23303 "parse.cc"
    break;

  case 862: /* context_word: "AWAY-FROM-ZERO"  */
#line 6428 "parse.y"
                                       { static char s[] ="AWAY-FROM-ZERO";
                                         (yyval.string) = s; }
#line 23310 "parse.cc"
    break;

  case 863: /* context_word: "BACKGROUND-COLOR"  */
#line 6430 "parse.y"
                                       { static char s[] ="BACKGROUND-COLOR";
                                         (yyval.string) = s; }
#line 23317 "parse.cc"
    break;

  case 864: /* context_word: BELL  */
#line 6432 "parse.y"
                                       { static char s[] ="BELL";
                                         (yyval.string) = s; }
#line 23324 "parse.cc"
    break;

  case 865: /* context_word: "BINARY-ENCODING"  */
#line 6434 "parse.y"
                                       { static char s[] ="BINARY-ENCODING";
                                         (yyval.string) = s; }
#line 23331 "parse.cc"
    break;

  case 866: /* context_word: BLINK  */
#line 6436 "parse.y"
                                       { static char s[] ="BLINK";
                                         (yyval.string) = s; }
#line 23338 "parse.cc"
    break;

  case 867: /* context_word: "BYTE-LENGTH"  */
#line 6438 "parse.y"
                                       { static char s[] ="BYTE-LENGTH";
                                         (yyval.string) = s; }
#line 23345 "parse.cc"
    break;

  case 868: /* context_word: CAPACITY  */
#line 6440 "parse.y"
                                       { static char s[] ="CAPACITY";
                                         (yyval.string) = s; }
#line 23352 "parse.cc"
    break;

  case 869: /* context_word: CENTER  */
#line 6442 "parse.y"
                                       { static char s[] ="CENTER";
                                         (yyval.string) = s; }
#line 23359 "parse.cc"
    break;

  case 870: /* context_word: CLASSIFICATION  */
#line 6444 "parse.y"
                                       { static char s[] ="CLASSIFICATION";
                                         (yyval.string) = s; }
#line 23366 "parse.cc"
    break;

  case 871: /* context_word: CYCLE  */
#line 6446 "parse.y"
                                       { static char s[] ="CYCLE";
                                         (yyval.string) = s; }
#line 23373 "parse.cc"
    break;

  case 872: /* context_word: "DECIMAL-ENCODING"  */
#line 6448 "parse.y"
                                       { static char s[] ="DECIMAL-ENCODING";
                                         (yyval.string) = s; }
#line 23380 "parse.cc"
    break;

  case 873: /* context_word: EOL  */
#line 6450 "parse.y"
                                       { static char s[] ="EOL";
                                         (yyval.string) = s; }
#line 23387 "parse.cc"
    break;

  case 874: /* context_word: EOS  */
#line 6452 "parse.y"
                                       { static char s[] ="EOS";
                                         (yyval.string) = s; }
#line 23394 "parse.cc"
    break;

  case 875: /* context_word: ENTRY_CONVENTION  */
#line 6454 "parse.y"
                                       { static char s[] ="ENTRY-CONVENTION";
                                         (yyval.string) = s; }
#line 23401 "parse.cc"
    break;

  case 876: /* context_word: ERASE  */
#line 6456 "parse.y"
                                       { static char s[] ="ERASE";
                                         (yyval.string) = s; }
#line 23408 "parse.cc"
    break;

  case 877: /* context_word: EXPANDS  */
#line 6458 "parse.y"
                                       { static char s[] ="EXPANDS";
                                         (yyval.string) = s; }
#line 23415 "parse.cc"
    break;

  case 878: /* context_word: FEATURE  */
#line 6460 "parse.y"
                                       { static char s[] ="FEATURE";
                                         (yyval.string) = s; }
#line 23422 "parse.cc"
    break;

  case 879: /* context_word: "FLOAT-BINARY"  */
#line 6462 "parse.y"
                                       { static char s[] ="FLOAT-BINARY";
                                         (yyval.string) = s; }
#line 23429 "parse.cc"
    break;

  case 880: /* context_word: "FLOAT-DECIMAL"  */
#line 6464 "parse.y"
                                       { static char s[] ="FLOAT-DECIMAL";
                                         (yyval.string) = s; }
#line 23436 "parse.cc"
    break;

  case 881: /* context_word: FOREGROUND_COLOR  */
#line 6466 "parse.y"
                                       { static char s[] ="FOREGROUND-COLOR";
                                         (yyval.string) = s; }
#line 23443 "parse.cc"
    break;

  case 882: /* context_word: FOREVER  */
#line 6468 "parse.y"
                                       { static char s[] ="FOREVER";
                                         (yyval.string) = s; }
#line 23450 "parse.cc"
    break;

  case 883: /* context_word: FULL  */
#line 6470 "parse.y"
                                       { static char s[] ="FULL";
                                         (yyval.string) = s; }
#line 23457 "parse.cc"
    break;

  case 884: /* context_word: "HIGH-ORDER-LEFT"  */
#line 6472 "parse.y"
                                       { static char s[] ="HIGH-ORDER-LEFT";
                                         (yyval.string) = s; }
#line 23464 "parse.cc"
    break;

  case 885: /* context_word: "HIGH-ORDER-RIGHT"  */
#line 6474 "parse.y"
                                       { static char s[] ="HIGH-ORDER-RIGHT";
                                         (yyval.string) = s; }
#line 23471 "parse.cc"
    break;

  case 886: /* context_word: HIGHLIGHT  */
#line 6476 "parse.y"
                                       { static char s[] ="HIGHLIGHT";
                                         (yyval.string) = s; }
#line 23478 "parse.cc"
    break;

  case 887: /* context_word: IGNORING  */
#line 6478 "parse.y"
                                       { static char s[] ="IGNORING";
                                         (yyval.string) = s; }
#line 23485 "parse.cc"
    break;

  case 888: /* context_word: IMPLEMENTS  */
#line 6480 "parse.y"
                                       { static char s[] ="IMPLEMENTS";
                                         (yyval.string) = s; }
#line 23492 "parse.cc"
    break;

  case 889: /* context_word: INITIALIZED  */
#line 6482 "parse.y"
                                       { static char s[] ="INITIALIZED";
                                         (yyval.string) = s; }
#line 23499 "parse.cc"
    break;

  case 890: /* context_word: INTERMEDIATE  */
#line 6484 "parse.y"
                                       { static char s[] ="INTERMEDIATE";
                                         (yyval.string) = s; }
#line 23506 "parse.cc"
    break;

  case 891: /* context_word: INTRINSIC  */
#line 6486 "parse.y"
                                       { static char s[] ="INTRINSIC";
                                         (yyval.string) = s; }
#line 23513 "parse.cc"
    break;

  case 892: /* context_word: "LC-ALL"  */
#line 6488 "parse.y"
                                       { static char s[] ="LC_ALL";
                                         (yyval.string) = s; }
#line 23520 "parse.cc"
    break;

  case 893: /* context_word: "LC-COLLATE"  */
#line 6490 "parse.y"
                                       { static char s[] ="LC_COLLATE";
                                         (yyval.string) = s; }
#line 23527 "parse.cc"
    break;

  case 894: /* context_word: "LC-CTYPE"  */
#line 6492 "parse.y"
                                       { static char s[] ="LC_CTYPE";
                                         (yyval.string) = s; }
#line 23534 "parse.cc"
    break;

  case 895: /* context_word: "LC-MESSAGES"  */
#line 6494 "parse.y"
                                       { static char s[] ="LC_MESSAGES";
                                         (yyval.string) = s; }
#line 23541 "parse.cc"
    break;

  case 896: /* context_word: "LC-MONETARY"  */
#line 6496 "parse.y"
                                       { static char s[] ="LC_MONETARY";
                                         (yyval.string) = s; }
#line 23548 "parse.cc"
    break;

  case 897: /* context_word: "LC-NUMERIC"  */
#line 6498 "parse.y"
                                       { static char s[] ="LC_NUMERIC";
                                         (yyval.string) = s; }
#line 23555 "parse.cc"
    break;

  case 898: /* context_word: "LC-TIME"  */
#line 6500 "parse.y"
                                       { static char s[] ="LC_TIME";
                                         (yyval.string) = s; }
#line 23562 "parse.cc"
    break;

  case 899: /* context_word: LOWLIGHT  */
#line 6502 "parse.y"
                                       { static char s[] ="LOWLIGHT";
                                         (yyval.string) = s; }
#line 23569 "parse.cc"
    break;

  case 900: /* context_word: MANUAL  */
#line 6504 "parse.y"
                                       { static char s[] ="MANUAL";
                                         (yyval.string) = s; }
#line 23576 "parse.cc"
    break;

  case 901: /* context_word: MULTIPLE  */
#line 6506 "parse.y"
                                       { static char s[] ="MULTIPLE";
                                         (yyval.string) = s; }
#line 23583 "parse.cc"
    break;

  case 902: /* context_word: "NEAREST-AWAY-FROM-ZERO"  */
#line 6508 "parse.y"
                                       { static char s[] ="NEAREST-AWAY-FROM-ZERO";
                                         (yyval.string) = s; }
#line 23590 "parse.cc"
    break;

  case 903: /* context_word: NEAREST_EVEN  */
#line 6510 "parse.y"
                                       { static char s[] ="NEAREST-EVEN";
                                         (yyval.string) = s; }
#line 23597 "parse.cc"
    break;

  case 904: /* context_word: "NEAREST-EVEN NEAREST-TOWARD-ZERO"  */
#line 6512 "parse.y"
                                       { static char s[] ="NEAREST-TOWARD-ZERO";
                                         (yyval.string) = s; }
#line 23604 "parse.cc"
    break;

  case 905: /* context_word: NONE  */
#line 6514 "parse.y"
                                       { static char s[] ="NONE";
                                         (yyval.string) = s; }
#line 23611 "parse.cc"
    break;

  case 906: /* context_word: NORMAL  */
#line 6516 "parse.y"
                                       { static char s[] ="NORMAL";
                                         (yyval.string) = s; }
#line 23618 "parse.cc"
    break;

  case 907: /* context_word: NUMBERS  */
#line 6518 "parse.y"
                                       { static char s[] ="NUMBERS";
                                         (yyval.string) = s; }
#line 23625 "parse.cc"
    break;

  case 908: /* context_word: ONLY  */
#line 6520 "parse.y"
                                       { static char s[] ="ONLY";
                                         (yyval.string) = s; }
#line 23632 "parse.cc"
    break;

  case 909: /* context_word: PREFIXED  */
#line 6522 "parse.y"
                                       { static char s[] ="PREFIXED";
                                         (yyval.string) = s; }
#line 23639 "parse.cc"
    break;

  case 910: /* context_word: PREVIOUS  */
#line 6524 "parse.y"
                                       { static char s[] ="PREVIOUS";
                                         (yyval.string) = s; }
#line 23646 "parse.cc"
    break;

  case 911: /* context_word: PROHIBITED  */
#line 6526 "parse.y"
                                       { static char s[] ="PROHIBITED";
                                         (yyval.string) = s; }
#line 23653 "parse.cc"
    break;

  case 912: /* context_word: RECURSIVE  */
#line 6528 "parse.y"
                                       { static char s[] ="RECURSIVE";
                                         (yyval.string) = s; }
#line 23660 "parse.cc"
    break;

  case 913: /* context_word: RELATION  */
#line 6530 "parse.y"
                                       { static char s[] ="RELATION";
                                         (yyval.string) = s; }
#line 23667 "parse.cc"
    break;

  case 914: /* context_word: REQUIRED  */
#line 6532 "parse.y"
                                       { static char s[] ="REQUIRED";
                                         (yyval.string) = s; }
#line 23674 "parse.cc"
    break;

  case 915: /* context_word: REVERSE_VIDEO  */
#line 6534 "parse.y"
                                       { static char s[] ="REVERSE-VIDEO";
                                         (yyval.string) = s; }
#line 23681 "parse.cc"
    break;

  case 916: /* context_word: ROUNDING  */
#line 6536 "parse.y"
                                       { static char s[] ="ROUNDING";
                                         (yyval.string) = s; }
#line 23688 "parse.cc"
    break;

  case 917: /* context_word: SECONDS  */
#line 6538 "parse.y"
                                       { static char s[] ="SECONDS";
                                         (yyval.string) = s; }
#line 23695 "parse.cc"
    break;

  case 918: /* context_word: SECURE  */
#line 6540 "parse.y"
                                       { static char s[] ="SECURE";
                                         (yyval.string) = s; }
#line 23702 "parse.cc"
    break;

  case 919: /* context_word: SHORT  */
#line 6542 "parse.y"
                                       { static char s[] ="SHORT";
                                         (yyval.string) = s; }
#line 23709 "parse.cc"
    break;

  case 920: /* context_word: SIGNED_kw  */
#line 6544 "parse.y"
                                       { static char s[] ="SIGNED";
                                         (yyval.string) = s; }
#line 23716 "parse.cc"
    break;

  case 921: /* context_word: "STANDARD-BINARY"  */
#line 6546 "parse.y"
                                       { static char s[] ="STANDARD-BINARY";
                                         (yyval.string) = s; }
#line 23723 "parse.cc"
    break;

  case 922: /* context_word: "STANDARD-DECIMAL"  */
#line 6548 "parse.y"
                                       { static char s[] ="STANDARD-DECIMAL";
                                         (yyval.string) = s; }
#line 23730 "parse.cc"
    break;

  case 923: /* context_word: STATEMENT  */
#line 6550 "parse.y"
                                       { static char s[] ="STATEMENT";
                                         (yyval.string) = s; }
#line 23737 "parse.cc"
    break;

  case 924: /* context_word: STEP  */
#line 6552 "parse.y"
                                       { static char s[] ="STEP";
                                         (yyval.string) = s; }
#line 23744 "parse.cc"
    break;

  case 925: /* context_word: STRONG  */
#line 6554 "parse.y"
                                       { static char s[] ="STRONG";
                                         (yyval.string) = s; }
#line 23751 "parse.cc"
    break;

  case 926: /* context_word: STRUCTURE  */
#line 6556 "parse.y"
                                       { static char s[] ="STRUCTURE";
                                         (yyval.string) = s; }
#line 23758 "parse.cc"
    break;

  case 927: /* context_word: SYMBOL  */
#line 6558 "parse.y"
                                       { static char s[] ="SYMBOL";
                                         (yyval.string) = s; }
#line 23765 "parse.cc"
    break;

  case 928: /* context_word: "TOWARD-GREATER"  */
#line 6560 "parse.y"
                                       { static char s[] ="TOWARD-GREATER";
                                         (yyval.string) = s; }
#line 23772 "parse.cc"
    break;

  case 929: /* context_word: "TOWARD-LESSER"  */
#line 6562 "parse.y"
                                       { static char s[] ="TOWARD-LESSER";
                                         (yyval.string) = s; }
#line 23779 "parse.cc"
    break;

  case 930: /* context_word: TRUNCATION  */
#line 6564 "parse.y"
                                       { static char s[] ="TRUNCATION";
                                         (yyval.string) = s; }
#line 23786 "parse.cc"
    break;

  case 931: /* context_word: "UCS-4"  */
#line 6566 "parse.y"
                                       { static char s[] ="UCS-4";
                                         (yyval.string) = s; }
#line 23793 "parse.cc"
    break;

  case 932: /* context_word: UNDERLINE  */
#line 6568 "parse.y"
                                       { static char s[] ="UNDERLINE";
                                         (yyval.string) = s; }
#line 23800 "parse.cc"
    break;

  case 933: /* context_word: UNSIGNED_kw  */
#line 6570 "parse.y"
                                       { static char s[] ="UNSIGNED";
                                         (yyval.string) = s; }
#line 23807 "parse.cc"
    break;

  case 934: /* context_word: "UTF-8"  */
#line 6572 "parse.y"
                                       { static char s[] ="UTF-8";
                                         (yyval.string) = s; }
#line 23814 "parse.cc"
    break;

  case 935: /* context_word: "UTF-16"  */
#line 6574 "parse.y"
                                       { static char s[] ="UTF-16";
                                         (yyval.string) = s; }
#line 23821 "parse.cc"
    break;

  case 936: /* context_word: YYYYDDD  */
#line 6576 "parse.y"
                                       { static char s[] ="YYYYDDD";
                                         (yyval.string) = s; }
#line 23828 "parse.cc"
    break;

  case 937: /* context_word: YYYYMMDD  */
#line 6578 "parse.y"
                                       { static char s[] ="YYYYMMDD";
                                         (yyval.string) = s; }
#line 23835 "parse.cc"
    break;

  case 938: /* move: MOVE scalar TO move_tgts  */
#line 6583 "parse.y"
                {
                  statement_begin((yylsp[-3]), MOVE);
                  if( (yyvsp[-2].refer)->field->type == FldIndex ) {
                    error_msg((yylsp[-3]), "'%s' cannot be MOVEd because it's an INDEX",
			     name_of((yyvsp[-2].refer)->field) );
                    YYERROR;
                  }
                  if( !parser_move2((yyvsp[0].targets), *(yyvsp[-2].refer)) ) { YYERROR; }
                }
#line 23849 "parse.cc"
    break;

  case 939: /* move: MOVE all literalism TO move_tgts  */
#line 6593 "parse.y"
                {
                  statement_begin((yylsp[-4]), MOVE);
                  struct cbl_refer_t *src = new_reference(new_literal((yyvsp[-2].literal),
                                                                      quoted_e));
                  src->all = (yyvsp[-3].boolean);
                  if( !parser_move2((yyvsp[0].targets), *src) ) { YYERROR; }
                }
#line 23861 "parse.cc"
    break;

  case 940: /* move: MOVE all spaces_etc TO move_tgts  */
#line 6601 "parse.y"
                {
                  statement_begin((yylsp[-4]), MOVE);
                  cbl_field_t *field;
                  auto p = std::find_if( (yyvsp[0].targets)->targets.begin(),
                                         (yyvsp[0].targets)->targets.end(),
                                         [&field]( const auto& num_result ) {
                                             const cbl_refer_t& tgt = num_result.refer;
                                             field = tgt.field;
                                             return is_numeric(tgt.field);
                                            } );

                  if( p != (yyvsp[0].targets)->targets.end() ) {
                    error_msg((yylsp[-2]), "cannot MOVE %s "
			            "to numeric receiving field %s",
			      constant_of(constant_index((yyvsp[-2].number)))->name,
			      field->name );
                    YYERROR;
                  }

                  struct cbl_field_t* src = constant_of(constant_index((yyvsp[-2].number)));
                  if( !parser_move2((yyvsp[0].targets), src) ) { YYERROR; }
                }
#line 23888 "parse.cc"
    break;

  case 941: /* move: MOVE all signed_literal TO move_tgts  */
#line 6624 "parse.y"
                {
                  statement_begin((yylsp[-4]), MOVE);
                  cbl_refer_t src( (yyvsp[-2].field), (yyvsp[-3].boolean));
                  if( !parser_move2((yyvsp[0].targets), src) ) { YYERROR; }
                }
#line 23898 "parse.cc"
    break;

  case 942: /* move: MOVE intrinsic_call TO move_tgts  */
#line 6631 "parse.y"
                {
                  statement_begin((yylsp[-3]), MOVE);
                  if( !parser_move2((yyvsp[0].targets), *(yyvsp[-2].refer)) ) { YYERROR; }
                }
#line 23907 "parse.cc"
    break;

  case 943: /* move: MOVE CORRESPONDING scalar TO scalar  */
#line 6637 "parse.y"
                {
                  statement_begin((yylsp[-4]), MOVE);
                  if( (yyvsp[-2].refer)->field->type != FldGroup ) {
                    error_msg((yylsp[-2]), "%s does not name a group", (yyvsp[-2].refer)->name());
                    YYERROR;
                  }
                  if( (yyvsp[0].refer)->field->type != FldGroup ) {
                    error_msg((yylsp[0]), "%s does not name a group", (yyvsp[0].refer)->name());
                    YYERROR;
                  }

                  if( !move_corresponding(*(yyvsp[0].refer), *(yyvsp[-2].refer)) ) {
                    yywarn( "%s and %s have no corresponding fields",
                            (yyvsp[-2].refer)->field->name, (yyvsp[0].refer)->field->name );
                  }
                }
#line 23928 "parse.cc"
    break;

  case 944: /* move_tgts: move_tgt  */
#line 6655 "parse.y"
                              {
                  (yyval.targets) = new tgt_list_t;
                  if( (yyvsp[0].refer) ) list_add((yyval.targets)->targets, *(yyvsp[0].refer), current_rounded_mode());
                }
#line 23937 "parse.cc"
    break;

  case 945: /* move_tgts: move_tgts move_tgt  */
#line 6660 "parse.y"
                {
                  if( (yyvsp[0].refer) ) list_add((yyvsp[-1].targets)->targets, *(yyvsp[0].refer), current_rounded_mode());
                }
#line 23945 "parse.cc"
    break;

  case 946: /* move_tgt: scalar  */
#line 6664 "parse.y"
                            {
		  if( is_literal((yyvsp[0].refer)->field) ) {
		    auto litcon = (yyvsp[0].refer)->field->name[0] == '_'? "literal" : "constant";
		    error_msg((yylsp[0]), "%s is a %s", name_of((yyvsp[0].refer)->field), litcon);
		  }
		}
#line 23956 "parse.cc"
    break;

  case 947: /* move_tgt: literal  */
#line 6670 "parse.y"
                        {
		  const auto& field(*(yyvsp[0].field));
		  static char buf[32];
		  const char *value_str( name_of((yyvsp[0].field)) );
		  if( is_numeric((yyvsp[0].field)) )
		  {
		    REAL_VALUE_TYPE val = TREE_REAL_CST (field.data.value_of());
		    int ival = (int)real_to_integer (&val);
		    val = real_value_truncate (TYPE_MODE (float_type_node),
					       val);
		    REAL_VALUE_TYPE rival;
		    real_from_integer (&rival, VOIDmode, ival, SIGNED);
		    if( real_identical (&val, &rival) ) {
		      sprintf(buf, "%d", ival);
		      value_str = buf;
		    }
		  }
		  auto litcon = field.name[0] == '_'? "literal" : "constant";
		  error_msg((yylsp[0]), "%s is a %s", value_str, litcon);
		  (yyval.refer) = NULL;
		}
#line 23982 "parse.cc"
    break;

  case 948: /* move_tgt: error  */
#line 6692 "parse.y"
                {
		  static const char * error_at;
		  if( error_at != yytext ) { // avoid repeated message
		    error_at = yytext;
		    error_msg(first_line_of((yylsp[0])), "invalid receiving operand");
		  }
		  (yyval.refer) = NULL;
                }
#line 23995 "parse.cc"
    break;

  case 949: /* multiply: multiply_impl end_multiply  */
#line 6702 "parse.y"
                                            { ast_multiply((yyvsp[-1].arith)); }
#line 24001 "parse.cc"
    break;

  case 950: /* multiply: multiply_cond end_multiply  */
#line 6703 "parse.y"
                                            { ast_multiply((yyvsp[-1].arith)); }
#line 24007 "parse.cc"
    break;

  case 951: /* multiply_impl: MULTIPLY multiply_body  */
#line 6706 "parse.y"
                {
                  statement_begin((yylsp[-1]), MULTIPLY);
                  (yyval.arith) = (yyvsp[0].arith);
                }
#line 24016 "parse.cc"
    break;

  case 952: /* multiply_cond: MULTIPLY multiply_body arith_errs  */
#line 6712 "parse.y"
                {
                  statement_begin((yylsp[-2]), MULTIPLY);
                  (yyval.arith) = (yyvsp[-1].arith);
                  (yyval.arith)->on_error = (yyvsp[0].error).on_error;
                  (yyval.arith)->not_error = (yyvsp[0].error).not_error;
                }
#line 24027 "parse.cc"
    break;

  case 955: /* multiply_body: num_operand BY rnames  */
#line 6724 "parse.y"
                {
                  (yyval.arith) = new arith_t(no_giving_e);
                  (yyval.arith)->A.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 24039 "parse.cc"
    break;

  case 956: /* multiply_body: num_operand BY signed_literal  */
#line 6732 "parse.y"
                {
                  error_msg((yylsp[0]), "%s is not a receiving field", name_of((yyvsp[0].field)));
                  YYERROR;
                }
#line 24048 "parse.cc"
    break;

  case 957: /* multiply_body: num_operand BY num_operand GIVING rnames  */
#line 6737 "parse.y"
                {
                  (yyval.arith) = new arith_t(giving_e);
                  (yyval.arith)->A.push_back(*(yyvsp[-4].refer));
                  (yyval.arith)->B.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 24061 "parse.cc"
    break;

  case 958: /* multiply_body: num_operand BY num_operand GIVING signed_literal  */
#line 6746 "parse.y"
                {
                  error_msg((yylsp[0]), "%s is not a receiving field", name_of((yyvsp[0].field)));
                  YYERROR;
                }
#line 24070 "parse.cc"
    break;

  case 959: /* multiply_body: LITERAL  */
#line 6751 "parse.y"
                {
                  error_msg((yylsp[0]), "invalid string operand '%s'", (yyvsp[0].literal).data);
                  YYERROR;
                }
#line 24079 "parse.cc"
    break;

  case 960: /* arith_errs: arith_err statements  */
#line 6758 "parse.y"
                {
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error? (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_arith_error_end(tgt);
                }
#line 24090 "parse.cc"
    break;

  case 961: /* arith_errs: arith_errs arith_err statements  */
#line 6765 "parse.y"
                {
                  if( (yyvsp[-2].error).on_error && (yyvsp[-2].error).not_error ) {
                    error_msg((yylsp[-2]), "too many ON ERROR clauses");
                    YYERROR;
                  }
                  // "ON" and "NOT ON" could be reversed, but not duplicated.
                  if( (yyvsp[-2].error).on_error && (yyvsp[-1].error).on_error ) {
                    error_msg((yylsp[-2]), "duplicate ON ERROR clauses");
                    YYERROR;
                  }
                  if( (yyvsp[-2].error).not_error && (yyvsp[-1].error).not_error ) {
                    error_msg((yylsp[-2]), "duplicate NOT ON ERROR clauses");
                    YYERROR;
                  }
                  (yyval.error) = (yyvsp[-2].error);
                  if( (yyvsp[-1].error).on_error ) {
                    (yyval.error).on_error = (yyvsp[-1].error).on_error;
                    assert((yyvsp[-2].error).not_error);
                  } else {
                    (yyval.error).not_error = (yyvsp[-1].error).not_error;
                    assert((yyvsp[-2].error).on_error);
                  }
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error? (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_arith_error_end(tgt);
                }
#line 24122 "parse.cc"
    break;

  case 962: /* arith_err: "SIZE ERROR"  */
#line 6795 "parse.y"
                {
                  assert( (yyvsp[0].number) == ERROR || (yyvsp[0].number) == NOT );
                  (yyval.error).on_error  = NULL;
                  (yyval.error).not_error = NULL;
                  cbl_label_t **ptgt = (yyvsp[0].number) == NOT? &(yyval.error).not_error : &(yyval.error).on_error;
                  if( current.in_compute() ) {
                    *ptgt = (yyvsp[0].number) == NOT?
                      current.compute_not_error() : current.compute_on_error();
                  } else {
                    *ptgt = label_add(LblArith, uniq_label("arith"), yylineno);
                  }
		  (*ptgt)->lain = yylineno;
                  parser_arith_error( *ptgt );
                }
#line 24141 "parse.cc"
    break;

  case 963: /* relop: '<'  */
#line 6825 "parse.y"
                    { (yyval.number) = '<'; }
#line 24147 "parse.cc"
    break;

  case 964: /* relop: LE  */
#line 6826 "parse.y"
                    { (yyval.number) = LE;  }
#line 24153 "parse.cc"
    break;

  case 965: /* relop: '='  */
#line 6827 "parse.y"
                    { (yyval.number) = '='; }
#line 24159 "parse.cc"
    break;

  case 966: /* relop: NE  */
#line 6828 "parse.y"
                    { (yyval.number) = NE;  }
#line 24165 "parse.cc"
    break;

  case 967: /* relop: GE  */
#line 6829 "parse.y"
                    { (yyval.number) = GE;  }
#line 24171 "parse.cc"
    break;

  case 968: /* relop: '>'  */
#line 6830 "parse.y"
                    { (yyval.number) = '>'; }
#line 24177 "parse.cc"
    break;

  case 969: /* rnames: scalar rounded  */
#line 6834 "parse.y"
                {
                  list_add( rhs, *(yyvsp[-1].refer), (yyvsp[0].opt_round) );
                }
#line 24185 "parse.cc"
    break;

  case 970: /* rnames: rnames scalar rounded  */
#line 6838 "parse.y"
                {
                  cbl_num_result_t arg = { static_cast<cbl_round_t>((yyvsp[0].opt_round)),
                                           *(yyvsp[-1].refer) };
                  rhs.push_back(arg);
                }
#line 24195 "parse.cc"
    break;

  case 971: /* sum: num_operand  */
#line 6845 "parse.y"
                                    { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 24201 "parse.cc"
    break;

  case 972: /* sum: sum num_operand  */
#line 6846 "parse.y"
                                    { (yyval.refers)->push_back((yyvsp[0].refer)); }
#line 24207 "parse.cc"
    break;

  case 974: /* num_operand: signed_literal  */
#line 6850 "parse.y"
                               { (yyval.refer) = new_reference((yyvsp[0].field)); }
#line 24213 "parse.cc"
    break;

  case 978: /* num_value: num_literal  */
#line 6856 "parse.y"
                            { (yyval.refer) = new_reference((yyvsp[0].field)); }
#line 24219 "parse.cc"
    break;

  case 979: /* num_value: ADDRESS OF scalar  */
#line 6857 "parse.y"
                                  {(yyval.refer) = (yyvsp[0].refer); (yyval.refer)->addr_of = true; }
#line 24225 "parse.cc"
    break;

  case 980: /* num_value: DETAIL OF scalar  */
#line 6858 "parse.y"
                                 {(yyval.refer) = (yyvsp[0].refer); }
#line 24231 "parse.cc"
    break;

  case 981: /* num_value: "LENGTH-OF" name  */
#line 6859 "parse.y"
                                    {
                  location_set((yylsp[-1]));
                  (yyval.refer) = new cbl_refer_t( new_tempnumeric() );
		  (yyval.refer)->field->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-1]), "LENGTH OF", "ibm");
                  }
		  parser_set_numeric((yyval.refer)->field, (yyvsp[0].field)->data.capacity);
                }
#line 24245 "parse.cc"
    break;

  case 982: /* num_value: "LENGTH-OF" name subscripts  */
#line 6868 "parse.y"
                                                     {
                  location_set((yylsp[-2]));
                  (yyval.refer) = new cbl_refer_t( new_tempnumeric() );
		  (yyval.refer)->field->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-2]), "LENGTH OF", "ibm");
                  }
                  if( 0 == dimensions((yyvsp[-1].field)) ) {
		    cbl_refer_t r1((yyvsp[-1].field));
		    subscript_dimension_error( (yylsp[0]), (yyvsp[0].refers)->refers.size(), &r1 );
                  }
		  parser_set_numeric((yyval.refer)->field, (yyvsp[-1].field)->data.capacity);
                }
#line 24263 "parse.cc"
    break;

  case 984: /* cce_expr: cce_expr '+' cce_expr  */
#line 6909 "parse.y"
                                      {
                  real_arithmetic (&(yyval.float128), PLUS_EXPR, &(yyvsp[-2].float128), &(yyvsp[0].float128));
                  real_convert (&(yyval.float128), TYPE_MODE (float128_type_node), &(yyval.float128));
                }
#line 24272 "parse.cc"
    break;

  case 985: /* cce_expr: cce_expr '-' cce_expr  */
#line 6913 "parse.y"
                                      {
                  real_arithmetic (&(yyval.float128), MINUS_EXPR, &(yyvsp[-2].float128), &(yyvsp[0].float128));
                  real_convert (&(yyval.float128), TYPE_MODE (float128_type_node), &(yyval.float128));
                }
#line 24281 "parse.cc"
    break;

  case 986: /* cce_expr: cce_expr '*' cce_expr  */
#line 6917 "parse.y"
                                      {
                  real_arithmetic (&(yyval.float128), MULT_EXPR, &(yyvsp[-2].float128), &(yyvsp[0].float128));
                  real_convert (&(yyval.float128), TYPE_MODE (float128_type_node), &(yyval.float128));
                }
#line 24290 "parse.cc"
    break;

  case 987: /* cce_expr: cce_expr '/' cce_expr  */
#line 6921 "parse.y"
                                      {
                  real_arithmetic (&(yyval.float128), RDIV_EXPR, &(yyvsp[-2].float128), &(yyvsp[0].float128));
                  real_convert (&(yyval.float128), TYPE_MODE (float128_type_node), &(yyval.float128));
                }
#line 24299 "parse.cc"
    break;

  case 988: /* cce_expr: '+' cce_expr  */
#line 6925 "parse.y"
                                                { (yyval.float128) =  (yyvsp[0].float128); }
#line 24305 "parse.cc"
    break;

  case 989: /* cce_expr: '-' cce_expr  */
#line 6926 "parse.y"
                                                { (yyval.float128) = real_value_negate (&(yyvsp[0].float128)); }
#line 24311 "parse.cc"
    break;

  case 990: /* cce_expr: '(' cce_expr ')'  */
#line 6927 "parse.y"
                                           { (yyval.float128) = (yyvsp[-1].float128); }
#line 24317 "parse.cc"
    break;

  case 991: /* cce_factor: "numeric literal"  */
#line 6930 "parse.y"
                       {
                  /* real_from_string does not allow arbitrary radix.  */
                  // When DECIMAL IS COMMA, commas act as decimal points.
		  gcc_assert((yyvsp[0].numstr).radix == decimal_e);
		  auto p = (yyvsp[0].numstr).string, pend = p + strlen(p);
		  std::replace(p, pend, ',', '.');
		  real_from_string3( &(yyval.float128), (yyvsp[0].numstr).string,
				     TYPE_MODE (float128_type_node) );
                }
#line 24331 "parse.cc"
    break;

  case 992: /* section_name: NAME section_kw '.'  */
#line 6946 "parse.y"
                {
                  statement_begin((yylsp[-2]), SECTION);
		  (yyval.label) = label_add((yylsp[-2]), LblSection, (yyvsp[-2].string));
                  ast_enter_section((yyval.label));
                  apply_declaratives();
                }
#line 24342 "parse.cc"
    break;

  case 993: /* @19: %empty  */
#line 6953 "parse.y"
                       {
                  statement_begin((yylsp[-1]), SECTION);
		  (yyval.label) = label_add((yylsp[-1]), LblSection, (yyvsp[-1].string));
                  ast_enter_section((yyval.label));
                  apply_declaratives();
                }
#line 24353 "parse.cc"
    break;

  case 994: /* section_name: NAME section_kw @19 cdf_use dot  */
#line 6960 "parse.y"
                {
                  (yyval.label) = (yyvsp[-2].label);
                }
#line 24361 "parse.cc"
    break;

  case 995: /* section_kw: SECTION  */
#line 6966 "parse.y"
                {
                  if( (yyvsp[0].string) ) {
		    if( *(yyvsp[0].string) == '-' ) {
		      error_msg((yylsp[0]), "SECTION segment %s is negative", (yyvsp[0].string));
                    } else {
                      cbl_unimplementedw("SECTION segment %s was ignored", (yyvsp[0].string));
                    }
		  }
                }
#line 24375 "parse.cc"
    break;

  case 996: /* section_kw: SECTION error  */
#line 6976 "parse.y"
                {
                  error_msg((yylsp[-1]), "unknown section qualifier");
                }
#line 24383 "parse.cc"
    break;

  case 997: /* stop: STOP RUN exit_with  */
#line 6982 "parse.y"
                {
                  statement_begin((yylsp[-2]), STOP);
                  parser_see_stop_run( *(yyvsp[0].refer), NULL );
                }
#line 24392 "parse.cc"
    break;

  case 998: /* stop: STOP "numeric literal"  */
#line 6987 "parse.y"
                {
                  statement_begin((yylsp[-1]), STOP);
                  if( ! dialect_ibm() ) {
                    dialect_error((yylsp[0]), "STOP <number> is not ISO syntax,", "ibm");
                    YYERROR;
                  }
                  cbl_refer_t status( new_literal((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix) );
                  parser_see_stop_run( status, NULL );
                }
#line 24406 "parse.cc"
    break;

  case 999: /* stop: STOP LITERAL  */
#line 6997 "parse.y"
                {
                  statement_begin((yylsp[-1]), STOP);
                  const char *name = string_of((yyvsp[0].literal));
                  if( ! name ) {
                    error_msg((yylsp[0]), "'%s' has embedded NUL", (yyvsp[0].literal).data);
                    YYERROR;
                  }
                  parser_see_stop_run( literally_zero, (yyvsp[0].literal).data );
                }
#line 24420 "parse.cc"
    break;

  case 1000: /* stop_status: status  */
#line 7007 "parse.y"
                               { (yyval.refer) = NULL; }
#line 24426 "parse.cc"
    break;

  case 1001: /* stop_status: status scalar  */
#line 7008 "parse.y"
                               { (yyval.refer) = (yyvsp[0].refer); }
#line 24432 "parse.cc"
    break;

  case 1002: /* stop_status: status "numeric literal"  */
#line 7009 "parse.y"
                              {
                  (yyval.refer) = new_reference(new_literal((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix));
                }
#line 24440 "parse.cc"
    break;

  case 1003: /* subscripts: " )" expr_list ')'  */
#line 7014 "parse.y"
                                     {
		  (yyval.refers) = (yyvsp[-1].refers);
		  const auto& exprs( (yyval.refers)->refers );
		  bool ok = std::all_of( exprs.begin(), exprs.end(),
					 []( const auto& refer ) {
					     return is_numeric(refer.field);
					 } );
		  if( ! ok ) {
		    int i=0;
		    for( auto refer : exprs ) {
		      if( ! is_numeric(refer.field) ) {
			  error_msg((yylsp[-2]), "subscript %d, %s, is not numeric (%s)",
				   ++i, name_of(refer.field),
				   cbl_field_type_str(refer.field->type) + 3);
		      }
		    }
		    YYERROR;
		  }
		}
#line 24464 "parse.cc"
    break;

  case 1004: /* expr_list: expr  */
#line 7035 "parse.y"
                {
		  if( ! require_numeric((yylsp[0]), *(yyvsp[0].refer)) ) YYERROR;
		  (yyval.refers) = new refer_list_t((yyvsp[0].refer));
		}
#line 24473 "parse.cc"
    break;

  case 1005: /* expr_list: expr_list expr  */
#line 7039 "parse.y"
                               {
                  if( (yyvsp[-1].refers)->size() == MAXIMUM_TABLE_DIMENSIONS ) {
                    error_msg((yylsp[-1]), "table dimensions limited to %d",
                             MAXIMUM_TABLE_DIMENSIONS);
                    YYERROR;
                  }
		  if( ! require_numeric((yylsp[0]), *(yyvsp[0].refer)) ) YYERROR;
                  (yyvsp[-1].refers)->push_back((yyvsp[0].refer)); (yyval.refers) = (yyvsp[-1].refers);
                }
#line 24487 "parse.cc"
    break;

  case 1006: /* expr_list: ALL  */
#line 7048 "parse.y"
                    {
                  auto ref = new_reference(constant_of(constant_index(ZERO)));
                  (yyval.refers) = new refer_list_t(ref);
                }
#line 24496 "parse.cc"
    break;

  case 1007: /* arg_list: any_arg  */
#line 7054 "parse.y"
                                 { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 24502 "parse.cc"
    break;

  case 1008: /* arg_list: arg_list any_arg  */
#line 7055 "parse.y"
                                 { (yyvsp[-1].refers)->push_back((yyvsp[0].refer)); (yyval.refers) = (yyvsp[-1].refers); }
#line 24508 "parse.cc"
    break;

  case 1010: /* any_arg: LITERAL  */
#line 7058 "parse.y"
                        {(yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 24514 "parse.cc"
    break;

  case 1012: /* signed_literal: '+' num_literal  */
#line 7066 "parse.y"
                                { (yyval.field) = (yyvsp[0].field); }
#line 24520 "parse.cc"
    break;

  case 1013: /* signed_literal: '-' num_literal  */
#line 7068 "parse.y"
                {
                  (yyval.field) = new_tempnumeric();
                  struct cbl_field_t *zero = constant_of(constant_index(ZERO));
                  parser_subtract( (yyval.field), zero, (yyvsp[0].field), current_rounded_mode() );
                }
#line 24530 "parse.cc"
    break;

  case 1014: /* signed_literal: "LENGTH-OF" name  */
#line 7073 "parse.y"
                                    {
                  location_set((yylsp[-1]));
                  (yyval.field) = new_tempnumeric();
		  (yyval.field)->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-1]), "LENGTH OF", "ibm");
                  }
                  parser_set_numeric((yyval.field), (yyvsp[0].field)->data.capacity);
                }
#line 24544 "parse.cc"
    break;

  case 1015: /* signed_literal: "LENGTH-OF" name subscripts  */
#line 7082 "parse.y"
                                                     {
                  location_set((yylsp[-2]));
                  (yyval.field) = new_tempnumeric();
		  (yyval.field)->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-2]), "LENGTH OF", "ibm");
                  }
                  if( 0 == dimensions((yyvsp[-1].field)) ) {
		    cbl_refer_t r1((yyvsp[-1].field));
		    subscript_dimension_error( (yylsp[0]), (yyvsp[0].refers)->refers.size(), &r1 );
                  }
                  parser_set_numeric((yyval.field), (yyvsp[-1].field)->data.capacity);
                }
#line 24562 "parse.cc"
    break;

  case 1016: /* num_literal: "numeric literal"  */
#line 7097 "parse.y"
                       { (yyval.field) = new_literal((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix); }
#line 24568 "parse.cc"
    break;

  case 1017: /* num_literal: ZERO  */
#line 7098 "parse.y"
                       { (yyval.field) = constant_of(constant_index(ZERO)); }
#line 24574 "parse.cc"
    break;

  case 1018: /* $@20: %empty  */
#line 7101 "parse.y"
                     { statement_begin((yylsp[0]), OPEN); }
#line 24580 "parse.cc"
    break;

  case 1022: /* open_file: open_io filenames  */
#line 7106 "parse.y"
                                        {
                  size_t n = (yyvsp[0].files)->files.size();
                  parser_file_open( n, use_list((yyvsp[0].files)->files, false), (yyvsp[-1].number) );
                  current.declaratives_evaluate((yyvsp[0].files)->files);
                  (yyvsp[0].files)->files.clear();
                }
#line 24591 "parse.cc"
    break;

  case 1023: /* open_io: INPUT  */
#line 7113 "parse.y"
                       { (yyval.number) = 'r'; }
#line 24597 "parse.cc"
    break;

  case 1024: /* open_io: OUTPUT  */
#line 7114 "parse.y"
                       { (yyval.number) = 'w'; }
#line 24603 "parse.cc"
    break;

  case 1025: /* open_io: EXTEND  */
#line 7115 "parse.y"
                       { (yyval.number) = 'a'; }
#line 24609 "parse.cc"
    break;

  case 1026: /* open_io: IO  */
#line 7116 "parse.y"
                       { (yyval.number) = '+'; }
#line 24615 "parse.cc"
    break;

  case 1027: /* $@21: %empty  */
#line 7119 "parse.y"
                      { statement_begin((yylsp[0]), CLOSE); }
#line 24621 "parse.cc"
    break;

  case 1031: /* close_file: NAME close_how  */
#line 7125 "parse.y"
                {
                  struct symbol_elem_t *e = symbol_file(PROGRAM, (yyvsp[-1].string));
                  if( !e ) {
                    error_msg((yylsp[-1]), "invalid file name '%s'", (yyvsp[-1].string));
                    YYERROR;
                  }
                  auto how = static_cast<file_close_how_t>((yyvsp[0].number));
                  bool reel_unit = (file_close_reel_unit_e & (yyvsp[0].number)) > 0;
                  auto file = cbl_file_of(e);
                  switch( file->org ) {
                  case file_disorganized_e:
                    gcc_unreachable();
                    break;
                  case file_sequential_e:
                  case file_line_sequential_e:
                    break;
                  case file_indexed_e:;
                  case file_relative_e:
                    if( (yyvsp[0].number) & ~file_close_with_lock_e ) {
                      error_msg((yylsp[-1]), "INDEXED or RELATIVE file "
                               "closed with incompatible qualifier" );
                      YYERROR;
                    }
                    break;
                  }
                  if(reel_unit)
                    {
                    how = file_close_reel_unit_e;
                    }
                  parser_file_close( file, how );
                  current.declaratives_evaluate( file );
                }
#line 24658 "parse.cc"
    break;

  case 1032: /* close_how: %empty  */
#line 7158 "parse.y"
                                         { (yyval.number) = file_close_no_how_e; }
#line 24664 "parse.cc"
    break;

  case 1033: /* close_how: reel_unit  */
#line 7159 "parse.y"
                                         { (yyval.number) = file_close_reel_unit_e; }
#line 24670 "parse.cc"
    break;

  case 1034: /* close_how: reel_unit for_kw REMOVAL  */
#line 7160 "parse.y"
                                         {
                  (yyval.number) = file_close_reel_unit_e | file_close_removal_e;
                }
#line 24678 "parse.cc"
    break;

  case 1035: /* close_how: reel_unit WITH NO REWIND  */
#line 7163 "parse.y"
                                         {
                  (yyval.number) = file_close_reel_unit_e | file_close_no_rewind_e;
                }
#line 24686 "parse.cc"
    break;

  case 1036: /* close_how: with NO REWIND  */
#line 7166 "parse.y"
                                         { (yyval.number) = file_close_no_rewind_e; }
#line 24692 "parse.cc"
    break;

  case 1037: /* close_how: with LOCK  */
#line 7167 "parse.y"
                                         { (yyval.number) = file_close_with_lock_e; }
#line 24698 "parse.cc"
    break;

  case 1042: /* perform: perform_verb perform_proc  */
#line 7176 "parse.y"
                                            { perform_free(); }
#line 24704 "parse.cc"
    break;

  case 1043: /* perform: perform_verb perform_stmts  */
#line 7177 "parse.y"
                                            {
		  perform_ec_cleanup();
		  perform_free();
		}
#line 24713 "parse.cc"
    break;

  case 1044: /* perform: perform_verb perform_except  */
#line 7181 "parse.y"
                                            {
		  perform_ec_cleanup();
		  perform_free();
		}
#line 24722 "parse.cc"
    break;

  case 1045: /* perform_stmts: perform_until perform_inline  */
#line 7188 "parse.y"
                {
                  std::vector <cbl_perform_vary_t> varys((yyvsp[0].perf)->varys.size());
                  std::copy( (yyvsp[0].perf)->varys.begin(), (yyvsp[0].perf)->varys.end(), varys.begin() );

                  parser_perform_until(&(yyvsp[0].perf)->tgt, (yyvsp[0].perf)->before,
				       varys.size(), varys.data());
                }
#line 24734 "parse.cc"
    break;

  case 1046: /* perform_stmts: perform_vary perform_inline  */
#line 7196 "parse.y"
                {
		  struct perform_t *p = (yyvsp[0].perf);
                  std::vector <cbl_perform_vary_t> varys(p->varys.size());
                  std::copy( p->varys.begin(), p->varys.end(), varys.begin() );

                  parser_perform_until(&(yyvsp[0].perf)->tgt, (yyvsp[0].perf)->before,
				       varys.size(), varys.data());
                }
#line 24747 "parse.cc"
    break;

  case 1047: /* perform_stmts: perform_times perform_inline  */
#line 7205 "parse.y"
                {
                  parser_perform_inline_times(&(yyvsp[0].perf)->tgt, *(yyvsp[-1].refer));
                }
#line 24755 "parse.cc"
    break;

  case 1048: /* perform_stmts: perform_inline  */
#line 7209 "parse.y"
                {
                  parser_perform_inline_times(&(yyvsp[0].perf)->tgt, literally_one);
                }
#line 24763 "parse.cc"
    break;

  case 1049: /* perform_proc: perform_names  */
#line 7215 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  if( yydebug ) p->tgt.dump();
                  parser_perform(&p->tgt, NULL);
                }
#line 24773 "parse.cc"
    break;

  case 1050: /* perform_proc: perform_names num_operand TIMES  */
#line 7221 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  if( yydebug ) p->tgt.dump();
                  parser_perform(&p->tgt, *(yyvsp[-1].refer));
                }
#line 24783 "parse.cc"
    break;

  case 1051: /* perform_proc: perform_names perform_until  */
#line 7227 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  if( yydebug ) p->tgt.dump();
                  assert(1 == p->varys.size());
                  parser_perform_until( &p->tgt, p->before, 1, &p->varys.front() );
                }
#line 24794 "parse.cc"
    break;

  case 1052: /* perform_proc: perform_names perform_vary  */
#line 7234 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  if( yydebug ) p->tgt.dump();

                  std::vector <cbl_perform_vary_t> varys(p->varys.size());
                  std::copy( p->varys.begin(), p->varys.end(), varys.begin() );

                  parser_perform_until( &p->tgt, p->before, varys.size(), varys.data() );
                }
#line 24808 "parse.cc"
    break;

  case 1053: /* perform_names: label_1  */
#line 7246 "parse.y"
                {
                  perform_tgt_set((yyvsp[0].label));
                }
#line 24816 "parse.cc"
    break;

  case 1054: /* perform_names: label_1 THRU label_1  */
#line 7250 "parse.y"
                {
                  perform_tgt_set((yyvsp[-2].label), (yyvsp[0].label));
                }
#line 24824 "parse.cc"
    break;

  case 1055: /* perform_times: num_operand TIMES  */
#line 7256 "parse.y"
                {
                  (yyval.refer) = (yyvsp[-1].refer);
                }
#line 24832 "parse.cc"
    break;

  case 1056: /* perform_vary: test_before varying vary_afters  */
#line 7262 "parse.y"
                {
                  perform_current()->before = (yyvsp[-2].number) == BEFORE;
                }
#line 24840 "parse.cc"
    break;

  case 1058: /* perform_vary: test_before varying  */
#line 7267 "parse.y"
                {
                  perform_current()->before = (yyvsp[-1].number) == BEFORE;
                }
#line 24848 "parse.cc"
    break;

  case 1060: /* perform_verb: PERFORM  */
#line 7273 "parse.y"
                        {
                  statement_begin((yylsp[0]), PERFORM);
                  (yyval.perf) = perform_alloc();
                }
#line 24857 "parse.cc"
    break;

  case 1061: /* perform_until: test_before perform_cond  */
#line 7280 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  struct cbl_perform_vary_t vary;

                  p->before = (yyvsp[-1].number) == BEFORE;
                  vary.until = (yyvsp[0].field);
                  p->varys.push_back(vary);
                }
#line 24870 "parse.cc"
    break;

  case 1062: /* perform_until: perform_cond  */
#line 7289 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  struct cbl_perform_vary_t vary;

                  vary.until = (yyvsp[0].field);
                  p->varys.push_back(vary);
                }
#line 24882 "parse.cc"
    break;

  case 1063: /* $@22: %empty  */
#line 7297 "parse.y"
                      { parser_perform_conditional( &perform_current()->tgt); }
#line 24888 "parse.cc"
    break;

  case 1064: /* perform_cond: UNTIL $@22 bool_expr  */
#line 7299 "parse.y"
                {
                  parser_perform_conditional_end( &perform_current()->tgt);
		  if( !is_conditional((yyvsp[0].refer)) ) {
		    error_msg((yylsp[-2]), "%s is not a condition expression",
		             name_of((yyvsp[0].refer)->field));
		    YYERROR;
		  }
                  (yyval.field) = (yyvsp[0].refer)->cond();
                }
#line 24902 "parse.cc"
    break;

  case 1065: /* perform_inline: perform_start statements "END-PERFORM"  */
#line 7311 "parse.y"
                {
		  location_set((yylsp[0]));
		  (yyval.perf) = perform_current();
		  if( (yyvsp[-2].number) == LOCATION ) {
		    error_msg((yylsp[-2]), "LOCATION not valid with PERFORM Format 2");
		  }
                }
#line 24914 "parse.cc"
    break;

  case 1066: /* perform_inline: perform_start "END-PERFORM"  */
#line 7319 "parse.y"
                {
		  location_set((yylsp[0]));
		  (yyval.perf) = perform_current();
		  if( (yyvsp[-1].number) == LOCATION ) {
		    error_msg((yylsp[-1]), "LOCATION not valid with PERFORM Format 2");
		  }
                }
#line 24926 "parse.cc"
    break;

  case 1067: /* perform_start: %empty  */
#line 7327 "parse.y"
                                      {
		  perform_ec_setup();
		  (yyval.number) = 0;
		}
#line 24935 "parse.cc"
    break;

  case 1068: /* perform_start: with LOCATION  */
#line 7331 "parse.y"
                              {
		  perform_ec_setup();
		  (yyval.number) = LOCATION;
		}
#line 24944 "parse.cc"
    break;

  case 1069: /* $@23: %empty  */
#line 7339 "parse.y"
                {
		  auto perf = perform_current();
                  parser_perform_inline_times(&perf->tgt, literally_one);
		}
#line 24953 "parse.cc"
    break;

  case 1070: /* $@24: %empty  */
#line 7346 "parse.y"
                {
		  auto perf = perform_current();
		  parser_label_goto(perf->ec_labels.finally);
		}
#line 24962 "parse.cc"
    break;

  case 1071: /* perform_except: perform_start statements $@23 perform_when perform_ec_other perform_ec_common $@24 perform_ec_finally "END-PERFORM"  */
#line 7352 "parse.y"
                {
		  auto perf = perform_current();
		  // produce blob, jumped over by FINALLY paragraph
		  size_t iblob = symbol_declaratives_add( PROGRAM, perf->dcls );
		  auto lave = perf->ec_labels.new_label(LblParagraph, "lave");
		  auto handlers = cbl_field_of(symbol_at(iblob));

		  // install blob
		  parser_label_label(perf->ec_labels.init);
		  declarative_runtime_match(handlers, lave);

		  // uninstall blob
		  parser_label_label(perf->ec_labels.fini);
                }
#line 24981 "parse.cc"
    break;

  case 1074: /* $@25: %empty  */
#line 7371 "parse.y"
                                {
		// accumulate handlers and their paragraphs
		  auto perf = perform_current();
		  auto when = perf->ec_labels.new_label(LblParagraph, "when");
		  for( auto& dcl : (yyvsp[0].dcl_list_t)->elems ) {
		    // use section to hold paragraph
		    dcl->section = symbol_index(symbol_elem_of(when));
		  }
		  std::transform( (yyvsp[0].dcl_list_t)->elems.begin(),
				  (yyvsp[0].dcl_list_t)->elems.end(),
				  std::back_inserter(perf->dcls),
				  []( cbl_declarative_t *p ) {
				    return *p;
				  } );
		  ast_enter_paragraph(when);
		}
#line 25002 "parse.cc"
    break;

  case 1075: /* perform_when1: WHEN perform_ec $@25 statements  */
#line 7387 "parse.y"
                           {
		  parser_exit_paragraph();
		}
#line 25010 "parse.cc"
    break;

  case 1076: /* perform_ec: EXCEPTION filenames  */
#line 7392 "parse.y"
                                    {
		  auto dcls = new declarative_list_t;
		  auto p = (yyvsp[0].files)->files.begin();
		  auto pend = p;
		  while( pend != (yyvsp[0].files)->files.end() ) {
		    for( size_t i=0; i < COUNT_OF(cbl_declarative_t::files); i++ ) {
		      if( ++pend == (yyvsp[0].files)->files.end() ) break;
		    }
		    std::list<size_t> files;
		    std::transform( p, pend, std::back_inserter(files),
		                  []( const cbl_file_t* f ) {
		                      return symbol_index(symbol_elem_of(f)); } );

		    auto dcl = new cbl_declarative_t(0, ec_io_e, files, file_mode_none_e);
		    dcls->elems.push_back(dcl);
		  }
		  (yyval.dcl_list_t) = dcls;
		}
#line 25033 "parse.cc"
    break;

  case 1077: /* perform_ec: EXCEPTION io_mode  */
#line 7410 "parse.y"
                                  {
		  auto dcl = new cbl_declarative_t((yyvsp[0].io_mode));
		  (yyval.dcl_list_t) = new declarative_list_t(dcl);
		}
#line 25042 "parse.cc"
    break;

  case 1078: /* perform_ec: except_names  */
#line 7414 "parse.y"
                             {
		  auto dcls = new declarative_list_t;
		  const ec_list_t * ecs((yyvsp[0].ec_list));
		  // one cbl_declarative_t per EC
		  std::transform( ecs->elems.begin(), ecs->elems.end(),
				  std::back_inserter(dcls->elems),
				  []( ec_type_t ec )
				  {
				    return new cbl_declarative_t(ec);
				  } );
		  (yyval.dcl_list_t) = dcls;
		}
#line 25059 "parse.cc"
    break;

  case 1079: /* perform_ec: except_files  */
#line 7426 "parse.y"
                             {
		  // one cbl_declarative_t per 16 files
		  auto dcls = new declarative_list_t;
		  for( auto p = (yyvsp[0].isym_list)->elems.begin();
		       p != (yyvsp[0].isym_list)->elems.end(); ) {
		    auto dcl = new cbl_declarative_t;
		    for( auto file = dcl->files;
			 file < dcl->files + COUNT_OF(dcl->files); file++ ) {
		      if( p != (yyvsp[0].isym_list)->elems.end() ) break;
		      *file = *p++;
		    }
		    dcls->elems.push_back(dcl);
		  }
		  (yyval.dcl_list_t) = dcls;
		}
#line 25079 "parse.cc"
    break;

  case 1080: /* except_names: except_name  */
#line 7443 "parse.y"
                            { (yyval.ec_list) = new ec_list_t((yyvsp[0].ec_type)); }
#line 25085 "parse.cc"
    break;

  case 1081: /* except_names: except_names except_name  */
#line 7444 "parse.y"
                                         {
		  (yyval.ec_list) = (yyvsp[-1].ec_list)->push_back((yyvsp[0].ec_type));
		}
#line 25093 "parse.cc"
    break;

  case 1082: /* except_name: "EXCEPTION NAME"  */
#line 7448 "parse.y"
                                   {
		  assert((yyvsp[0].ec_type) != ec_none_e);
		  (yyval.ec_type) = (yyvsp[0].ec_type);
		}
#line 25102 "parse.cc"
    break;

  case 1083: /* except_files: except_name "File" filenames  */
#line 7454 "parse.y"
                                                  {
		  assert((yyvsp[-2].ec_type) != ec_none_e);
		  if( ec_io_e != (ec_io_e & (yyvsp[-2].ec_type)) ) {
		    error_msg((yylsp[-2]), "%s is not of type EC-I-O",
			     ec_type_str((yyvsp[-2].ec_type)));
		  }
		  (yyval.isym_list) = new isym_list_t;
		  std::list<size_t>& files( (yyval.isym_list)->elems );
		  std::transform( (yyvsp[0].files)->files.begin(),
				  (yyvsp[0].files)->files.end(),
		                  std::back_inserter(files),
		                  []( const cbl_file_t* f ) {
		                      return symbol_index(symbol_elem_of(f)); } );
		}
#line 25121 "parse.cc"
    break;

  case 1084: /* perform_ec_other: %empty  */
#line 7471 "parse.y"
                                  {
		  auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.other);
		  parser_exit_paragraph();
		}
#line 25131 "parse.cc"
    break;

  case 1085: /* $@26: %empty  */
#line 7476 "parse.y"
                           {
		  auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.other);
		}
#line 25140 "parse.cc"
    break;

  case 1086: /* perform_ec_other: WHEN OTHER $@26 exception statements  */
#line 7480 "parse.y"
                                                {
		  parser_exit_paragraph();
		}
#line 25148 "parse.cc"
    break;

  case 1087: /* perform_ec_common: %empty  */
#line 7485 "parse.y"
                       {
		  auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.common);
		  parser_exit_paragraph();
		}
#line 25158 "parse.cc"
    break;

  case 1088: /* $@27: %empty  */
#line 7490 "parse.y"
                            {
		  auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.common);
		}
#line 25167 "parse.cc"
    break;

  case 1089: /* perform_ec_common: WHEN COMMON $@27 exception statements  */
#line 7494 "parse.y"
                                     {
		  parser_exit_paragraph();
		}
#line 25175 "parse.cc"
    break;

  case 1090: /* perform_ec_finally: %empty  */
#line 7499 "parse.y"
                       {
		  auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.finally);
		  parser_exit_paragraph();
		  parser_label_goto(ec_labels.fini);
		}
#line 25186 "parse.cc"
    break;

  case 1091: /* $@28: %empty  */
#line 7505 "parse.y"
                        {
		  auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.finally);
		}
#line 25195 "parse.cc"
    break;

  case 1092: /* perform_ec_finally: FINALLY $@28 exception statements  */
#line 7509 "parse.y"
                                     {
		  parser_exit_paragraph();
		  auto& ec_labels( perform_current()->ec_labels );
		  parser_label_goto(ec_labels.fini);
		}
#line 25205 "parse.cc"
    break;

  case 1093: /* test_before: with TEST BEFORE  */
#line 7516 "parse.y"
                                 { (yyval.number) = BEFORE; }
#line 25211 "parse.cc"
    break;

  case 1094: /* test_before: with TEST AFTER  */
#line 7517 "parse.y"
                                 { (yyval.number) = AFTER; }
#line 25217 "parse.cc"
    break;

  case 1095: /* varying: VARYING num_operand FROM num_operand vary_by perform_cond  */
#line 7522 "parse.y"
                {
                  struct cbl_perform_vary_t vary(*(yyvsp[-4].refer), *(yyvsp[-2].refer), *(yyvsp[-1].refer), (yyvsp[0].field));
                  perform_current()->varys.push_back(vary);
                }
#line 25226 "parse.cc"
    break;

  case 1098: /* vary_after: AFTER num_operand FROM num_operand vary_by perform_cond  */
#line 7533 "parse.y"
                {
                  struct cbl_perform_vary_t vary(*(yyvsp[-4].refer), *(yyvsp[-2].refer), *(yyvsp[-1].refer), (yyvsp[0].field));
                  perform_current()->varys.push_back(vary);
                }
#line 25235 "parse.cc"
    break;

  case 1099: /* vary_by: %empty  */
#line 7538 "parse.y"
                               { (yyval.refer) = new cbl_refer_t(literally_one); }
#line 25241 "parse.cc"
    break;

  case 1100: /* vary_by: BY num_operand  */
#line 7539 "parse.y"
                               { (yyval.refer) = (yyvsp[0].refer); }
#line 25247 "parse.cc"
    break;

  case 1102: /* reserved_value: ZERO  */
#line 7543 "parse.y"
                            { (yyval.number) = ZERO; }
#line 25253 "parse.cc"
    break;

  case 1103: /* reserved_value: NULLS  */
#line 7544 "parse.y"
                            { (yyval.number) = NULLS; }
#line 25259 "parse.cc"
    break;

  case 1104: /* spaces_etc: SPACES  */
#line 7546 "parse.y"
                            { (yyval.number) = SPACES; }
#line 25265 "parse.cc"
    break;

  case 1105: /* spaces_etc: "HIGH-VALUES"  */
#line 7547 "parse.y"
                            { (yyval.number) = HIGH_VALUES; }
#line 25271 "parse.cc"
    break;

  case 1106: /* spaces_etc: "LOW-VALUES"  */
#line 7548 "parse.y"
                            { (yyval.number) = LOW_VALUES; }
#line 25277 "parse.cc"
    break;

  case 1107: /* spaces_etc: "QUOTE"  */
#line 7549 "parse.y"
                            { (yyval.number) = QUOTES; }
#line 25283 "parse.cc"
    break;

  case 1108: /* variable_type: NUMERIC  */
#line 7552 "parse.y"
                                  { (yyval.number) = NUMERIC; }
#line 25289 "parse.cc"
    break;

  case 1109: /* variable_type: ALPHABETIC  */
#line 7553 "parse.y"
                                  { (yyval.number) = ALPHABETIC; }
#line 25295 "parse.cc"
    break;

  case 1110: /* variable_type: "ALPHABETIC-LOWER"  */
#line 7554 "parse.y"
                                  { (yyval.number) = ALPHABETIC_LOWER; }
#line 25301 "parse.cc"
    break;

  case 1111: /* variable_type: "ALPHABETIC-UPPER"  */
#line 7555 "parse.y"
                                  { (yyval.number) = ALPHABETIC_UPPER; }
#line 25307 "parse.cc"
    break;

  case 1112: /* variable_type: DBCS  */
#line 7556 "parse.y"
                                  { (yyval.number) = DBCS; }
#line 25313 "parse.cc"
    break;

  case 1113: /* variable_type: KANJI  */
#line 7557 "parse.y"
                                  { (yyval.number) = KANJI; }
#line 25319 "parse.cc"
    break;

  case 1114: /* subtract: subtract_impl end_subtract  */
#line 7560 "parse.y"
                                            { ast_subtract((yyvsp[-1].arith)); }
#line 25325 "parse.cc"
    break;

  case 1115: /* subtract: subtract_cond end_subtract  */
#line 7561 "parse.y"
                                            { ast_subtract((yyvsp[-1].arith)); }
#line 25331 "parse.cc"
    break;

  case 1116: /* subtract_impl: SUBTRACT subtract_body  */
#line 7564 "parse.y"
                {
                  statement_begin((yylsp[-1]), SUBTRACT);
                  (yyval.arith) = (yyvsp[0].arith);
                }
#line 25340 "parse.cc"
    break;

  case 1117: /* subtract_cond: SUBTRACT subtract_body arith_errs  */
#line 7570 "parse.y"
                {
                  statement_begin((yylsp[-2]), SUBTRACT);
                  (yyvsp[-1].arith)->on_error = (yyvsp[0].error).on_error;
                  (yyvsp[-1].arith)->not_error = (yyvsp[0].error).not_error;
                  (yyval.arith) = (yyvsp[-1].arith);
                }
#line 25351 "parse.cc"
    break;

  case 1120: /* subtract_body: sum FROM rnames  */
#line 7582 "parse.y"
                {
                  (yyval.arith) = new arith_t(no_giving_e, (yyvsp[-2].refers));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 25362 "parse.cc"
    break;

  case 1121: /* subtract_body: sum FROM num_operand GIVING rnames  */
#line 7589 "parse.y"
                {
                  (yyval.arith) = new arith_t(giving_e, (yyvsp[-4].refers));
                  (yyval.arith)->B.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 25374 "parse.cc"
    break;

  case 1122: /* subtract_body: CORRESPONDING sum FROM rnames  */
#line 7597 "parse.y"
                {
                  corresponding_fields_t pairs =
                    corresponding_arith_fields( (yyvsp[-2].refers)->refers.front().field,
                                                rhs.front().refer.field );
                    if( pairs.empty() ) {
                      yywarn( "%s and %s have no corresponding fields",
                               (yyvsp[-2].refers)->refers.front().field->name,
                               rhs.front().refer.field->name );
                    }
                  // First src/tgt elements are templates.
                  // Their subscripts apply to the correspondents.
                  (yyval.arith) = new arith_t(corresponding_e, (yyvsp[-2].refers));
                  (yyval.arith)->tgts.push_front(rhs.front());
                  // use arith_t functor to populate A and tgts
                  *(yyval.arith) = std::for_each( pairs.begin(), pairs.end(), *(yyval.arith) );
                  (yyval.arith)->A.pop_front();
                  (yyval.arith)->tgts.pop_front();
                  rhs.clear();
                }
#line 25398 "parse.cc"
    break;

  case 1123: /* vargs: varg  */
#line 7618 "parse.y"
                     { (yyval.vargs) = new vargs_t((yyvsp[0].refer)); }
#line 25404 "parse.cc"
    break;

  case 1124: /* vargs: vargs varg  */
#line 7619 "parse.y"
                                 { (yyvsp[-1].vargs)->push_back((yyvsp[0].refer)); (yyval.vargs) = (yyvsp[-1].vargs); }
#line 25410 "parse.cc"
    break;

  case 1126: /* varg: ALL varg1  */
#line 7623 "parse.y"
                          { (yyval.refer) = (yyvsp[0].refer); (yyval.refer)->all = true; }
#line 25416 "parse.cc"
    break;

  case 1129: /* varg1a: ADDRESS OF scalar  */
#line 7629 "parse.y"
                                  {
		  (yyval.refer) = (yyvsp[0].refer);
		  (yyval.refer)->addr_of = true;
		}
#line 25425 "parse.cc"
    break;

  case 1131: /* varg1a: literal  */
#line 7635 "parse.y"
                {
                  (yyval.refer) = new_reference((yyvsp[0].field));
                }
#line 25433 "parse.cc"
    break;

  case 1132: /* varg1a: reserved_value  */
#line 7639 "parse.y"
                {
                  (yyval.refer) = new_reference(constant_of(constant_index((yyvsp[0].number))));
                }
#line 25441 "parse.cc"
    break;

  case 1133: /* varg1a: "LENGTH-OF" name  */
#line 7642 "parse.y"
                                    {
                  location_set((yylsp[-1]));
                  (yyval.refer) = new cbl_refer_t( new_tempnumeric() );
		  (yyval.refer)->field->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-1]), "LENGTH OF", "ibm");
                  }
		  parser_set_numeric((yyval.refer)->field, (yyvsp[0].field)->size());
		}
#line 25455 "parse.cc"
    break;

  case 1134: /* varg1a: "LENGTH-OF" name subscripts  */
#line 7651 "parse.y"
                                                     {
                  location_set((yylsp[-2]));
                  (yyval.refer) = new cbl_refer_t( new_tempnumeric() );
		  (yyval.refer)->field->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-2]), "LENGTH OF", "ibm");
                  }
                  if( 0 == dimensions((yyvsp[-1].field)) ) {
		    cbl_refer_t r1((yyvsp[-1].field));
		    subscript_dimension_error( (yylsp[0]), (yyvsp[0].refers)->refers.size(), &r1 );
                  }
		  parser_set_numeric((yyval.refer)->field, (yyvsp[-1].field)->data.capacity);
                }
#line 25473 "parse.cc"
    break;

  case 1135: /* literal: literalism  */
#line 7667 "parse.y"
                {
                  (yyval.field) = (yyvsp[0].literal).isymbol()?
                    cbl_field_of(symbol_at((yyvsp[0].literal).isymbol()))
                    :
                    new_literal((yyvsp[0].literal), quoted_e);
                }
#line 25484 "parse.cc"
    break;

  case 1136: /* literal: "numeric literal"  */
#line 7674 "parse.y"
                {
                  (yyval.field) = new_literal((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix);
                }
#line 25492 "parse.cc"
    break;

  case 1137: /* literal: "datetime format"  */
#line 7678 "parse.y"
                {
                  (yyval.field) = new_literal(strlen((yyvsp[0].string)), (yyvsp[0].string), quoted_e);
                }
#line 25500 "parse.cc"
    break;

  case 1138: /* literal: "date format"  */
#line 7682 "parse.y"
                {
                  (yyval.field) = new_literal(strlen((yyvsp[0].string)), (yyvsp[0].string), quoted_e);
                }
#line 25508 "parse.cc"
    break;

  case 1139: /* literal: "time format"  */
#line 7686 "parse.y"
                {
                  (yyval.field) = new_literal(strlen((yyvsp[0].string)), (yyvsp[0].string), quoted_e);
                }
#line 25516 "parse.cc"
    break;

  case 1140: /* raise: RAISE EXCEPTION NAME  */
#line 7692 "parse.y"
                {
                  auto ec = ec_type_of((yyvsp[0].string));
                  if( ec == ec_none_e ) {
                    error_msg((yylsp[0]), "not an EXCEPTION CONDITION: %s", (yyvsp[0].string));
                    YYERROR;
                  }
                  statement_begin((yyloc), RAISE);
                  parser_exception_raise(ec);
                }
#line 25530 "parse.cc"
    break;

  case 1141: /* raise: RAISE NAME  */
#line 7702 "parse.y"
                {
                  auto ec = ec_type_of((yyvsp[0].string));
                  if( ec != ec_none_e ) {
                    error_msg((yylsp[0]), "RAISE EXCEPTION required for "
			    "EXCEPTION CONDITION: %s", (yyvsp[0].string));
                    YYERROR;
                  }
                  cbl_unimplemented("RAISE <EXCEPTION OBJECT>");
                  YYERROR;
                }
#line 25545 "parse.cc"
    break;

  case 1142: /* read: read_file  */
#line 7715 "parse.y"
                {
                  current.declaratives_evaluate((yyvsp[0].file_op).file, (yyvsp[0].file_op).handled);
                }
#line 25553 "parse.cc"
    break;

  case 1143: /* read_file: READ read_body  */
#line 7720 "parse.y"
                               {
                  file_read_args.call_parser_file_read();
                  (yyval.file_op).file = (yyvsp[0].file); (yyval.file_op).handled = FsSuccess;
                }
#line 25562 "parse.cc"
    break;

  case 1144: /* read_file: READ read_body "END-READ"  */
#line 7724 "parse.y"
                                        {
                  file_read_args.call_parser_file_read();
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = FsSuccess;
                }
#line 25571 "parse.cc"
    break;

  case 1145: /* read_file: READ read_body read_eofs  */
#line 7728 "parse.y"
                                              {
                  bool handled = (yyvsp[0].error_clauses).nclause == 2 || !(yyvsp[0].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                  if( (yyval.file_op).file->access == file_access_rnd_e ) {
                    // None of ADVANCING, AT END, NEXT, NOT AT END, or PREVIOUS
                    // shall be specified if ACCESS MODE RANDOM
                    error_msg((yylsp[0]), "%s: AT END invalid for ACCESS MODE RANDOM", (yyval.file_op).file->name);
                    YYERROR;
                  }
                  parser_fi();
                }
#line 25587 "parse.cc"
    break;

  case 1146: /* read_file: READ read_body read_eofs "END-READ"  */
#line 7739 "parse.y"
                                                       {
                  bool handled = (yyvsp[-1].error_clauses).nclause == 2 || !(yyvsp[-1].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-2].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                  if( (yyval.file_op).file->access == file_access_rnd_e ) {
                    error_msg((yylsp[-1]), "%s: AT END invalid for ACCESS MODE RANDOM", (yyval.file_op).file->name);
                    YYERROR;
                  }
                  parser_fi();
                }
#line 25601 "parse.cc"
    break;

  case 1147: /* read_file: READ read_body io_invalids  */
#line 7748 "parse.y"
                                                {
                  bool handled = (yyvsp[0].error_clauses).nclause == 2 || !(yyvsp[0].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = handled? FsNotFound : FsSuccess;
                  parser_fi();
                }
#line 25611 "parse.cc"
    break;

  case 1148: /* read_file: READ read_body io_invalids "END-READ"  */
#line 7753 "parse.y"
                                                         {
                  bool handled = (yyvsp[-1].error_clauses).nclause == 2 || !(yyvsp[-1].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-2].file); (yyval.file_op).handled = handled? FsNotFound : FsSuccess;
                  parser_fi();
                }
#line 25621 "parse.cc"
    break;

  case 1149: /* read_body: NAME read_next read_into read_key  */
#line 7761 "parse.y"
                {
                  statement_begin((yyloc), READ);
                  struct symbol_elem_t *e = symbol_file(PROGRAM, (yyvsp[-3].string));
                  if( !e ) {
                    error_msg((yylsp[-3]), "invalid file name '%s'", (yyvsp[-3].string));
                    YYERROR;
                  }

                  (yyval.file) = cbl_file_of(e);

                  struct cbl_field_t *record = symbol_file_record((yyval.file));
                  if( !record ) {
                    error_msg((yylsp[-3]), "syntax error? invalid file record name");
                    YYERROR;
                  }
                  if( 0 && (yyval.file)->access == file_access_dyn_e && (yyvsp[-2].number) >= 0 ) {
                    error_msg((yylsp[-3]), "sequential DYNAMIC access requires NEXT RECORD");
                    YYERROR;
                  }
                  if( (yyvsp[0].refer)->field && is_sequential((yyval.file)) ) {
                    error_msg((yylsp[-3]), "SEQUENTIAL file %s has no KEY", (yyval.file)->name);
                    YYERROR;
                  }
                  if( (yyval.file)->org == file_line_sequential_e && (yyvsp[-2].number) == -2 ) {
                    error_msg((yylsp[-3]), "LINE SEQUENTIAL file %s cannot READ PREVIOUS",
                             (yyval.file)->name);
                    YYERROR;
                  }
                  if( (yyvsp[0].refer)->field && (yyvsp[-2].number) < 0 ) {
                    error_msg((yylsp[-3]), "cannot read NEXT with KEY", (yyval.file)->name);
                    YYERROR;
                  }

                  int ikey = (yyvsp[-2].number);
                  if( (yyvsp[0].refer)->field ) {
                    ikey = (yyval.file)->key_one((yyvsp[0].refer)->field);
                  }

                  file_read_args.init( (yyval.file), record, (yyvsp[-1].refer), ikey );
                }
#line 25666 "parse.cc"
    break;

  case 1150: /* read_next: %empty  */
#line 7803 "parse.y"
                                { (yyval.number) =  0; }
#line 25672 "parse.cc"
    break;

  case 1151: /* read_next: PREVIOUS RECORD  */
#line 7804 "parse.y"
                                { (yyval.number) = -2; }
#line 25678 "parse.cc"
    break;

  case 1152: /* read_next: PREVIOUS  */
#line 7805 "parse.y"
                                { (yyval.number) = -2; }
#line 25684 "parse.cc"
    break;

  case 1153: /* read_next: NEXT RECORD  */
#line 7806 "parse.y"
                                { (yyval.number) = -1; }
#line 25690 "parse.cc"
    break;

  case 1154: /* read_next: NEXT  */
#line 7807 "parse.y"
                                { (yyval.number) = -1; }
#line 25696 "parse.cc"
    break;

  case 1155: /* read_next: RECORD  */
#line 7808 "parse.y"
                                { (yyval.number) =  0; }
#line 25702 "parse.cc"
    break;

  case 1156: /* read_into: %empty  */
#line 7811 "parse.y"
                            { (yyval.refer) = NULL; }
#line 25708 "parse.cc"
    break;

  case 1157: /* read_into: INTO scalar  */
#line 7812 "parse.y"
                            { (yyval.refer) = (yyvsp[0].refer); }
#line 25714 "parse.cc"
    break;

  case 1158: /* read_eofs: read_eof  */
#line 7821 "parse.y"
                          { (yyval.error_clauses).nclause = 1; (yyval.error_clauses).tf = (yyvsp[0].boolean); }
#line 25720 "parse.cc"
    break;

  case 1159: /* read_eofs: read_eofs read_eof  */
#line 7823 "parse.y"
                {
                  (yyval.error_clauses) = (yyvsp[-1].error_clauses);
                  if( ++(yyval.error_clauses).nclause > 2 ) {
                    error_msg((yylsp[0]), "too many AT END conditions");
                    YYERROR;
                  }
                  if( (yyval.error_clauses).tf == (yyvsp[0].boolean) ) {
                    error_msg((yylsp[0]), "duplicate AT END conditions");
                    YYERROR;
                  }
                  parser_fi();
                }
#line 25737 "parse.cc"
    break;

  case 1160: /* $@29: %empty  */
#line 7838 "parse.y"
                {
                  if( file_read_args.ready() ) {
                    file_read_args.default_march(true);
                    file_read_args.call_parser_file_read();
                  }

                  static const struct status_t { file_status_t L, U; }
                        at_end = { FsEofSeq, FsKeySeq },
                    not_at_end = { FsSuccess, FsEofSeq };
                  assert( (yyvsp[0].number) == END || (yyvsp[0].number) == NOT );
                  status_t st = (yyvsp[0].number) == END? at_end : not_at_end;
                  //  L <= ec < U
                  cbl_field_t *cond = ast_file_status_between(st.L, st.U);

                  parser_if(cond);
                  parser_exception_clear();
                }
#line 25759 "parse.cc"
    break;

  case 1161: /* read_eof: END $@29 statements  */
#line 7854 "parse.y"
                             {
                  parser_else();
                  (yyval.boolean) = (yyvsp[-2].number) == NOT;
                }
#line 25768 "parse.cc"
    break;

  case 1162: /* write_eops: write_eop  */
#line 7860 "parse.y"
                           { (yyval.error_clauses).nclause = 1; (yyval.error_clauses).tf = (yyvsp[0].boolean); }
#line 25774 "parse.cc"
    break;

  case 1163: /* write_eops: write_eops write_eop  */
#line 7862 "parse.y"
                {
                  (yyval.error_clauses) = (yyvsp[-1].error_clauses);
                  if( ++(yyval.error_clauses).nclause > 2 ) {
                    error_msg((yylsp[0]), "too many AT EOP conditions");
                    YYERROR;
                  }
                  if( (yyval.error_clauses).tf == (yyvsp[0].boolean) ) {
                    error_msg((yylsp[0]), "duplicate AT EOP conditions");
                    YYERROR;
                  }
                }
#line 25790 "parse.cc"
    break;

  case 1164: /* $@30: %empty  */
#line 7876 "parse.y"
                {
                  // cond represents the _FILE_STATUS of the last WRITE.
                  static cbl_field_t *cond = constant_of(constant_index(ZERO));

                  if( file_write_args.ready() ) {
                    file_write_args.call_parser_file_write(true);
                    cond = ast_file_status_between(FsEofSeq, FsKeySeq);
                  }
                  assert( (yyvsp[0].number) == EOP || (yyvsp[0].number) == NOT );
                  if( (yyvsp[0].number) == NOT ) {
                    parser_logop(cond, NULL, not_op, cond);
                  }
                  parser_if(cond);
                  parser_exception_clear();
                }
#line 25810 "parse.cc"
    break;

  case 1165: /* write_eop: EOP $@30 statements  */
#line 7890 "parse.y"
                             {
                  parser_else();
                  parser_fi();
                  (yyval.boolean) = (yyvsp[-2].number) == NOT;
                }
#line 25820 "parse.cc"
    break;

  case 1166: /* read_key: %empty  */
#line 7897 "parse.y"
                            { (yyval.refer) = new cbl_refer_t();  }
#line 25826 "parse.cc"
    break;

  case 1167: /* read_key: KEY is name  */
#line 7898 "parse.y"
                            { (yyval.refer) = new cbl_refer_t((yyvsp[0].field)); }
#line 25832 "parse.cc"
    break;

  case 1168: /* write: write_file  */
#line 7902 "parse.y"
                {
                  current.declaratives_evaluate( (yyvsp[0].file_op).file, (yyvsp[0].file_op).handled );
                }
#line 25840 "parse.cc"
    break;

  case 1169: /* write_file: WRITE write_body  */
#line 7908 "parse.y"
                {
                  (yyval.file_op).file = (yyvsp[0].file); (yyval.file_op).handled = FsSuccess;
                  bool sequentially = (yyval.file_op).file->access == file_access_seq_e;
                  file_write_args.call_parser_file_write(sequentially);
                }
#line 25850 "parse.cc"
    break;

  case 1170: /* write_file: WRITE write_body "END-WRITE"  */
#line 7914 "parse.y"
                {
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = FsSuccess;
                  bool sequentially = (yyval.file_op).file->access == file_access_seq_e;
                  file_write_args.call_parser_file_write(sequentially);
                }
#line 25860 "parse.cc"
    break;

  case 1171: /* write_file: WRITE write_body write_eops  */
#line 7919 "parse.y"
                                                 {
                  bool handled = (yyvsp[0].error_clauses).nclause == 2 || !(yyvsp[0].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                }
#line 25869 "parse.cc"
    break;

  case 1172: /* write_file: WRITE write_body write_eops "END-WRITE"  */
#line 7923 "parse.y"
                                                           {
                  bool handled = (yyvsp[-1].error_clauses).nclause == 2 || !(yyvsp[-1].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-2].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                }
#line 25878 "parse.cc"
    break;

  case 1173: /* write_file: WRITE write_body io_invalids  */
#line 7927 "parse.y"
                                                  {
                  bool handled = (yyvsp[0].error_clauses).nclause == 2 || !(yyvsp[0].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                  parser_fi();
                }
#line 25888 "parse.cc"
    break;

  case 1174: /* write_file: WRITE write_body io_invalids "END-WRITE"  */
#line 7932 "parse.y"
                                                            {
                  bool handled = (yyvsp[-1].error_clauses).nclause == 2 || !(yyvsp[-1].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-2].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                  parser_fi();
                }
#line 25898 "parse.cc"
    break;

  case 1175: /* write_body: write_what advance_when advancing  */
#line 7940 "parse.y"
                {
                  statement_begin((yyloc), WRITE);
                  cbl_file_t *file = symbol_record_file((yyvsp[-2].field));
                  if( !file ) {
                    error_msg((yylsp[-2]), "no FD record found for %s", (yyvsp[-2].field)->name);
                    YYERROR;
                  }
                  (yyval.file) = file_write_args.init( file, (yyvsp[-2].field), (yyvsp[-1].number)==AFTER, (yyvsp[0].refer) );
                  current.declaratives_evaluate( file );
                }
#line 25913 "parse.cc"
    break;

  case 1176: /* write_body: write_what  */
#line 7951 "parse.y"
                {
                  statement_begin((yyloc), WRITE);
                  cbl_file_t *file = symbol_record_file((yyvsp[0].field));
                  if( !file ) {
                    error_msg((yylsp[0]), "no FD record found for %s", (yyvsp[0].field)->name);
                    YYERROR;
                  }
		  cbl_refer_t lines;
                  switch(file->org) {
                  case file_sequential_e:
                    break;
                  case file_line_sequential_e:
                    lines.field = literally_one;
                    break;
                  case file_disorganized_e:
                  case file_indexed_e:
                  case file_relative_e:
                    break;
                  }
                  (yyval.file) = file_write_args.init( file, (yyvsp[0].field), false, &lines );
                }
#line 25939 "parse.cc"
    break;

  case 1177: /* write_what: file_record FROM alpha_val  */
#line 7974 "parse.y"
                {
                  (yyval.field) = (yyvsp[-2].field);
                  parser_move((yyval.field), *(yyvsp[0].refer));
                }
#line 25948 "parse.cc"
    break;

  case 1179: /* file_record: NAME  */
#line 7981 "parse.y"
                {
                  name_queue.qualify((yylsp[0]), (yyvsp[0].string));
		  auto namelocs( name_queue.pop() );
		  auto names( name_queue.namelist_of(namelocs) );
		  auto inner = namelocs.back();
                  if( ((yyval.field) = field_find(names)) == NULL ) {
                    error_msg(inner.loc, "no record name '%s'", inner.name);
                    YYERROR;
                  }
                }
#line 25963 "parse.cc"
    break;

  case 1180: /* file_record: NAME inof filename  */
#line 7992 "parse.y"
                {
                  std::list<const char *> names = {(yyvsp[0].file)->name, (yyvsp[-2].string)};
                  auto record = symbol_find(names);
                  if( !record ) {
                    error_msg((yyloc), "%s IN %s not found",
                             (yyvsp[-2].string), (yyvsp[0].file)->name);
                    YYERROR;
                  }
                  (yyval.field) = cbl_field_of(record);
                }
#line 25978 "parse.cc"
    break;

  case 1181: /* file_record: "File" filename  */
#line 8003 "parse.y"
                {
                  (yyval.field) = cbl_field_of(symbol_at((yyvsp[0].file)->default_record));
                }
#line 25986 "parse.cc"
    break;

  case 1182: /* advance_when: BEFORE  */
#line 8007 "parse.y"
                       { (yyval.number) = BEFORE; }
#line 25992 "parse.cc"
    break;

  case 1183: /* advance_when: AFTER  */
#line 8008 "parse.y"
                       { (yyval.number) = AFTER; }
#line 25998 "parse.cc"
    break;

  case 1185: /* advancing: ADVANCING advance_by  */
#line 8012 "parse.y"
                                     { (yyval.refer) = (yyvsp[0].refer); }
#line 26004 "parse.cc"
    break;

  case 1186: /* advance_by: scalar lines  */
#line 8014 "parse.y"
                             { (yyval.refer) = (yyvsp[-1].refer); }
#line 26010 "parse.cc"
    break;

  case 1187: /* advance_by: signed_literal lines  */
#line 8015 "parse.y"
                                     { (yyval.refer) = new_reference((yyvsp[-1].field)); }
#line 26016 "parse.cc"
    break;

  case 1188: /* advance_by: PAGE  */
#line 8017 "parse.y"
                {
                  /*
                   * The standard says behavior is undefined when the
                   * number of lines is negative.  So, we use the
                   * negative Number Of The Beast as a PAGE flag.
                   */
                  (yyval.refer) = new_reference( new_literal("-666") );
                }
#line 26029 "parse.cc"
    break;

  case 1189: /* advance_by: device_name  */
#line 8025 "parse.y"
                            { (yyval.refer) = new_reference(literally_one); }
#line 26035 "parse.cc"
    break;

  case 1190: /* io_invalids: io_invalid  */
#line 8028 "parse.y"
                           { (yyval.error_clauses).nclause = 1; (yyval.error_clauses).tf = (yyvsp[0].boolean); }
#line 26041 "parse.cc"
    break;

  case 1191: /* io_invalids: io_invalids io_invalid  */
#line 8030 "parse.y"
                {
                  (yyval.error_clauses) = (yyvsp[-1].error_clauses);
                  if( ++(yyval.error_clauses).nclause > 2 ) {
                    error_msg((yylsp[0]), "too many INVALID clauses");
                    YYERROR;
                  }
                  if( (yyval.error_clauses).tf == (yyvsp[0].boolean) ) {
                    error_msg((yylsp[0]), "duplicate INVALID conditions");
                    YYERROR;
                  }
                  parser_fi();
                }
#line 26058 "parse.cc"
    break;

  case 1192: /* $@31: %empty  */
#line 8044 "parse.y"
                            {
                  if( file_delete_args.ready() ) {
                    file_delete_args.call_parser_file_delete(false);
                  }
                  if( file_read_args.ready() ) {
                    file_read_args.default_march(false);
                    file_read_args.call_parser_file_read();
                  }
                  if( file_rewrite_args.ready() ) {
                    file_rewrite_args.call_parser_file_rewrite(false);
                  }
                  if( file_start_args.ready() ) {
                    file_start_args.call_parser_file_start();
                  }
                  if( file_write_args.ready() ) {
                    file_write_args.call_parser_file_write(false);
                  }

                  static const struct status_t { file_status_t L, U; }
                        invalid = { FsKeySeq, FsOsError },
                    not_invalid = { FsSuccess, FsEofSeq };
                  assert( (yyvsp[-1].number) == INVALID || (yyvsp[-1].number) == NOT );
                  status_t st = (yyvsp[-1].number) == INVALID? invalid : not_invalid;
                  //  L <= ec < U
                  cbl_field_t *cond = ast_file_status_between(st.L, st.U);

                  parser_if(cond);
                  parser_exception_clear();
                }
#line 26092 "parse.cc"
    break;

  case 1193: /* io_invalid: INVALID key $@31 statements  */
#line 8072 "parse.y"
                             {
                  parser_else();
                  (yyval.boolean) = (yyvsp[-3].number) == NOT;
                }
#line 26101 "parse.cc"
    break;

  case 1196: /* delete_impl: DELETE delete_body  */
#line 8082 "parse.y"
                {
                  file_delete_args.call_parser_file_delete(true);
                  current.declaratives_evaluate( (yyvsp[0].file) );
                }
#line 26110 "parse.cc"
    break;

  case 1197: /* delete_cond: DELETE delete_body io_invalids  */
#line 8088 "parse.y"
                {
                  if( is_sequential((yyvsp[-1].file)) ) {
                    error_msg((yylsp[-1]), "INVALID KEY phrase invalid for sequential file '%s'",
                             (yyvsp[-1].file)->name);
                    YYERROR;
                  }
                  if( (yyvsp[-1].file)->access == file_access_seq_e ) {
                    error_msg((yylsp[-1]), "INVALID KEY phrase invalid for "
                             "sequential access mode on '%s'",
                             (yyvsp[-1].file)->name);
                    YYERROR;
                  }
                  parser_fi();
                  // call happens in io_invalid
                  current.declaratives_evaluate( (yyvsp[-1].file) );
                }
#line 26131 "parse.cc"
    break;

  case 1198: /* delete_body: filename record  */
#line 8107 "parse.y"
                {
                  statement_begin((yylsp[-1]), DELETE);
                  file_delete_args.init( (yyvsp[-1].file) );
                  (yyval.file) = (yyvsp[-1].file);
                }
#line 26141 "parse.cc"
    break;

  case 1201: /* rewrite: rewrite1  */
#line 8118 "parse.y"
                {
                  current.declaratives_evaluate((yyvsp[0].file_op).file, (yyvsp[0].file_op).handled);
                }
#line 26149 "parse.cc"
    break;

  case 1202: /* rewrite1: REWRITE rewrite_body end_rewrite  */
#line 8123 "parse.y"
                                                 {
                  (yyval.file_op).file = (yyvsp[-1].rewrite_t).file; (yyval.file_op).handled = FsSuccess;
                  file_rewrite_args.call_parser_file_rewrite( true );
                }
#line 26158 "parse.cc"
    break;

  case 1203: /* rewrite1: REWRITE rewrite_body io_invalids end_rewrite  */
#line 8127 "parse.y"
                                                                  {
                  bool handled = (yyvsp[-1].error_clauses).nclause == 2 || !(yyvsp[-1].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-2].rewrite_t).file; (yyval.file_op).handled = handled? FsNotFound : FsSuccess;

                  if( is_sequential((yyval.file_op).file) ) {
                    error_msg((yylsp[-2]), "INVALID KEY for sequential file '%s'",
                             (yyval.file_op).file->name);
                    YYERROR;
                  }
                  if( (yyval.file_op).file->relative_sequential() ) {
                    error_msg((yylsp[-2]), "%s: INVALID KEY may not be specified for "
                             "RELATIVE file and SEQUENTIAL access",
                             (yyval.file_op).file->name);
                    YYERROR;
                  }
                  parser_fi();
                }
#line 26180 "parse.cc"
    break;

  case 1204: /* rewrite_body: write_what record  */
#line 8147 "parse.y"
                {
                  statement_begin((yyloc), REWRITE);
                  symbol_elem_t *e = symbol_file(PROGRAM, (yyvsp[-1].field)->name);
                  file_rewrite_args.init(cbl_file_of(e), (yyvsp[-1].field));
                  (yyval.rewrite_t).file = cbl_file_of(e);
                  (yyval.rewrite_t).buffer = (yyvsp[-1].field);
                }
#line 26192 "parse.cc"
    break;

  case 1210: /* start_cond: START start_body io_invalids  */
#line 8164 "parse.y"
                                             {
                  parser_fi();
                }
#line 26200 "parse.cc"
    break;

  case 1213: /* start_body: filename  */
#line 8173 "parse.y"
                {
                  statement_begin((yyloc), START);
                  file_start_args.init((yylsp[0]), (yyvsp[0].file));
                  parser_file_start( (yyvsp[0].file), lt_op, 0 );
                }
#line 26210 "parse.cc"
    break;

  case 1214: /* start_body: filename KEY relop name  */
#line 8179 "parse.y"
                { // lexer swallows IS, although relop allows it.
                  statement_begin((yyloc), START);
                  int key = (yyvsp[-3].file)->key_one((yyvsp[0].field));
                  int size = key == 0 ? 0 : (yyvsp[-3].file)->keys[key - 1].size();
                  auto ksize = new_tempnumeric();
                  parser_set_numeric(ksize, size);
                  if( yydebug ) {
                    yywarn("START: key #%d '%s' has size %d",
                          key, (yyvsp[0].field)->name, size);
                  }
                  file_start_args.init((yylsp[-3]), (yyvsp[-3].file));
                  parser_file_start( (yyvsp[-3].file), relop_of((yyvsp[-1].number)), key, ksize );
                }
#line 26228 "parse.cc"
    break;

  case 1215: /* start_body: filename KEY relop name with LENGTH expr  */
#line 8193 "parse.y"
                { // lexer swallows IS, although relop allows it.
                  statement_begin((yyloc), START);
                  int key = (yyvsp[-6].file)->key_one((yyvsp[-3].field));
                  file_start_args.init((yylsp[-6]), (yyvsp[-6].file));
                  parser_file_start( (yyvsp[-6].file), relop_of((yyvsp[-4].number)), key, *(yyvsp[0].refer) );
                }
#line 26239 "parse.cc"
    break;

  case 1216: /* start_body: filename FIRST  */
#line 8200 "parse.y"
                {
                  statement_begin((yyloc), START);
                  file_start_args.init((yylsp[-1]), (yyvsp[-1].file));
                  parser_file_start( (yyvsp[-1].file), lt_op, -1 );
                }
#line 26249 "parse.cc"
    break;

  case 1217: /* start_body: filename LAST  */
#line 8206 "parse.y"
                {
                  statement_begin((yyloc), START);
                  file_start_args.init((yylsp[-1]), (yyvsp[-1].file));
                  parser_file_start( (yyvsp[-1].file), gt_op, -2 );
                }
#line 26259 "parse.cc"
    break;

  case 1218: /* $@32: %empty  */
#line 8213 "parse.y"
                      { statement_begin((yylsp[0]), MERGE); }
#line 26265 "parse.cc"
    break;

  case 1219: /* merge: MERGE $@32 filename sort_keys sort_seq USING filenames sort_output  */
#line 8216 "parse.y"
                {
                  std::vector <cbl_key_t> keys((yyvsp[-4].sort_keys)->key_list.size());
		  std::copy( (yyvsp[-4].sort_keys)->key_list.begin(),
			     (yyvsp[-4].sort_keys)->key_list.end(), keys.begin() );

                  size_t ninput = (yyvsp[-1].files)->files.size();
                  size_t noutput = (yyvsp[0].sort_io)->nfile();
                  cbl_file_t **inputs = NULL, **outputs = NULL;
                  cbl_perform_tgt_t *out_proc = NULL;

                  inputs = new cbl_file_t * [ ninput ];
                  std::copy((yyvsp[-1].files)->files.begin(),
                            (yyvsp[-1].files)->files.end(), inputs);

                  if( noutput > 0 ) {
                    outputs = new cbl_file_t * [ noutput ];
                    std::copy((yyvsp[0].sort_io)->file_list.files.begin(),
                              (yyvsp[0].sort_io)->file_list.files.end(), outputs);
                  } else {
                    out_proc = &(yyvsp[0].sort_io)->tgt;
                  }

                  parser_file_merge( (yyvsp[-5].file), (yyvsp[-3].alphasym),
                                     keys.size(), keys.empty()? NULL : keys.data(),
                                     ninput, inputs,
                                     noutput, outputs,
                                     out_proc );
                }
#line 26298 "parse.cc"
    break;

  case 1220: /* set_tgts: set_tgt  */
#line 8246 "parse.y"
                        {
                  (yyval.targets) = new tgt_list_t;
                  list_add((yyval.targets)->targets, *(yyvsp[0].refer), current_rounded_mode());
                }
#line 26307 "parse.cc"
    break;

  case 1221: /* set_tgts: set_tgts set_tgt  */
#line 8251 "parse.y"
                {
                  list_add((yyvsp[-1].targets)->targets, *(yyvsp[0].refer), current_rounded_mode());
                }
#line 26315 "parse.cc"
    break;

  case 1223: /* set_operand: signed_literal  */
#line 8256 "parse.y"
                               { (yyval.refer) = new_reference((yyvsp[0].field)); }
#line 26321 "parse.cc"
    break;

  case 1224: /* set_operand: ADDRESS of FUNCTION ctx_name  */
#line 8258 "parse.y"
                {
                  (yyval.refer) = NULL;
                  auto e = symbol_function(0, (yyvsp[0].string));
                  if( e ) {
                    (yyval.refer) = new cbl_refer_t(cbl_label_of(e));
                  } else {
                    e = symbol_find((yylsp[0]), (yyvsp[0].string));
                    if( !e ) {
                      error_msg((yylsp[0]), "%s not found", (yyvsp[0].string));
                      YYERROR;
                    }
                    (yyval.refer) = new cbl_refer_t(cbl_field_of(e));
                  }
                  assert((yyval.refer));
                }
#line 26341 "parse.cc"
    break;

  case 1225: /* set_operand: ADDRESS of "Program" ctx_name  */
#line 8274 "parse.y"
                {
                  (yyval.refer) = NULL;
                  auto label = symbol_program(0, (yyvsp[0].string));
                  if( label ) {
                    (yyval.refer) = new cbl_refer_t(label);
                  } else {
                    auto e = symbol_find((yylsp[0]), (yyvsp[0].string));
                    if( !e ) {
                      error_msg((yylsp[0]), "%s not found", (yyvsp[0].string));
                      YYERROR;
                    }
                    (yyval.refer) = new cbl_refer_t(cbl_field_of(e));
                  }
                  assert((yyval.refer));
                }
#line 26361 "parse.cc"
    break;

  case 1226: /* set_operand: ADDRESS of "Program" LITERAL  */
#line 8290 "parse.y"
                {
                  auto label = symbol_program(0, (yyvsp[0].literal).data);
                  (yyval.refer) = new cbl_refer_t( label );
                }
#line 26370 "parse.cc"
    break;

  case 1228: /* set_tgt: ADDRESS of scalar  */
#line 8296 "parse.y"
                                  { (yyval.refer) = (yyvsp[0].refer); (yyval.refer)->addr_of = true; }
#line 26376 "parse.cc"
    break;

  case 1229: /* set: SET set_tgts TO set_operand  */
#line 8300 "parse.y"
                {
                  statement_begin((yylsp[-3]), SET);

                  switch( set_operand_type(*(yyvsp[0].refer)) ) {
                  case FldInvalid:
                    if( ! ((yyvsp[0].refer)->prog_func && (yyvsp[0].refer)->addr_of) ) {
                      error_msg((yylsp[0]), "SET source operand '%s' is invalid", (yyvsp[0].refer)->name());
                      YYERROR;
                      break;
                    }
                    __attribute__((fallthrough));
                  case FldPointer:
                    if( !valid_set_targets(*(yyvsp[-2].targets), true) ) {
                      YYERROR;
                    }
                    ast_set_pointers((yyvsp[-2].targets)->targets, *(yyvsp[0].refer));
                    break;

                  case FldIndex:
                  case FldPacked:
                  case FldNumericDisplay:
                  case FldNumericBinary:
                  case FldFloat:
                  case FldNumericBin5:
                  case FldLiteralN:
                    if( !valid_set_targets(*(yyvsp[-2].targets), (yyvsp[0].refer)->is_pointer()) ) {
                      YYERROR;
                    }
                    parser_index((yyvsp[-2].targets), *(yyvsp[0].refer));
                    break;
                  default:
                    if( strcmp((yyvsp[0].refer)->field->name, "ZEROS") != 0 ) {
                      error_msg((yylsp[0]), "%s must be numeric or POINTER type",
                              (yyvsp[0].refer)->field->name);
                      YYERROR;
                    }
                  }
                }
#line 26419 "parse.cc"
    break;

  case 1230: /* set: SET set_tgts TO NULLS  */
#line 8339 "parse.y"
                {
                  statement_begin((yylsp[-3]), SET);
                  if( !valid_set_targets(*(yyvsp[-2].targets), true) ) {
                    YYERROR;
                  }
                  ast_set_pointers((yyvsp[-2].targets)->targets, constant_of(constant_index(NULLS)));
                }
#line 26431 "parse.cc"
    break;

  case 1231: /* set: SET set_tgts TO spaces_etc  */
#line 8347 "parse.y"
                {
                  error_msg((yylsp[-2]), "invalid value for SET TO");
                }
#line 26439 "parse.cc"
    break;

  case 1232: /* set: SET set_tgts TO ENTRY scalar  */
#line 8351 "parse.y"
                {
                  ast_set_pointers((yyvsp[-3].targets)->targets, *(yyvsp[0].refer));
                }
#line 26447 "parse.cc"
    break;

  case 1233: /* set: SET set_tgts TO ENTRY LITERAL  */
#line 8355 "parse.y"
                {
                  auto literal = (yyvsp[0].literal).isymbol()?
                    cbl_field_of(symbol_at((yyvsp[0].literal).isymbol()))
                    :
                    new_literal((yyvsp[0].literal), quoted_e);
                  ast_set_pointers((yyvsp[-3].targets)->targets, literal);
                }
#line 26459 "parse.cc"
    break;

  case 1234: /* set: SET set_tgts UP BY num_operand  */
#line 8363 "parse.y"
                {
                  statement_begin((yylsp[-4]), SET);
                  list<cbl_num_result_t>& tgts = (yyvsp[-3].targets)->targets;

                  for( auto p = tgts.begin(); p != tgts.end(); p++ ) {
                    parser_add2( *p, *(yyvsp[0].refer) );
                  }
                  delete (yyvsp[-3].targets);
                }
#line 26473 "parse.cc"
    break;

  case 1235: /* set: SET set_tgts DOWN BY num_operand  */
#line 8373 "parse.y"
                {
                  statement_begin((yylsp[-4]), SET);
                  list<cbl_num_result_t>& tgts = (yyvsp[-3].targets)->targets;

                  for( auto p = tgts.begin(); p != tgts.end(); p++ ) {
                    parser_subtract2( *p, *(yyvsp[0].refer) );
                  }
                  delete (yyvsp[-3].targets);
                }
#line 26487 "parse.cc"
    break;

  case 1236: /* set: SET ENVIRONMENT envar TO alpha_val  */
#line 8383 "parse.y"
                {
                  statement_begin((yylsp[-4]), SET);
                  parser_set_envar(*(yyvsp[-2].refer), *(yyvsp[0].refer));
                }
#line 26496 "parse.cc"
    break;

  case 1237: /* set: SET LAST EXCEPTION TO OFF  */
#line 8388 "parse.y"
                {
                  statement_begin((yylsp[-4]), SET);
                  // send the signal to clear the stashed exception values
                  parser_exception_raise(ec_none_e);
                }
#line 26506 "parse.cc"
    break;

  case 1238: /* set: SET "LENGTH-OF" scalar TO scalar  */
#line 8394 "parse.y"
                {
                  statement_begin((yylsp[-4]), SET);
                  cbl_unimplemented("SET LENGTH OF");
                  YYERROR;
                }
#line 26516 "parse.cc"
    break;

  case 1239: /* set: SET scalar88s TO true_false  */
#line 8400 "parse.y"
                {
                  statement_begin((yylsp[-3]), SET);
                  class set_conditional {
                    bool tf;
                   public:
                    set_conditional( int token ) : tf(token == TRUE_kw) {}
                    void operator()(cbl_refer_t& refer) {
                      if( refer.field->data.false_value_of() == NULL && !tf ) {
			auto loc = symbol_field_location(field_index(refer.field));
                        error_msg(loc, "%s has no WHEN SET TO FALSE",
                                 refer.field->name);
                        return;
                      }
                      parser_set_conditional88(refer, tf);
                    }
                  };
                  std::for_each((yyvsp[-2].refers)->refers.begin(), (yyvsp[-2].refers)->refers.end(),
                                set_conditional((yyvsp[0].number)));
                }
#line 26540 "parse.cc"
    break;

  case 1240: /* $@33: %empty  */
#line 8419 "parse.y"
                    { statement_begin((yylsp[0]), SET); }
#line 26546 "parse.cc"
    break;

  case 1244: /* set_switches: switches TO on_off  */
#line 8427 "parse.y"
                {
                  struct switcheroo {
                    bitop_t op;
                    switcheroo( bool tf ) : op( tf? bit_set_op : bit_clear_op ) {}
                    switcheroo& operator()(cbl_field_t* sw) {
                      assert(sw->type == FldSwitch);
                      assert(sw->data.initial); // not a switch condition
                      parser_bitop(NULL, parent_of(sw),
                                   op, sw->data.upsi_mask_derive());
                      return *this;
                    }
                  };
                  std::for_each( (yyvsp[-2].fields)->fields.begin(), (yyvsp[-2].fields)->fields.end(),
                                 switcheroo((yyvsp[0].boolean)) );
                }
#line 26566 "parse.cc"
    break;

  case 1245: /* switches: one_switch  */
#line 8444 "parse.y"
                                        { (yyval.fields) = new field_list_t((yyvsp[0].field)); }
#line 26572 "parse.cc"
    break;

  case 1246: /* switches: switches one_switch  */
#line 8445 "parse.y"
                                        { (yyval.fields)->fields.push_back((yyvsp[0].field)); }
#line 26578 "parse.cc"
    break;

  case 1247: /* one_switch: SWITCH  */
#line 8447 "parse.y"
                       {
                  (yyval.field) = cbl_field_of(symbol_find((yylsp[0]), (yyvsp[0].string)));
                }
#line 26586 "parse.cc"
    break;

  case 1248: /* on_off: ON  */
#line 8452 "parse.y"
                    { (yyval.boolean) = true; }
#line 26592 "parse.cc"
    break;

  case 1249: /* on_off: OFF  */
#line 8453 "parse.y"
                    { (yyval.boolean) = false; }
#line 26598 "parse.cc"
    break;

  case 1252: /* search_linear: SEARCH search_1_place search_1_cases  */
#line 8461 "parse.y"
                {
                  parser_lsearch_end(search_current());
                  search_free();
                }
#line 26607 "parse.cc"
    break;

  case 1257: /* search_1_body: name search_varying  */
#line 8475 "parse.y"
                {
                  statement_begin((yyloc), SEARCH);
                  cbl_field_t *index = table_primary_index((yyvsp[-1].field));
                  if( !index ) {
                    error_msg((yylsp[-1]), "%s has no defined index", (yyvsp[-1].field)->name);
                    YYERROR;
                  }

                  cbl_name_t label_name;
		  auto len = snprintf(label_name, sizeof(label_name),
				     "linear_search_%d", yylineno);
		  if( ! (0 < len && len < int(sizeof(label_name))) ) {
		    gcc_unreachable();
		  }
                  cbl_label_t *name = label_add( LblSearch,
                                                 label_name, yylineno );
		  auto varying((yyvsp[0].field));
                  if( index == varying ) varying = NULL;
                  parser_lsearch_start( name, (yyvsp[-1].field), index, varying );
                  search_alloc(name);
                }
#line 26633 "parse.cc"
    break;

  case 1258: /* search_varying: %empty  */
#line 8498 "parse.y"
                               { (yyval.field) = NULL; }
#line 26639 "parse.cc"
    break;

  case 1259: /* search_varying: VARYING name  */
#line 8499 "parse.y"
                               { (yyval.field) = (yyvsp[0].field); }
#line 26645 "parse.cc"
    break;

  case 1260: /* search_1_cases: search_1_case  */
#line 8503 "parse.y"
                {
                  if( yydebug ) {
                    const char *lookahead = "?";
                    switch( yychar ) {
                    case 0:   lookahead = "YYEOF"; break;
                    case -2: lookahead = "YYEMPTY"; break;
                    default:
                      if( yychar > 0 ) {
                        lookahead = keyword_str(yychar);
                      }
                    }
                    yywarn("Just one case, lookahead is '%s'", lookahead);
                  }
                }
#line 26664 "parse.cc"
    break;

  case 1263: /* search_1_when: WHEN  */
#line 8521 "parse.y"
                     { parser_lsearch_conditional(search_current()); }
#line 26670 "parse.cc"
    break;

  case 1264: /* search_1_test: bool_expr  */
#line 8523 "parse.y"
                          {
                  parser_lsearch_when( search_current(), (yyvsp[0].refer)->cond() );
                }
#line 26678 "parse.cc"
    break;

  case 1265: /* search_binary: SEARCH ALL search_2_body search_2_cases  */
#line 8529 "parse.y"
                {
                  parser_bsearch_end(search_current());
                  search_free();
                }
#line 26687 "parse.cc"
    break;

  case 1266: /* search_binary: SEARCH ALL search_2_body at END statements search_2_cases  */
#line 8534 "parse.y"
                {
                  parser_bsearch_end(search_current());
                  search_free();
                }
#line 26696 "parse.cc"
    break;

  case 1267: /* search_2_body: name  */
#line 8541 "parse.y"
                {
                  statement_begin((yyloc), SEARCH);
                  char *label_name = xasprintf("binary_search_%d", yylineno);
                  cbl_label_t *name = label_add( LblSearch,
                                                 label_name, yylineno );
                  parser_bsearch_start( name, (yyvsp[0].field) );
                  search_alloc(name);
                }
#line 26709 "parse.cc"
    break;

  case 1270: /* $@34: %empty  */
#line 8554 "parse.y"
                     { parser_bsearch_conditional(search_current()); }
#line 26715 "parse.cc"
    break;

  case 1273: /* search_stmts: NEXT SENTENCE  */
#line 8559 "parse.y"
                                        {
                  next_sentence = label_add(LblNone, "next_sentence", 0);
                  parser_label_goto(next_sentence);
                }
#line 26724 "parse.cc"
    break;

  case 1276: /* search_term: scalar '=' search_expr  */
#line 8569 "parse.y"
                {
                  if( (yyvsp[-2].refer)->nsubscript == 0 ) {
                    error_msg((yylsp[-2]), "no index for key");
                    YYERROR;
                  }
                  if( dimensions((yyvsp[-2].refer)->field) < (yyvsp[-2].refer)->nsubscript ) {
                    error_msg((yylsp[-2]), "too many subscripts: "
                              "%zu for table of %zu dimensions",
                              (yyvsp[-2].refer)->nsubscript, dimensions((yyvsp[-2].refer)->field) );
                    YYERROR;
                  }

                  parser_bsearch_when(  search_current(),
                                        *(yyvsp[-2].refer),
                                        *(yyvsp[0].refer),
                                        is_ascending_key(*(yyvsp[-2].refer)) );
                }
#line 26746 "parse.cc"
    break;

  case 1277: /* search_term: scalar88  */
#line 8586 "parse.y"
                               {
                  cbl_field_t *key = field_at((yyvsp[0].refer)->field->parent);
                  parser_bsearch_when( search_current(), key, *(yyvsp[0].refer),
                                       is_ascending_key(key) );
                }
#line 26756 "parse.cc"
    break;

  case 1279: /* search_expr: LITERAL  */
#line 8593 "parse.y"
                        { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 26762 "parse.cc"
    break;

  case 1282: /* sort_table: SORT tableref sort_keys sort_dup sort_seq  */
#line 8600 "parse.y"
                                                                 {
                  statement_begin((yylsp[-4]), SORT);
                  std::vector <cbl_key_t> keys((yyvsp[-2].sort_keys)->key_list.size());
		  if( ! is_table((yyvsp[-3].refer)->field) ) {
		    error_msg((yylsp[-4]), "%s has no OCCURS clause", (yyvsp[-3].refer)->field->name);
		  }
                  // 23) If data-name-1 is omitted, the data item referenced by
                  // data-name-2 is the key data item.
		  int i = 0;
                  for( auto k : (yyvsp[-2].sort_keys)->key_list ) {
                    if( k.fields.empty() ) {
                      k.fields.push_back((yyvsp[-3].refer)->field);
                    }
                    keys.at(i++) = cbl_key_t(k);
                  }

                  parser_sort( *(yyvsp[-3].refer), (yyvsp[-1].boolean), (yyvsp[0].alphasym),
			       keys.size(), keys.empty()? NULL : keys.data() );
                }
#line 26786 "parse.cc"
    break;

  case 1283: /* sort_table: SORT tableref sort_dup sort_seq  */
#line 8619 "parse.y"
                                                       {
                  statement_begin((yylsp[-3]), SORT);
		  if( ! is_table((yyvsp[-2].refer)->field) ) {
		    error_msg((yylsp[-3]), "%s has no OCCURS clause", (yyvsp[-2].refer)->field->name);
		  }
                  cbl_key_t
                    key = cbl_key_t((yyvsp[-2].refer)->field->occurs.keys[0]),
                    guess(1, &(yyvsp[-2].refer)->field);
                  ;
                  if( key.nfield == 0 ) key = guess;
                  parser_sort( *(yyvsp[-2].refer), (yyvsp[-1].boolean), (yyvsp[0].alphasym), 1, &key );
                }
#line 26803 "parse.cc"
    break;

  case 1284: /* sort_file: SORT FILENAME sort_keys sort_dup sort_seq sort_input sort_output  */
#line 8635 "parse.y"
                {
                  statement_begin((yylsp[-6]), SORT);
                  struct symbol_elem_t *e = symbol_file(PROGRAM, (yyvsp[-5].string));
                  if( !(e && e->type == SymFile) ) {
                    error_msg((yylsp[-5]), "invalid file name");
                    YYERROR;
                  }
                  cbl_file_t *file = cbl_file_of(e);
                  std::vector <cbl_key_t> keys((yyvsp[-4].sort_keys)->key_list.size());
		  std::copy( (yyvsp[-4].sort_keys)->key_list.begin(),
			     (yyvsp[-4].sort_keys)->key_list.end(), keys.begin() );

                  size_t ninput = (yyvsp[-1].sort_io)->nfile();
                  size_t noutput = (yyvsp[0].sort_io)->nfile();
                  cbl_file_t **inputs = NULL, **outputs = NULL;
                  cbl_perform_tgt_t *in_proc = NULL, *out_proc = NULL;

                  if( ninput > 0 ) {
                    inputs = new cbl_file_t * [ ninput ];
                    std::copy((yyvsp[-1].sort_io)->file_list.files.begin(),
                              (yyvsp[-1].sort_io)->file_list.files.end(), inputs);
                  } else {
                    in_proc = &(yyvsp[-1].sort_io)->tgt;
                  }
                  if( noutput > 0 ) {
                    outputs = new cbl_file_t * [ noutput ];
                    std::copy((yyvsp[0].sort_io)->file_list.files.begin(),
                              (yyvsp[0].sort_io)->file_list.files.end(), outputs);
                  } else {
                    out_proc = &(yyvsp[0].sort_io)->tgt;
                  }

                  parser_file_sort( file,
                                    (yyvsp[-3].boolean),
                                    (yyvsp[-2].alphasym),
                                    keys.size(), keys.empty()? NULL : keys.data(),
                                    ninput, inputs,
                                    noutput, outputs,
                                    in_proc, out_proc );
                }
#line 26848 "parse.cc"
    break;

  case 1285: /* sort_file: SORT FILENAME sort_keys sort_dup sort_seq error  */
#line 8676 "parse.y"
                {
                  error_msg((yylsp[-4]), "SORT missing INPUT or OUTPUT phrase");
                }
#line 26856 "parse.cc"
    break;

  case 1286: /* sort_keys: sort_key  */
#line 8681 "parse.y"
                         {
                  (yyval.sort_keys) = new sort_keys_t();
                  (yyval.sort_keys)->key_list.push_back(*(yyvsp[0].sort_key));
                }
#line 26865 "parse.cc"
    break;

  case 1287: /* sort_keys: sort_keys sort_key  */
#line 8685 "parse.y"
                                   { (yyval.sort_keys)->key_list.push_back(*(yyvsp[0].sort_key)); }
#line 26871 "parse.cc"
    break;

  case 1288: /* sort_key: on forward_order key field_list  */
#line 8689 "parse.y"
                {
                  (yyval.sort_key) = new sort_key_t( (yyvsp[-2].boolean), *(yyvsp[0].fields) );
                }
#line 26879 "parse.cc"
    break;

  case 1289: /* sort_key: on forward_order key  */
#line 8693 "parse.y"
                {
                  field_list_t flist;
                  (yyval.sort_key) = new sort_key_t( (yyvsp[-1].boolean), flist );
                }
#line 26888 "parse.cc"
    break;

  case 1290: /* forward_order: ASCENDING  */
#line 8699 "parse.y"
                           { (yyval.boolean) = true; }
#line 26894 "parse.cc"
    break;

  case 1291: /* forward_order: DESCENDING  */
#line 8700 "parse.y"
                           { (yyval.boolean) = false; }
#line 26900 "parse.cc"
    break;

  case 1292: /* field_list: name  */
#line 8702 "parse.y"
                     { (yyval.fields) = new field_list_t((yyvsp[0].field)); }
#line 26906 "parse.cc"
    break;

  case 1293: /* field_list: field_list name  */
#line 8703 "parse.y"
                                { (yyvsp[-1].fields)->fields.push_back((yyvsp[0].field)); }
#line 26912 "parse.cc"
    break;

  case 1294: /* sort_dup: %empty  */
#line 8706 "parse.y"
                       { (yyval.boolean) = false; }
#line 26918 "parse.cc"
    break;

  case 1295: /* sort_dup: with DUPLICATES in order  */
#line 8707 "parse.y"
                                         { (yyval.boolean) = true; }
#line 26924 "parse.cc"
    break;

  case 1296: /* sort_seq: %empty  */
#line 8709 "parse.y"
                       { (yyval.alphasym) = NULL; }
#line 26930 "parse.cc"
    break;

  case 1297: /* sort_seq: collating SEQUENCE is ctx_name  */
#line 8711 "parse.y"
                {
                  symbol_elem_t *e = symbol_alphabet(PROGRAM, (yyvsp[0].string));
                  if( !e ) {
                    error_msg((yylsp[0]), "not an alphabet: '%s'", (yyvsp[0].string));
                    (yyval.alphasym) = NULL;
                  }
                  (yyval.alphasym) = cbl_alphabet_of(e);
                }
#line 26943 "parse.cc"
    break;

  case 1298: /* sort_input: USING filenames  */
#line 8722 "parse.y"
                {
                  (yyval.sort_io) = new file_sort_io_t(*(yyvsp[0].files));
                  delete (yyvsp[0].files);
                }
#line 26952 "parse.cc"
    break;

  case 1299: /* sort_input: INPUT PROCEDURE is sort_target  */
#line 8727 "parse.y"
                {
                  (yyval.sort_io) = new file_sort_io_t(*(yyvsp[0].tgt));
                  delete (yyvsp[0].tgt);
                }
#line 26961 "parse.cc"
    break;

  case 1300: /* sort_output: GIVING filenames  */
#line 8733 "parse.y"
                {
                  (yyval.sort_io) = new file_sort_io_t(*(yyvsp[0].files));
                }
#line 26969 "parse.cc"
    break;

  case 1301: /* sort_output: OUTPUT PROCEDURE is sort_target  */
#line 8737 "parse.y"
                {
                  (yyval.sort_io) = new file_sort_io_t(*(yyvsp[0].tgt));
                }
#line 26977 "parse.cc"
    break;

  case 1302: /* sort_target: label_name  */
#line 8743 "parse.y"
                {
                  (yyval.tgt) = new cbl_perform_tgt_t((yyvsp[0].label));
                }
#line 26985 "parse.cc"
    break;

  case 1303: /* sort_target: label_name THRU label_name  */
#line 8747 "parse.y"
                {
                  (yyval.tgt) = new cbl_perform_tgt_t((yyvsp[-2].label), (yyvsp[0].label));
                }
#line 26993 "parse.cc"
    break;

  case 1304: /* release: RELEASE NAME FROM scalar  */
#line 8753 "parse.y"
                {
                  statement_begin((yylsp[-3]), RELEASE);
                  symbol_elem_t *record = symbol_find((yylsp[-2]), (yyvsp[-2].string));
                  parser_move(cbl_field_of(record), *(yyvsp[0].refer));
                  parser_release(cbl_field_of(record));
                }
#line 27004 "parse.cc"
    break;

  case 1305: /* release: RELEASE NAME  */
#line 8760 "parse.y"
                {
                  statement_begin((yylsp[-1]), RELEASE);
                  symbol_elem_t *record = symbol_find((yylsp[0]), (yyvsp[0].string));
                  parser_release(cbl_field_of(record));
                }
#line 27014 "parse.cc"
    break;

  case 1308: /* return_impl: RETURN return_body  */
#line 8772 "parse.y"
                {
                  cbl_file_t *file = cbl_file_of(symbol_at(current_sort_file));
                  parser_return_finish(file);
                  current_sort_file = (yyvsp[0].number);
                }
#line 27024 "parse.cc"
    break;

  case 1309: /* return_cond: RETURN return_body return_outputs  */
#line 8780 "parse.y"
                {
                  cbl_file_t *file = cbl_file_of(symbol_at(current_sort_file));
                  parser_return_finish(file);
                  current_sort_file = (yyvsp[-1].number);
                }
#line 27034 "parse.cc"
    break;

  case 1312: /* return_body: return_file  */
#line 8791 "parse.y"
                {
                  file_return_args.call_parser_return_start();
                  }
#line 27042 "parse.cc"
    break;

  case 1313: /* return_body: return_file INTO scalar  */
#line 8795 "parse.y"
                {
                  file_return_args.call_parser_return_start(*(yyvsp[0].refer));
                }
#line 27050 "parse.cc"
    break;

  case 1314: /* return_file: filename  */
#line 8801 "parse.y"
                {
                  statement_begin((yyloc), RETURN);
                  (yyval.number) = current_sort_file; // preserve current sort file
                  current_sort_file = symbol_index(symbol_elem_of((yyvsp[0].file)));
                  file_return_args.init((yyvsp[0].file));
                }
#line 27061 "parse.cc"
    break;

  case 1315: /* return_file: filename RECORD  */
#line 8808 "parse.y"
                {
                  statement_begin((yyloc), RETURN);
                  (yyval.number) = current_sort_file; // preserve current sort file
                  current_sort_file = symbol_index(symbol_elem_of((yyvsp[-1].file)));
                  file_return_args.init((yyvsp[-1].file));
                }
#line 27072 "parse.cc"
    break;

  case 1319: /* output_atend: END  */
#line 8821 "parse.y"
                    {
                  assert((yyvsp[0].number) == END || (yyvsp[0].number) == NOT);
                  auto func = (yyvsp[0].number) == END?
                    parser_return_atend : parser_return_notatend ;
                  func(cbl_file_of(symbol_at(current_sort_file)));
                }
#line 27083 "parse.cc"
    break;

  case 1320: /* filenames: filename  */
#line 8828 "parse.y"
                         { (yyval.files) = new file_list_t((yyvsp[0].file)); }
#line 27089 "parse.cc"
    break;

  case 1321: /* filenames: filenames filename  */
#line 8829 "parse.y"
                                   { (yyvsp[-1].files)->files.push_back((yyvsp[0].file)); }
#line 27095 "parse.cc"
    break;

  case 1322: /* filename: NAME  */
#line 8832 "parse.y"
                {
                  struct symbol_elem_t *e = symbol_file(PROGRAM, (yyvsp[0].string));
                  if( !(e && e->type == SymFile) ) {
                    error_msg((yylsp[0]), "invalid file name");
                    YYERROR;
                  }
                  (yyval.file) = cbl_file_of(e);
                }
#line 27108 "parse.cc"
    break;

  case 1323: /* label_name: NAME  */
#line 8843 "parse.y"
                {
                  struct cbl_label_t *label = symbol_label(PROGRAM,
                                                           LblNone, 0, (yyvsp[0].string));
                  if( !label ) { // no line number for forward declaraion
                    label = label_add((yylsp[0]), LblNone, (yyvsp[0].string));
                  }
                  (yyval.label) = label;
                }
#line 27121 "parse.cc"
    break;

  case 1326: /* backward: %empty  */
#line 8856 "parse.y"
                         { (yyval.boolean) = false; }
#line 27127 "parse.cc"
    break;

  case 1327: /* backward: BACKWARD  */
#line 8857 "parse.y"
                         { (yyval.boolean) = true;  }
#line 27133 "parse.cc"
    break;

  case 1328: /* inspect: INSPECT backward inspected TALLYING tallies  */
#line 8860 "parse.y"
                {
                  statement_begin((yylsp[-4]), INSPECT);
                  ast_inspect( *(yyvsp[-2].refer), (yyvsp[-3].boolean), *(yyvsp[0].insp_all) );
                }
#line 27142 "parse.cc"
    break;

  case 1329: /* inspect: INSPECT backward inspected TALLYING tallies REPLACING replacements  */
#line 8865 "parse.y"
                {
                  if( is_constant((yyvsp[-4].refer)->field) ) {
                    auto name = nice_name_of((yyvsp[-4].refer)->field);
                    if( !name[0] ) name = "its argument";
                    error_msg((yylsp[-4]), "INSPECT cannot write to %s", name);
                    YYERROR;
                  }
                  statement_begin((yylsp[-6]), INSPECT);
                  // All tallying is done before any replacing
                  ast_inspect( *(yyvsp[-4].refer), (yyvsp[-5].boolean), *(yyvsp[-2].insp_all) );
                  ast_inspect( *(yyvsp[-4].refer), (yyvsp[-5].boolean), *(yyvsp[0].insp_all) );
                }
#line 27159 "parse.cc"
    break;

  case 1330: /* inspect: INSPECT backward inspected REPLACING replacements  */
#line 8878 "parse.y"
                {
                  if( is_constant((yyvsp[-2].refer)->field) ) {
                    auto name = nice_name_of((yyvsp[-2].refer)->field);
                    if( !name[0] ) name = "its argument";
                    error_msg((yylsp[-2]), "INSPECT cannot write to %s", name);
                    YYERROR;
                  }
                  statement_begin((yylsp[-4]), INSPECT);
                  ast_inspect( *(yyvsp[-2].refer), (yyvsp[-3].boolean), *(yyvsp[0].insp_all) );
                }
#line 27174 "parse.cc"
    break;

  case 1331: /* inspect: INSPECT backward inspected CONVERTING alpha_val TO all alpha_val insp_mtquals  */
#line 8891 "parse.y"
                {
		  if( (yyvsp[-2].boolean) ) {
		    (yyvsp[-1].refer)->all = true;
		    if( is_literal((yyvsp[-1].refer)->field) ) {
		      if( (yyvsp[-1].refer)->field->data.capacity != 1 ) {
			error_msg((yylsp[-2]), "ALL %s must be a single character",
				 (yyvsp[-1].refer)->field->data.initial);
			YYERROR;
		      }
		    } else {
		      error_msg((yylsp[-2]), "ALL must be part of a figurative constant");
		      YYERROR;
		    }
		  }
                  if( is_constant((yyvsp[-6].refer)->field) ) {
                    auto name = nice_name_of((yyvsp[-6].refer)->field);
                    if( !name[0] ) name = "its argument";
                    error_msg((yylsp[-6]), "INSPECT cannot write to %s", name);
                    YYERROR;
                  }
                  statement_begin((yylsp[-8]), INSPECT);
                  // IBM Format 4 does not show the qualifiers as optional, but
                  // they don't appear in Listing-15-1.
                  parser_inspect_conv( *(yyvsp[-6].refer), (yyvsp[-7].boolean),
                                       *(yyvsp[-4].refer),
                                       *(yyvsp[-1].refer),
                                       (yyvsp[0].insp_match)->before, (yyvsp[0].insp_match)->after );
                }
#line 27207 "parse.cc"
    break;

  case 1332: /* $@35: %empty  */
#line 8921 "parse.y"
                { need_nume_set(); }
#line 27213 "parse.cc"
    break;

  case 1333: /* tallies: $@35 tally  */
#line 8922 "parse.y"
                {
                  (yyval.insp_all) = new ast_inspect_list_t( *(yyvsp[0].inspect) );
                }
#line 27221 "parse.cc"
    break;

  case 1334: /* $@36: %empty  */
#line 8925 "parse.y"
                        { need_nume_set(); }
#line 27227 "parse.cc"
    break;

  case 1335: /* tallies: tallies $@36 tally  */
#line 8926 "parse.y"
                {
                  (yyval.insp_all) = (yyvsp[-2].insp_all);
                  cbl_inspect_t& next(*(yyvsp[0].inspect));

                  if( !next.tally.field ) {
                    // prior tally swallowed one too many
                    cbl_inspect_t& prior = (yyval.insp_all)->back();
                    assert(prior.nbound > 0);
                    assert(prior.opers);
                    cbl_inspect_oper_t& prior_op = prior.opers[prior.nbound - 1];

                    assert(prior_op.n_identifier_3 > 0 );
                    next.tally = prior_op.matches[--prior_op.n_identifier_3].matching;
                  }
                  if( !next.tally.field ) {
                    error_msg((yyloc), "missing summation field before FOR");
                    YYERROR;
                  }
                  (yyval.insp_all)->push_back(next);
                }
#line 27252 "parse.cc"
    break;

  case 1336: /* tally: numeref FOR tally_fors  */
#line 8956 "parse.y"
                { // reduce ast_inspect_t to cbl_inspect_t
                  if( yydebug && !(yyvsp[-2].refer) ) {
                    error_msg((yylsp[-1]), "caution: missing summation field before FOR");
                  }
                  cbl_refer_t total( (yyvsp[-2].refer)? *(yyvsp[-2].refer) : cbl_refer_t() );
                  (yyval.inspect) = new cbl_inspect_t( total, (yyvsp[0].insp_one)->opers() );
                }
#line 27264 "parse.cc"
    break;

  case 1337: /* tally_fors: tally_forth  */
#line 8966 "parse.y"
                { // reduce ast_inspect_oper_t to cbl_inspect_oper_t
                  cbl_inspect_oper_t oper( (yyvsp[0].insp_oper)->bound, (yyvsp[0].insp_oper)->matches );
                  (yyval.insp_one) = new ast_inspect_t;
                  (yyval.insp_one) ->push_back(oper);
                }
#line 27274 "parse.cc"
    break;

  case 1338: /* tally_fors: tally_fors tally_forth  */
#line 8972 "parse.y"
                {
                  cbl_inspect_oper_t oper( (yyvsp[0].insp_oper)->bound, (yyvsp[0].insp_oper)->matches );
                  (yyvsp[-1].insp_one) ->push_back(oper);
                }
#line 27283 "parse.cc"
    break;

  case 1339: /* tally_forth: CHARACTERS insp_mtquals scalar  */
#line 8979 "parse.y"
                {
                  // Add ensuing scalar as if it were an argument to CHARACTERS.
                  // It will be moved to the succeeding FOR as its tally.
                  (yyvsp[-1].insp_match)->matching = *(yyvsp[0].refer);
                  (yyval.insp_oper) = new ast_inspect_oper_t(*(yyvsp[-1].insp_match));
                }
#line 27294 "parse.cc"
    break;

  case 1340: /* tally_forth: CHARACTERS insp_mtquals  */
#line 8986 "parse.y"
                {
                  (yyval.insp_oper) = new ast_inspect_oper_t(*(yyvsp[0].insp_match));
                }
#line 27302 "parse.cc"
    break;

  case 1341: /* tally_forth: ALL tally_matches  */
#line 8990 "parse.y"
                { (yyvsp[0].insp_oper)->bound = bound_all_e;
                  (yyval.insp_oper) = (yyvsp[0].insp_oper);
                }
#line 27310 "parse.cc"
    break;

  case 1342: /* tally_forth: LEADING tally_matches  */
#line 8994 "parse.y"
                { (yyvsp[0].insp_oper)->bound = bound_leading_e;
                  (yyval.insp_oper) = (yyvsp[0].insp_oper);
                }
#line 27318 "parse.cc"
    break;

  case 1343: /* tally_forth: TRAILING tally_matches  */
#line 8998 "parse.y"
                { (yyvsp[0].insp_oper)->bound = bound_trailing_e;
                  (yyval.insp_oper) = (yyvsp[0].insp_oper);
		  if( ! dialect_mf() ) {
		    dialect_error((yylsp[-1]), "TRAILING", "mf");
		  }
                }
#line 27329 "parse.cc"
    break;

  case 1344: /* tally_matches: tally_match  */
#line 9006 "parse.y"
                            { (yyval.insp_oper) = new ast_inspect_oper_t(*(yyvsp[0].insp_match)); }
#line 27335 "parse.cc"
    break;

  case 1345: /* tally_matches: tally_matches tally_match  */
#line 9008 "parse.y"
                { // add to the list of matches for an operand
                  (yyvsp[-1].insp_oper)->matches.push_back(*(yyvsp[0].insp_match));
                }
#line 27343 "parse.cc"
    break;

  case 1346: /* tally_match: alpha_val insp_mtquals  */
#line 9013 "parse.y"
                { // include the matching field with the qualifiers
                  (yyval.insp_match) = (yyvsp[0].insp_match);
                  (yyval.insp_match)->matching = *(yyvsp[-1].refer);
                }
#line 27352 "parse.cc"
    break;

  case 1347: /* numeref: %empty  */
#line 9019 "parse.y"
                       { (yyval.refer) = NULL; need_nume_set(false); }
#line 27358 "parse.cc"
    break;

  case 1348: /* numeref: nume subscripts  */
#line 9021 "parse.y"
                {
                  size_t n = (yyvsp[0].refers)->size();
                  auto offsets = new cbl_refer_t[n];
                  std::copy( (yyvsp[0].refers)->begin(), (yyvsp[0].refers)->end(), offsets );
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field), n, offsets);
                }
#line 27369 "parse.cc"
    break;

  case 1349: /* numeref: nume  */
#line 9027 "parse.y"
                     { (yyval.refer) = new cbl_refer_t((yyvsp[0].field)); }
#line 27375 "parse.cc"
    break;

  case 1350: /* nume: qnume  */
#line 9030 "parse.y"
                      {
                  (yyval.field) = NULL;
                  struct symbol_elem_t *e = NULL;
                  size_t index = 0;
		  auto names( name_queue.pop() );

                  for( ; !names.empty(); names.pop_front() ) {
		    auto nameloc = names.front();
                    if( (e = symbol_field(PROGRAM,
                                          index, nameloc.name)) == NULL ) {
                      error_msg(nameloc.loc, "DATA-ITEM '%s' not found", nameloc.name );
                      YYERROR;
                    }
                    (yyval.field) = cbl_field_of(e);
                    index = symbol_index(e);
                  }
                }
#line 27397 "parse.cc"
    break;

  case 1351: /* qnume: "Name"  */
#line 9049 "parse.y"
                                { name_queue.qualify((yylsp[0]), (yyvsp[0].string)); }
#line 27403 "parse.cc"
    break;

  case 1352: /* qnume: qnume inof "Name"  */
#line 9050 "parse.y"
                                { name_queue.qualify((yylsp[0]), (yyvsp[0].string)); }
#line 27409 "parse.cc"
    break;

  case 1353: /* replacements: replacement  */
#line 9054 "parse.y"
                {
                  cbl_inspect_t inspect( cbl_refer_t(), (yyvsp[0].insp_one)->opers() );
                  (yyval.insp_all) = new ast_inspect_list_t(inspect);
                }
#line 27418 "parse.cc"
    break;

  case 1354: /* replacement: replace_oper  */
#line 9060 "parse.y"
                {
                  (yyval.insp_one) = new ast_inspect_t;
                  (yyval.insp_one)->push_back( cbl_inspect_oper_t((yyvsp[0].insp_oper)->bound, (yyvsp[0].insp_oper)->replaces) );
                }
#line 27427 "parse.cc"
    break;

  case 1355: /* replacement: replacement replace_oper  */
#line 9065 "parse.y"
                {
                  (yyval.insp_one)->push_back( cbl_inspect_oper_t((yyvsp[0].insp_oper)->bound, (yyvsp[0].insp_oper)->replaces)  );
                }
#line 27435 "parse.cc"
    break;

  case 1356: /* replace_oper: CHARACTERS BY alpha_val insp_mtquals  */
#line 9070 "parse.y"
                {
                  (yyval.insp_oper) = new ast_inspect_oper_t( cbl_inspect_replace_t(NULL,
                                                                     *(yyvsp[-1].refer),
                                                                     (yyvsp[0].insp_match)->before,
                                                                     (yyvsp[0].insp_match)->after) );
                }
#line 27446 "parse.cc"
    break;

  case 1357: /* replace_oper: first_leading x_by_ys  */
#line 9077 "parse.y"
                {
                  (yyval.insp_oper) = (yyvsp[0].insp_oper);
                  (yyval.insp_oper)->bound = static_cast<cbl_inspect_bound_t>((yyvsp[-1].number));
                }
#line 27455 "parse.cc"
    break;

  case 1358: /* x_by_ys: x_by_y  */
#line 9084 "parse.y"
                {
                  (yyval.insp_oper) = new ast_inspect_oper_t(*(yyvsp[0].insp_replace));
                }
#line 27463 "parse.cc"
    break;

  case 1359: /* x_by_ys: x_by_ys x_by_y  */
#line 9088 "parse.y"
                {
                  (yyval.insp_oper)->replaces.push_back(*(yyvsp[0].insp_replace));
                }
#line 27471 "parse.cc"
    break;

  case 1360: /* x_by_y: alpha_val BY alpha_val insp_mtquals  */
#line 9093 "parse.y"
                {
                  (yyval.insp_replace) = new cbl_inspect_replace_t(*(yyvsp[-3].refer), *(yyvsp[-1].refer),
                                                   (yyvsp[0].insp_match)->before, (yyvsp[0].insp_match)->after);
                }
#line 27480 "parse.cc"
    break;

  case 1361: /* insp_mtquals: %empty  */
#line 9099 "parse.y"
                           { (yyval.insp_match) = new cbl_inspect_match_t; }
#line 27486 "parse.cc"
    break;

  case 1363: /* insp_quals: insp_qual  */
#line 9102 "parse.y"
                           {
                  (yyval.insp_match) = new cbl_inspect_match_t;
                  if( (yyvsp[0].insp_qual).before ) {
                    (yyval.insp_match)->before = *(yyvsp[0].insp_qual).qual;
                  } else {
                    (yyval.insp_match)->after = *(yyvsp[0].insp_qual).qual;
                  }
                }
#line 27499 "parse.cc"
    break;

  case 1364: /* insp_quals: insp_quals insp_qual  */
#line 9111 "parse.y"
                {
                  if( ((yyval.insp_match)->before.active() && (yyvsp[0].insp_qual).before) ||
                      ((yyval.insp_match)->after.active() && !(yyvsp[0].insp_qual).before) ) {
                    error_msg((yylsp[0]), "duplicate BEFORE/AFTER phrase");
                    YYERROR;
                  }
                  auto p = (yyvsp[0].insp_qual).before? &(yyval.insp_match)->before : &(yyval.insp_match)->after;
                  *p = *(yyvsp[0].insp_qual).qual;
                }
#line 27513 "parse.cc"
    break;

  case 1365: /* insp_qual: befter initial alpha_val  */
#line 9122 "parse.y"
                {
                  // NIST NC115A: INITIAL has no effect (GnuCOBOL & ISO say same).
                  bool initial = (yyvsp[-1].number) == INITIAL_kw;
                  (yyval.insp_qual).before = (yyvsp[-2].number) == BEFORE;
                  (yyval.insp_qual).qual = new cbl_inspect_qual_t(initial, *(yyvsp[0].refer));
                }
#line 27524 "parse.cc"
    break;

  case 1366: /* first_leading: FIRST  */
#line 9130 "parse.y"
                           { (yyval.number) = bound_first_e; }
#line 27530 "parse.cc"
    break;

  case 1367: /* first_leading: ALL  */
#line 9131 "parse.y"
                           { (yyval.number) = bound_all_e; }
#line 27536 "parse.cc"
    break;

  case 1368: /* first_leading: LEADING  */
#line 9132 "parse.y"
                           { (yyval.number) = bound_leading_e; }
#line 27542 "parse.cc"
    break;

  case 1369: /* first_leading: TRAILING  */
#line 9133 "parse.y"
                           { (yyval.number) = bound_trailing_e;
		  if( ! dialect_mf() ) {
		    dialect_error((yylsp[0]), "TRAILING", "mf");
		  }
		}
#line 27552 "parse.cc"
    break;

  case 1370: /* alphaval: LITERAL  */
#line 9140 "parse.y"
                        { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 27558 "parse.cc"
    break;

  case 1371: /* alphaval: reserved_value  */
#line 9142 "parse.y"
                {
                  (yyval.refer) = new_reference( constant_of(constant_index((yyvsp[0].number))) );
                }
#line 27566 "parse.cc"
    break;

  case 1373: /* befter: BEFORE  */
#line 9148 "parse.y"
                       { (yyval.number) = BEFORE; }
#line 27572 "parse.cc"
    break;

  case 1374: /* befter: AFTER  */
#line 9149 "parse.y"
                       { (yyval.number) = AFTER; }
#line 27578 "parse.cc"
    break;

  case 1375: /* initialize: INITIALIZE move_tgts  */
#line 9153 "parse.y"
                {
                  statement_begin((yylsp[-1]), INITIALIZE);
                  initialize_statement( (yyvsp[0].targets)->targets, false, data_category_none );
                }
#line 27587 "parse.cc"
    break;

  case 1376: /* initialize: INITIALIZE move_tgts with "FILLER"  */
#line 9158 "parse.y"
                {
                  statement_begin((yylsp[-3]), INITIALIZE);
                  initialize_statement( (yyvsp[-2].targets)->targets, true, data_category_none );
                }
#line 27596 "parse.cc"
    break;

  case 1377: /* initialize: INITIALIZE move_tgts init_clause  */
#line 9163 "parse.y"
                {
                  statement_begin((yylsp[-2]), INITIALIZE);
		  initialize_statement( (yyvsp[-1].targets)->targets, false, (yyvsp[0].init_stmt)->category,
                                        (yyvsp[0].init_stmt)->replacement);
                }
#line 27606 "parse.cc"
    break;

  case 1378: /* initialize: INITIALIZE move_tgts init_clause with "FILLER"  */
#line 9169 "parse.y"
                {
                  statement_begin((yylsp[-4]), INITIALIZE);
                  initialize_statement( (yyvsp[-3].targets)->targets, true, (yyvsp[-2].init_stmt)->category,
                                        (yyvsp[-2].init_stmt)->replacement);
                }
#line 27616 "parse.cc"
    break;

  case 1379: /* initialize: INITIALIZE move_tgts with "FILLER" init_clause  */
#line 9175 "parse.y"
                {
                  statement_begin((yylsp[-4]), INITIALIZE);
                  initialize_statement( (yyvsp[-3].targets)->targets, true, (yyvsp[0].init_stmt)->category,
                                        (yyvsp[0].init_stmt)->replacement );
                }
#line 27626 "parse.cc"
    break;

  case 1381: /* init_clause: init_categora  */
#line 9184 "parse.y"
                {
                  (yyval.init_stmt) = new init_statement_t(false);
                  (yyval.init_stmt)->category = (yyvsp[0].data_category);
                }
#line 27635 "parse.cc"
    break;

  case 1382: /* init_clause: init_categora to VALUE  */
#line 9189 "parse.y"
                {
                  (yyval.init_stmt) = new init_statement_t(true);
                  (yyval.init_stmt)->category = (yyvsp[-2].data_category);
                }
#line 27644 "parse.cc"
    break;

  case 1383: /* init_clause: init_categora to VALUE init_value  */
#line 9194 "parse.y"
                {
                  (yyval.init_stmt) = (yyvsp[0].init_stmt);
                  (yyval.init_stmt)->category = (yyvsp[-3].data_category);
                }
#line 27653 "parse.cc"
    break;

  case 1384: /* init_value: init_replace then to DEFAULT  */
#line 9201 "parse.y"
                {
                  (yyval.init_stmt) = new init_statement_t( *(yyvsp[-3].replacements));
                }
#line 27661 "parse.cc"
    break;

  case 1385: /* init_value: init_replace  */
#line 9205 "parse.y"
                {
                  (yyval.init_stmt) = new init_statement_t( *(yyvsp[0].replacements));
                }
#line 27669 "parse.cc"
    break;

  case 1386: /* init_value: then to DEFAULT  */
#line 9209 "parse.y"
                {
                  (yyval.init_stmt) = new init_statement_t( false );
                }
#line 27677 "parse.cc"
    break;

  case 1388: /* init_categora: ALL  */
#line 9215 "parse.y"
                    { (yyval.data_category) = data_category_all; }
#line 27683 "parse.cc"
    break;

  case 1389: /* init_category: ALPHABETIC  */
#line 9217 "parse.y"
                                    { (yyval.data_category) = data_alphabetic_e; }
#line 27689 "parse.cc"
    break;

  case 1390: /* init_category: ALPHANUMERIC  */
#line 9218 "parse.y"
                                    { (yyval.data_category) = data_alphanumeric_e; }
#line 27695 "parse.cc"
    break;

  case 1391: /* init_category: "ALPHANUMERIC-EDITED"  */
#line 9219 "parse.y"
                                    { (yyval.data_category) = data_alphanumeric_edited_e; }
#line 27701 "parse.cc"
    break;

  case 1392: /* init_category: DBCS  */
#line 9220 "parse.y"
                                    { (yyval.data_category) = data_dbcs_e; }
#line 27707 "parse.cc"
    break;

  case 1393: /* init_category: EGCS  */
#line 9221 "parse.y"
                                    { (yyval.data_category) = data_egcs_e; }
#line 27713 "parse.cc"
    break;

  case 1394: /* init_category: NATIONAL  */
#line 9222 "parse.y"
                                    { (yyval.data_category) = data_national_e; }
#line 27719 "parse.cc"
    break;

  case 1395: /* init_category: "NATIONAL-EDITED"  */
#line 9223 "parse.y"
                                    { (yyval.data_category) = data_national_edited_e; }
#line 27725 "parse.cc"
    break;

  case 1396: /* init_category: NUMERIC  */
#line 9224 "parse.y"
                                    { (yyval.data_category) = data_numeric_e; }
#line 27731 "parse.cc"
    break;

  case 1397: /* init_category: NUMERIC_EDITED  */
#line 9225 "parse.y"
                                    { (yyval.data_category) = data_numeric_edited_e; }
#line 27737 "parse.cc"
    break;

  case 1398: /* init_replace: then REPLACING init_bys  */
#line 9228 "parse.y"
                                        { (yyval.replacements) = (yyvsp[0].replacements); }
#line 27743 "parse.cc"
    break;

  case 1399: /* init_bys: init_by  */
#line 9231 "parse.y"
                {
                  (yyval.replacements) = new category_map_t;
                  category_map_t& replacements = *(yyval.replacements);
                  replacements[(yyvsp[0].replacement).category] = (yyvsp[0].replacement).replacement;
                }
#line 27753 "parse.cc"
    break;

  case 1400: /* init_bys: init_bys init_by  */
#line 9237 "parse.y"
                {
                  (yyval.replacements) = (yyvsp[-1].replacements);
                  category_map_t& replacements = *(yyval.replacements);
                  replacements[(yyvsp[0].replacement).category] = (yyvsp[0].replacement).replacement;
                }
#line 27763 "parse.cc"
    break;

  case 1401: /* init_by: init_category data BY init_data  */
#line 9244 "parse.y"
                {
                  (yyval.replacement).category = (yyvsp[-3].data_category);
                  (yyval.replacement).replacement = (yyvsp[0].refer);
                }
#line 27772 "parse.cc"
    break;

  case 1403: /* init_data: "numeric literal"  */
#line 9250 "parse.y"
                         {
                  (yyval.refer) = new_reference(new_literal((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix));
                }
#line 27780 "parse.cc"
    break;

  case 1406: /* call_impl: CALL call_body  */
#line 9260 "parse.y"
                {
                  ffi_args_t *params = (yyvsp[0].ffi_impl).using_params;
                  if( yydebug && params ) params->dump();
                  size_t narg = params? params->elems.size() : 0;
                  std::vector <cbl_ffi_arg_t> args(narg);
		  cbl_ffi_arg_t *pargs = NULL;
                  if( narg > 0 ) {
		    std::copy( params->elems.begin(),
			       params->elems.end(), args.begin() );	 
                    pargs = args.data();
                  }
                  ast_call( (yyvsp[0].ffi_impl).loc, *(yyvsp[0].ffi_impl).ffi_name,
                               *(yyvsp[0].ffi_impl).ffi_returning, narg, pargs, NULL, NULL, false );
                  current.declaratives_evaluate();
                }
#line 27800 "parse.cc"
    break;

  case 1407: /* call_cond: CALL call_body call_excepts  */
#line 9277 "parse.y"
                {
                  ffi_args_t *params = (yyvsp[-1].ffi_impl).using_params;
                  if( yydebug && params ) params->dump();
                  size_t narg = params? params->elems.size() : 0;
                  std::vector <cbl_ffi_arg_t> args(narg);
		  cbl_ffi_arg_t *pargs = NULL;
                  if( narg > 0 ) {
		    std::copy( params->elems.begin(),
			       params->elems.end(), args.begin() );	 
                    pargs = args.data();
                  }
                  ast_call( (yyvsp[-1].ffi_impl).loc, *(yyvsp[-1].ffi_impl).ffi_name,
                               *(yyvsp[-1].ffi_impl).ffi_returning, narg, pargs,
                               (yyvsp[0].error).on_error, (yyvsp[0].error).not_error, false );
                  auto handled = ec_type_t( static_cast<size_t>(ec_program_e) |
                                            static_cast<size_t>(ec_external_e));
                  current.declaratives_evaluate(handled);
                }
#line 27823 "parse.cc"
    break;

  case 1410: /* call_body: ffi_name  */
#line 9301 "parse.y"
                { statement_begin((yylsp[0]), CALL);
                  (yyval.ffi_impl).ffi_name = (yyvsp[0].refer);
                  (yyval.ffi_impl).using_params = NULL;
                  (yyval.ffi_impl).ffi_returning = cbl_refer_t::empty();
                }
#line 27833 "parse.cc"
    break;

  case 1411: /* call_body: ffi_name USING parameters  */
#line 9308 "parse.y"
                { statement_begin((yylsp[-2]), CALL);
                  (yyval.ffi_impl).ffi_name = (yyvsp[-2].refer);
                  (yyval.ffi_impl).using_params = (yyvsp[0].ffi_args);
                  (yyval.ffi_impl).ffi_returning = cbl_refer_t::empty();
                }
#line 27843 "parse.cc"
    break;

  case 1412: /* call_body: ffi_name call_returning scalar  */
#line 9314 "parse.y"
                { statement_begin((yylsp[-2]), CALL);
                  (yyval.ffi_impl).ffi_name = (yyvsp[-2].refer);
                  (yyval.ffi_impl).using_params = NULL;
                  (yyval.ffi_impl).ffi_returning = (yyvsp[0].refer);
                }
#line 27853 "parse.cc"
    break;

  case 1413: /* call_body: ffi_name USING parameters call_returning scalar  */
#line 9320 "parse.y"
                { statement_begin((yylsp[-4]), CALL);
                  (yyval.ffi_impl).ffi_name = (yyvsp[-4].refer);
                  (yyval.ffi_impl).using_params = (yyvsp[-2].ffi_args);
                  (yyval.ffi_impl).ffi_returning = (yyvsp[0].refer);
                }
#line 27863 "parse.cc"
    break;

  case 1415: /* call_returning: GIVING  */
#line 9327 "parse.y"
                       {
		  if( !dialect_mf() ) {
		    dialect_error((yylsp[0]), "CALL ... GIVING", "mf");
		  }
		}
#line 27873 "parse.cc"
    break;

  case 1416: /* entry: ENTRY LITERAL  */
#line 9335 "parse.y"
                { statement_begin((yylsp[-1]), ENTRY);
                  auto name = new_literal((yyvsp[0].literal), quoted_e);
                  parser_entry( name );
                }
#line 27882 "parse.cc"
    break;

  case 1417: /* entry: ENTRY LITERAL USING parameters  */
#line 9340 "parse.y"
                { statement_begin((yylsp[-3]), ENTRY);
                  auto name = new_literal((yyvsp[-2].literal), quoted_e);
                  ffi_args_t *params = (yyvsp[0].ffi_args);
                  size_t narg = params? params->elems.size() : 0;
		  cbl_ffi_arg_t *pargs = NULL;
                  std::vector <cbl_ffi_arg_t> args(narg);
                  if( narg > 0 ) {
		    std::copy( params->elems.begin(),
			       params->elems.end(), args.begin() );
                    pargs = args.data();
                  }
                  parser_entry( name, narg, pargs );
                }
#line 27900 "parse.cc"
    break;

  case 1418: /* ffi_name: scalar  */
#line 9356 "parse.y"
                {
                  (yyval.refer) = (yyvsp[0].refer);
                  if( ! is_callable((yyvsp[0].refer)->field) ) {
                    error_msg((yylsp[0]), "CALL requires %s to be "
                             "PROGRAM-POINTER or alphanumeric", (yyvsp[0].refer)->name());
                    YYERROR;
                  }
                  if( (yyvsp[0].refer)->field->type == FldLiteralA ) {
                    // Replace repository literal with aliased program's name.
                    assert((yyvsp[0].refer)->field->parent > 0);
                    auto& L = *cbl_label_of(symbol_at((yyvsp[0].refer)->field->parent));
                    (yyval.refer)->field = new_literal(strlen(L.name), L.name, quoted_e);
                  }
                }
#line 27919 "parse.cc"
    break;

  case 1419: /* ffi_name: LITERAL  */
#line 9370 "parse.y"
                        { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 27925 "parse.cc"
    break;

  case 1420: /* parameters: parameter  */
#line 9373 "parse.y"
                          { (yyval.ffi_args) = new ffi_args_t((yyvsp[0].ffi_arg)); }
#line 27931 "parse.cc"
    break;

  case 1421: /* parameters: parameters parameter  */
#line 9375 "parse.y"
                {
                  (yyvsp[-1].ffi_args)->push_back((yyvsp[0].ffi_arg));
                  (yyval.ffi_args) = (yyvsp[-1].ffi_args);
                }
#line 27940 "parse.cc"
    break;

  case 1422: /* parameter: ffi_by_ref  */
#line 9380 "parse.y"
                           { (yyval.ffi_arg) = (yyvsp[0].ffi_arg); (yyval.ffi_arg)->crv = by_default_e; }
#line 27946 "parse.cc"
    break;

  case 1423: /* parameter: by REFERENCE ffi_by_ref  */
#line 9381 "parse.y"
                                        { (yyval.ffi_arg) = (yyvsp[0].ffi_arg); }
#line 27952 "parse.cc"
    break;

  case 1424: /* parameter: by CONTENT ffi_by_con  */
#line 9382 "parse.y"
                                        { (yyval.ffi_arg) = (yyvsp[0].ffi_arg); }
#line 27958 "parse.cc"
    break;

  case 1425: /* parameter: by VALUE ffi_by_val  */
#line 9383 "parse.y"
                                        { (yyval.ffi_arg) = (yyvsp[0].ffi_arg); }
#line 27964 "parse.cc"
    break;

  case 1426: /* ffi_by_ref: scalar_arg  */
#line 9386 "parse.y"
                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_reference_e, (yyvsp[0].refer));
                }
#line 27972 "parse.cc"
    break;

  case 1427: /* ffi_by_ref: ADDRESS OF scalar_arg  */
#line 9390 "parse.y"
                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_reference_e, (yyvsp[0].refer), address_of_e);
                }
#line 27980 "parse.cc"
    break;

  case 1428: /* ffi_by_ref: OMITTED  */
#line 9394 "parse.y"
                {
                  cbl_refer_t *r = new cbl_refer_t();
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_reference_e, r);
                }
#line 27989 "parse.cc"
    break;

  case 1429: /* ffi_by_con: expr  */
#line 9401 "parse.y"
                {
                  cbl_refer_t *r = new cbl_refer_t(*(yyvsp[0].refer));
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_content_e, r);
                }
#line 27998 "parse.cc"
    break;

  case 1430: /* ffi_by_con: LITERAL  */
#line 9406 "parse.y"
                {
                  cbl_refer_t *r = new_reference(new_literal((yyvsp[0].literal), quoted_e));
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_content_e, r);
                }
#line 28007 "parse.cc"
    break;

  case 1431: /* ffi_by_con: OMITTED  */
#line 9411 "parse.y"
                {
                  cbl_refer_t *r = new cbl_refer_t();
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_content_e, r);
                }
#line 28016 "parse.cc"
    break;

  case 1432: /* ffi_by_val: by_value_arg  */
#line 9418 "parse.y"
                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_value_e, (yyvsp[0].refer));
                }
#line 28024 "parse.cc"
    break;

  case 1433: /* ffi_by_val: cce_expr  */
#line 9422 "parse.y"
                {
                  auto r = new_reference(new_literal(string_of((yyvsp[0].float128))));
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_value_e, r);
                }
#line 28033 "parse.cc"
    break;

  case 1434: /* ffi_by_val: ADDRESS OF scalar  */
#line 9427 "parse.y"
                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_value_e, (yyvsp[0].refer), address_of_e);
                }
#line 28041 "parse.cc"
    break;

  case 1435: /* ffi_by_val: "LENGTH-OF" scalar  */
#line 9431 "parse.y"
                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_value_e, (yyvsp[0].refer), length_of_e);
                }
#line 28049 "parse.cc"
    break;

  case 1438: /* call_excepts: call_excepts call_except statements  */
#line 9441 "parse.y"
                {
                  if( (yyvsp[-2].error).on_error && (yyvsp[-2].error).not_error ) {
                    error_msg((yylsp[-1]), "too many ON EXCEPTION clauses");
                    YYERROR;
                  }
                  // "ON" and "NOT ON" could be reversed, but not duplicated.
                  if( (yyvsp[-2].error).on_error && (yyvsp[-1].error).on_error ) {
                    error_msg((yylsp[-1]), "duplicate ON EXCEPTION clauses");
                    YYERROR;
                  }
                  if( (yyvsp[-2].error).not_error && (yyvsp[-1].error).not_error ) {
                    error_msg((yylsp[-1]), "duplicate NOT ON EXCEPTION clauses");
                    YYERROR;
                  }
                  (yyval.error) = (yyvsp[-2].error);
                  if( (yyvsp[-1].error).on_error ) {
                    (yyval.error).on_error = (yyvsp[-1].error).on_error;
                    assert((yyvsp[-2].error).not_error);
                  } else {
                    (yyval.error).not_error = (yyvsp[-1].error).not_error;
                    assert((yyvsp[-2].error).on_error);
                  }
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-2].error).on_error? (yyvsp[-2].error).on_error : (yyvsp[-2].error).not_error;
                  parser_call_exception_end(tgt);
                }
#line 28081 "parse.cc"
    break;

  case 1439: /* call_excepts: call_except statements  */
#line 9469 "parse.y"
                {
                  (yyval.error) = (yyvsp[-1].error);
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error? (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_call_exception_end(tgt);
                }
#line 28093 "parse.cc"
    break;

  case 1440: /* call_except: EXCEPTION  */
#line 9479 "parse.y"
                {
                  (yyval.error).not_error = NULL;
                  (yyval.error).on_error = label_add(LblArith,
                                          uniq_label("call"), yylineno);
                  if( !(yyval.error).on_error ) YYERROR;
                  parser_call_exception( (yyval.error).on_error );

                  assert( (yyvsp[0].number) == EXCEPTION || (yyvsp[0].number) == NOT );
                  if( (yyvsp[0].number) == NOT ) {
                    std::swap((yyval.error).on_error, (yyval.error).not_error);
                  }
                }
#line 28110 "parse.cc"
    break;

  case 1441: /* call_except: "OVERFLOW"  */
#line 9492 "parse.y"
                {
                  (yyval.error).not_error = NULL;
                  (yyval.error).on_error = label_add(LblArith,
                                          uniq_label("call"), yylineno);
                  if( !(yyval.error).on_error ) YYERROR;
                  parser_call_exception( (yyval.error).on_error );

                  assert( (yyvsp[0].number) == OVERFLOW_kw || (yyvsp[0].number) == NOT );
                  if( (yyvsp[0].number) == NOT ) {
                    std::swap((yyval.error).on_error, (yyval.error).not_error);
                  }
                }
#line 28127 "parse.cc"
    break;

  case 1442: /* cancel: CANCEL ffi_names  */
#line 9507 "parse.y"
                {
                  statement_begin((yylsp[-1]), CANCEL);
                  std::vector <cbl_refer_t> progs((yyvsp[0].refers)->refers.size());
		  std::copy( (yyvsp[0].refers)->refers.begin(),
			     (yyvsp[0].refers)->refers.end(), progs.begin() );
                  parser_initialize_programs( progs.size(), progs.empty()? NULL : progs.data() );
                }
#line 28139 "parse.cc"
    break;

  case 1443: /* ffi_names: ffi_name  */
#line 9515 "parse.y"
                                   { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 28145 "parse.cc"
    break;

  case 1444: /* ffi_names: ffi_names ffi_name  */
#line 9516 "parse.y"
                                   { (yyval.refers) = (yyvsp[-1].refers)->push_back((yyvsp[0].refer)); }
#line 28151 "parse.cc"
    break;

  case 1445: /* $@37: %empty  */
#line 9519 "parse.y"
                      { statement_begin((yylsp[0]), ALTER); }
#line 28157 "parse.cc"
    break;

  case 1449: /* alter_tgt: label_1 alter_to label_1  */
#line 9526 "parse.y"
                {
                  cbl_perform_tgt_t tgt( (yyvsp[-2].label), (yyvsp[0].label) );
                  parser_alter(&tgt);

                  auto prog = cbl_label_of( symbol_at(symbol_elem_of((yyvsp[-2].label))->program));
                  if( prog->initial ) {
                    cbl_unimplemented("ALTER %s", (yyvsp[-2].label)->name);
                  }
                }
#line 28171 "parse.cc"
    break;

  case 1452: /* go_to: GOTO labels  */
#line 9542 "parse.y"
                {
                  statement_begin((yylsp[-1]), GOTO);
                  size_t narg = (yyvsp[0].labels)->elems.size();
                  if( 1 != narg ) {
                    error_msg((yylsp[0]), "more than one GO TO label requires DEPENDING");
                    YYERROR;
                  }

		  for( auto& label : (yyvsp[0].labels)->elems ) {
		    label->used = yylineno;
		  }
                  cbl_label_t *arg = (yyvsp[0].labels)->elems.front();
                  parser_goto( cbl_refer_t(), 1, &arg );
                }
#line 28190 "parse.cc"
    break;

  case 1453: /* go_to: GOTO labels DEPENDING on scalar  */
#line 9557 "parse.y"
                {
                  statement_begin((yylsp[-4]), GOTO);
		  assert(! (yyvsp[-3].labels)->elems.empty());
                  std::vector <cbl_label_t *> args((yyvsp[-3].labels)->elems.size());
		  std::copy((yyvsp[-3].labels)->elems.begin(), (yyvsp[-3].labels)->elems.end(), args.begin());
		  for( auto& label : (yyvsp[-3].labels)->elems ) {
		    label->used = yylineno;
		  }
                  parser_goto( *(yyvsp[0].refer), args.size(), args.data() );
                }
#line 28205 "parse.cc"
    break;

  case 1454: /* go_to: GOTO  */
#line 9568 "parse.y"
                {
                  cbl_unimplemented("altered GO TO syntax (format 3)");
                  YYERROR;
                }
#line 28214 "parse.cc"
    break;

  case 1455: /* resume: RESUME NEXT STATEMENT  */
#line 9575 "parse.y"
                {
                  statement_begin((yylsp[-2]), RESUME);
                  parser_clear_exception();
                }
#line 28223 "parse.cc"
    break;

  case 1456: /* resume: RESUME label_1  */
#line 9580 "parse.y"
                {
                  statement_begin((yylsp[-1]), RESUME);
                  parser_clear_exception();
		  (yyvsp[0].label)->used = yylineno;
                  parser_goto( cbl_refer_t(), 1, &(yyvsp[0].label) );
                }
#line 28234 "parse.cc"
    break;

  case 1457: /* labels: label_1  */
#line 9588 "parse.y"
                        { (yyval.labels) = new Label_list_t((yyvsp[0].label)); }
#line 28240 "parse.cc"
    break;

  case 1458: /* labels: labels label_1  */
#line 9589 "parse.y"
                               { (yyval.labels) = (yyvsp[-1].labels)->push_back((yyvsp[0].label)); }
#line 28246 "parse.cc"
    break;

  case 1459: /* label_1: qname  */
#line 9592 "parse.y"
                { // Add a forward label with no line number, or get an existing.
                  assert(!name_queue.empty());
		  auto namelocs( name_queue.pop() );

		  auto nameloc = namelocs.back();
                  if( namelocs.size() > 2 ) {
                    error_msg(nameloc.loc,
			      "too many qualifications for %s", nameloc.name);
                    YYERROR;
                  }
                  const char *para = nameloc.name;
                  size_t isect = 0;

                  if( namelocs.size() == 2 ) {
		    auto nameloc = namelocs.front();
                    cbl_label_t *sect = label_add(nameloc.loc, LblSection, nameloc.name);
                    isect = symbol_index(symbol_elem_of(sect));
                  }

                  (yyval.label) = paragraph_reference(para, isect);
                  assert((yyval.label));
                  if( yydebug ) dbgmsg( "using procedure %s of line %d",
                                       (yyval.label)->name, (yyval.label)->line );
                }
#line 28275 "parse.cc"
    break;

  case 1460: /* label_1: "numeric literal"  */
#line 9617 "parse.y"
                {
                  // Add a forward label with no line number, or get an existing.
                  (yyval.label) = label_add((yylsp[0]), LblNone, (yyvsp[0].numstr).string);
                  assert((yyval.label) != NULL);
                }
#line 28285 "parse.cc"
    break;

  case 1463: /* string_impl: "STRING" string_body  */
#line 9631 "parse.y"
                {
                  stringify((yyvsp[0].str_body).inputs, *(yyvsp[0].str_body).into.first, *(yyvsp[0].str_body).into.second);
                  current.declaratives_evaluate(ec_none_e);
                }
#line 28294 "parse.cc"
    break;

  case 1464: /* string_cond: "STRING" string_body on_overflows  */
#line 9637 "parse.y"
                {
                  stringify((yyvsp[-1].str_body).inputs, *(yyvsp[-1].str_body).into.first, *(yyvsp[-1].str_body).into.second,
                            (yyvsp[0].error).on_error, (yyvsp[0].error).not_error);
                  current.declaratives_evaluate(ec_overflow_e);
                }
#line 28304 "parse.cc"
    break;

  case 1467: /* string_body: str_delimiteds str_into  */
#line 9648 "parse.y"
                {
                  statement_begin((yyloc), STRING_kw);
                  (yyval.str_body).inputs = (yyvsp[-1].delimiteds);
                  (yyval.str_body).into = (yyvsp[0].refer2);
                }
#line 28314 "parse.cc"
    break;

  case 1468: /* str_delimiteds: str_delimited  */
#line 9656 "parse.y"
                {
                  refer_marked_list_t marked((yyvsp[0].delimited_1).delimiter, (yyvsp[0].delimited_1).input);
                  (yyval.delimiteds) = new refer_collection_t(marked);
                }
#line 28323 "parse.cc"
    break;

  case 1469: /* str_delimiteds: str_delimiteds str_delimited  */
#line 9661 "parse.y"
                {
                  // matching delimiters (or none) adds to the list
                  refer_marked_list_t& marked = (yyvsp[-1].delimiteds)->lists.back();
                  if( !marked.marker ) {
                    marked.push_on((yyvsp[0].delimited_1).delimiter, (yyvsp[0].delimited_1).input);
                  } else { // start a new list
                    (yyvsp[-1].delimiteds)->push_back( refer_marked_list_t((yyvsp[0].delimited_1).delimiter,
                                                       (yyvsp[0].delimited_1).input) );
                  }
                }
#line 28338 "parse.cc"
    break;

  case 1470: /* str_delimited: str_input DELIMITED by str_size  */
#line 9674 "parse.y"
                {
                  (yyval.delimited_1).input = (yyvsp[-3].refer);
                  (yyval.delimited_1).delimiter = (yyvsp[0].refer);
                }
#line 28347 "parse.cc"
    break;

  case 1471: /* str_delimited: str_input  */
#line 9679 "parse.y"
                {
                  (yyval.delimited_1).input = (yyvsp[0].refer);
                  (yyval.delimited_1).delimiter = NULL;
                }
#line 28356 "parse.cc"
    break;

  case 1473: /* str_input: LITERAL  */
#line 9686 "parse.y"
                        { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 28362 "parse.cc"
    break;

  case 1474: /* str_input: reserved_value  */
#line 9688 "parse.y"
                {
                  (yyval.refer) = new_reference(constant_of(constant_index((yyvsp[0].number))));
                }
#line 28370 "parse.cc"
    break;

  case 1476: /* str_size: SIZE  */
#line 9694 "parse.y"
                       { (yyval.refer) = new_reference(NULL); }
#line 28376 "parse.cc"
    break;

  case 1477: /* str_size: LITERAL  */
#line 9695 "parse.y"
                        { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 28382 "parse.cc"
    break;

  case 1479: /* str_size: reserved_value  */
#line 9698 "parse.y"
                {
                  (yyval.refer) = new_reference(constant_of(constant_index((yyvsp[0].number))));
                }
#line 28390 "parse.cc"
    break;

  case 1480: /* str_into: INTO scalar  */
#line 9704 "parse.y"
                {
                  (yyval.refer2).first = (yyvsp[0].refer);
                  (yyval.refer2).second = new_reference(NULL);
                }
#line 28399 "parse.cc"
    break;

  case 1481: /* str_into: INTO scalar with POINTER scalar  */
#line 9709 "parse.y"
                {
                  (yyval.refer2).first = (yyvsp[-3].refer);
                  (yyval.refer2).second = (yyvsp[0].refer);
                }
#line 28408 "parse.cc"
    break;

  case 1482: /* on_overflows: on_overflow statements  */
#line 9716 "parse.y"
                {
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error?
                    (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_string_overflow_end(tgt);
                }
#line 28420 "parse.cc"
    break;

  case 1483: /* on_overflows: on_overflows on_overflow statements  */
#line 9724 "parse.y"
                {
                  if( (yyvsp[-2].error).on_error && (yyvsp[-2].error).not_error ) {
                    error_msg((yylsp[-1]), "too many ON OVERFLOW clauses");
                    YYERROR;
                  }
                  // "ON" and "NOT ON" could be reversed, but not duplicated.
                  if( (yyvsp[-2].error).on_error && (yyvsp[-1].error).on_error ) {
                    error_msg((yylsp[-1]), "duplicate ON OVERFLOW clauses");
                    YYERROR;
                  }
                  if( (yyvsp[-2].error).not_error && (yyvsp[-1].error).not_error ) {
                    error_msg((yylsp[-1]), "duplicate NOT ON OVERFLOW clauses");
                    YYERROR;
                  }
                  (yyval.error) = (yyvsp[-2].error);
                  if( (yyvsp[-1].error).on_error ) {
                    (yyval.error).on_error = (yyvsp[-1].error).on_error;
                    assert((yyvsp[-2].error).not_error);
                  } else {
                    (yyval.error).not_error = (yyvsp[-1].error).not_error;
                    assert((yyvsp[-2].error).on_error);
                  }
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error?
                    (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_string_overflow_end(tgt);
                }
#line 28453 "parse.cc"
    break;

  case 1484: /* on_overflow: "OVERFLOW"  */
#line 9755 "parse.y"
                {
                  (yyval.error).not_error = NULL;
                  (yyval.error).on_error = label_add(LblString,
                                          uniq_label("string"), yylineno);
                  if( !(yyval.error).on_error ) YYERROR;
                  parser_string_overflow( (yyval.error).on_error );

                  assert( (yyvsp[0].number) == OVERFLOW_kw || (yyvsp[0].number) == NOT );
                  if( (yyvsp[0].number) == NOT ) {
                    std::swap((yyval.error).on_error, (yyval.error).not_error);
                  }
                }
#line 28470 "parse.cc"
    break;

  case 1489: /* unstring_impl: UNSTRING unstring_body  */
#line 9777 "parse.y"
                {
                  unstringify( *(yyvsp[0].uns_body).input, (yyvsp[0].uns_body).delimited, (yyvsp[0].uns_body).into );
                  current.declaratives_evaluate(ec_none_e);
                }
#line 28479 "parse.cc"
    break;

  case 1490: /* unstring_cond: UNSTRING unstring_body on_overflows  */
#line 9783 "parse.y"
                {
                  unstringify( *(yyvsp[-1].uns_body).input, (yyvsp[-1].uns_body).delimited, (yyvsp[-1].uns_body).into,
                               (yyvsp[0].error).on_error, (yyvsp[0].error).not_error );
                  current.declaratives_evaluate(ec_overflow_e);
                }
#line 28489 "parse.cc"
    break;

  case 1491: /* unstring_body: unstring_src uns_delimited INTO uns_into  */
#line 9791 "parse.y"
                {
                  statement_begin((yyloc), UNSTRING);
                  (yyval.uns_body).input = (yyvsp[-3].refer);
                  (yyval.uns_body).delimited = (yyvsp[-2].refers);
                  (yyval.uns_body).into = (yyvsp[0].uns_into);
                }
#line 28500 "parse.cc"
    break;

  case 1494: /* unstring_src: LITERAL  */
#line 9800 "parse.y"
                {
                  (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e));
                }
#line 28508 "parse.cc"
    break;

  case 1495: /* uns_delimited: %empty  */
#line 9805 "parse.y"
                       { (yyval.refers) = NULL; }
#line 28514 "parse.cc"
    break;

  case 1496: /* uns_delimited: DELIMITED by uns_delimiters  */
#line 9806 "parse.y"
                                            { (yyval.refers) = (yyvsp[0].refers); }
#line 28520 "parse.cc"
    break;

  case 1497: /* uns_delimiters: uns_delimiter  */
#line 9809 "parse.y"
                              { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 28526 "parse.cc"
    break;

  case 1498: /* uns_delimiters: uns_delimiters OR uns_delimiter  */
#line 9811 "parse.y"
                {
                  (yyval.refers) = (yyvsp[-2].refers);
                  (yyval.refers)->push_back((yyvsp[0].refer));
                }
#line 28535 "parse.cc"
    break;

  case 1499: /* uns_delimiter: all str_input  */
#line 9817 "parse.y"
                {
                  (yyval.refer) = (yyvsp[0].refer);
                  (yyval.refer)->all = (yyvsp[-1].boolean);
                }
#line 28544 "parse.cc"
    break;

  case 1500: /* uns_into: uns_tgts  */
#line 9824 "parse.y"
                {
                  (yyval.uns_into) = new unstring_into_t((yyvsp[0].uns_tgts));
                }
#line 28552 "parse.cc"
    break;

  case 1501: /* uns_into: uns_tgts with POINTER scalar  */
#line 9828 "parse.y"
                {
                  (yyval.uns_into) = new unstring_into_t((yyvsp[-3].uns_tgts), (yyvsp[0].refer));
                }
#line 28560 "parse.cc"
    break;

  case 1502: /* uns_into: uns_tgts TALLYING in scalar  */
#line 9832 "parse.y"
                {
                  (yyval.uns_into) = new unstring_into_t((yyvsp[-3].uns_tgts), NULL, (yyvsp[0].refer));
                }
#line 28568 "parse.cc"
    break;

  case 1503: /* uns_into: uns_tgts with POINTER scalar TALLYING in scalar  */
#line 9836 "parse.y"
                {
                  (yyval.uns_into) = new unstring_into_t((yyvsp[-6].uns_tgts), (yyvsp[-3].refer), (yyvsp[0].refer));
                }
#line 28576 "parse.cc"
    break;

  case 1504: /* uns_tgts: uns_tgt  */
#line 9841 "parse.y"
                                 { (yyval.uns_tgts) = new unstring_tgt_list_t((yyvsp[0].uns_tgt)); }
#line 28582 "parse.cc"
    break;

  case 1505: /* uns_tgts: uns_tgts uns_tgt  */
#line 9842 "parse.y"
                                 { (yyval.uns_tgts) = (yyvsp[-1].uns_tgts); (yyval.uns_tgts)->push_back((yyvsp[0].uns_tgt)); }
#line 28588 "parse.cc"
    break;

  case 1506: /* uns_tgt: scalar  */
#line 9845 "parse.y"
                {
                  (yyval.uns_tgt) = new unstring_tgt_t((yyvsp[0].refer));
                }
#line 28596 "parse.cc"
    break;

  case 1507: /* uns_tgt: scalar DELIMITER in scalar  */
#line 9849 "parse.y"
                {
                  (yyval.uns_tgt) = new unstring_tgt_t((yyvsp[-3].refer), (yyvsp[0].refer));
                }
#line 28604 "parse.cc"
    break;

  case 1508: /* uns_tgt: scalar COUNT in scalar  */
#line 9853 "parse.y"
                {
                  if( ! (yyvsp[0].refer)->field->is_integer() ) {
                    error_msg((yylsp[0]), "COUNT %s must be integer type",
                             (yyvsp[0].refer)->field->name);
                  }
                  if( (yyvsp[0].refer)->field->has_attr(scaled_e) ) {
                    error_msg((yylsp[0]), "COUNT %s may not be P scaled",
                             (yyvsp[0].refer)->field->name);
                  }
                  (yyval.uns_tgt) = new unstring_tgt_t((yyvsp[-3].refer), NULL, (yyvsp[0].refer));
                }
#line 28620 "parse.cc"
    break;

  case 1509: /* uns_tgt: scalar DELIMITER in scalar COUNT in scalar  */
#line 9865 "parse.y"
                {
                  if( ! (yyvsp[0].refer)->field->is_integer() ) {
                    error_msg((yylsp[0]), "COUNT %s must be integer type",
                             (yyvsp[0].refer)->field->name);
                  }
                  if( (yyvsp[0].refer)->field->has_attr(scaled_e) ) {
                    error_msg((yylsp[0]), "COUNT %s may not be P scaled",
                             (yyvsp[0].refer)->field->name);
                  }
                  (yyval.uns_tgt) = new unstring_tgt_t((yyvsp[-6].refer), (yyvsp[-3].refer), (yyvsp[0].refer));
                }
#line 28636 "parse.cc"
    break;

  case 1510: /* intrinsic_call: function intrinsic  */
#line 9879 "parse.y"
                                   { // "intrinsic" includes UDFs.
                  (yyval.refer) = new_reference((yyvsp[0].field));
                  (yyval.refer)->field->attr |= constant_e;
                }
#line 28645 "parse.cc"
    break;

  case 1511: /* intrinsic_call: function intrinsic refmod  */
#line 9884 "parse.y"
                {
                  if( (yyvsp[0].refmod_parts).from->is_reference() || (yyvsp[0].refmod_parts).len->is_reference() ) {
                    error_msg((yylsp[0]), "subscripts on start:len refmod "
                            "parameters are unsupported");
                    YYERROR;
                  }
                  if( (yyvsp[-1].field)->type != FldAlphanumeric ) {
                    error_msg((yylsp[0]), "'%s' only AlphaNumeric fields accept refmods",
                             (yyvsp[-1].field)->name);
                    YYERROR;
                  }
                  cbl_span_t span( (yyvsp[0].refmod_parts).from, (yyvsp[0].refmod_parts).len );
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field), span);
                  (yyval.refer)->field->attr |= constant_e;
                }
#line 28665 "parse.cc"
    break;

  case 1512: /* intrinsic_call: function NAME  */
#line 9899 "parse.y"
                              {
		  error_msg((yylsp[0]), "no such function: %s", (yyvsp[0].string));
		  YYERROR;
		}
#line 28674 "parse.cc"
    break;

  case 1513: /* function: %empty  */
#line 9906 "parse.y"
                {
                  statement_begin((yyloc), FUNCTION);
                }
#line 28682 "parse.cc"
    break;

  case 1514: /* function: FUNCTION  */
#line 9910 "parse.y"
                {
                  statement_begin((yylsp[0]), FUNCTION);
                }
#line 28690 "parse.cc"
    break;

  case 1515: /* function_udf: "UDF name" '(' arg_list ')'  */
#line 9915 "parse.y"
                                                    {
		  std::vector<function_descr_arg_t> params;
                  auto L = cbl_label_of(symbol_at((yyvsp[-3].number)));
		  if( ! current.udf_args_valid(L, (yyvsp[-1].refers)->refers, params) ) {
		    YYERROR;
		  }
                  (yyval.field) = new_temporary_clone(cbl_field_of(symbol_at(L->returning)));
                  std::vector <cbl_ffi_arg_t> args((yyvsp[-1].refers)->refers.size());
		  size_t i = 0;
		  // Pass parameters as defined by the function.
                  std::transform( (yyvsp[-1].refers)->refers.begin(), (yyvsp[-1].refers)->refers.end(), args.begin(),
				  [params, &i]( cbl_refer_t& arg ) {
				    function_descr_arg_t param = params.at(i++);
				    auto ar = new cbl_refer_t(arg);
				    cbl_ffi_arg_t actual(param.crv, ar);
				    return actual;
				  } );
		  auto name = new_literal(strlen(L->name), L->name, quoted_e);
		  ast_call( (yylsp[-3]), name, (yyval.field), args.size(), args.data(), NULL, NULL, true );
                }
#line 28715 "parse.cc"
    break;

  case 1516: /* function_udf: "UDF"  */
#line 9935 "parse.y"
                               {
                  static const size_t narg = 0;
                  static cbl_ffi_arg_t *args = NULL;

                  auto L = cbl_label_of(symbol_at((yyvsp[0].number)));
                  (yyval.field) = new_temporary_clone(cbl_field_of(symbol_at(L->returning)));

                  auto name = new_literal(strlen(L->name), L->name, quoted_e);
                  ast_call( (yylsp[0]), name, (yyval.field), narg, args, NULL, NULL, true );
                }
#line 28730 "parse.cc"
    break;

  case 1519: /* intrinsic: intrinsic_v '(' arg_list ')'  */
#line 9965 "parse.y"
                                                   {
                  location_set((yylsp[-3]));
                  std::vector <cbl_refer_t> args((yyvsp[-1].refers)->size());
		  assert(! args.empty());
                  std::copy( (yyvsp[-1].refers)->begin(), (yyvsp[-1].refers)->end(), args.begin() );
                  cbl_refer_t *p = intrinsic_inconsistent_parameter(args.size(),
								    args.data());
                  if( p != NULL ) {
		    auto loc = symbol_field_location(field_index(p->field));
                    error_msg(loc, "FUNCTION %s has "
                              "inconsistent parameter type %zu ('%s')",
                              keyword_str((yyvsp[-3].number)), p - args.data(), name_of(p->field) );
                    YYERROR;
                  }
                  (yyval.field) = is_numeric(args[0].field)?
                         new_tempnumeric_float() :
                         new_alphanumeric();

                  parser_intrinsic_callv( (yyval.field), intrinsic_cname((yyvsp[-3].number)),
					  args.size(), args.data() );
                }
#line 28756 "parse.cc"
    break;

  case 1520: /* intrinsic: PRESENT_VALUE '(' expr_list ')'  */
#line 9988 "parse.y"
                {
                  static char s[] = "__gg__present_value";
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric_float();
                  size_t n = (yyvsp[-1].refers)->size();
                  assert(n > 0);
                  if( n < 2 ) {
                    error_msg((yylsp[-1]), "PRESENT VALUE requires 2 parameters");
                    YYERROR;
                  }
                  std::vector <cbl_refer_t> args(n);
		  std::copy( (yyvsp[-1].refers)->begin(), (yyvsp[-1].refers)->end(), args.begin() );
                  parser_intrinsic_callv( (yyval.field), s, args.size(), args.data() );
                }
#line 28775 "parse.cc"
    break;

  case 1521: /* intrinsic: BASECONVERT '(' varg varg varg ')'  */
#line 10003 "parse.y"
                                                                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric();
		  cbl_unimplemented("BASECONVERT");
                  if( ! intrinsic_call_3((yyval.field), BASECONVERT, (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer) )) YYERROR;
                }
#line 28786 "parse.cc"
    break;

  case 1522: /* intrinsic: "BIT-OF" '(' expr ')'  */
#line 10009 "parse.y"
                                         {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_1((yyval.field), BIT_OF, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 28796 "parse.cc"
    break;

  case 1523: /* intrinsic: CHAR '(' expr ')'  */
#line 10014 "parse.y"
                                       {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric(1);
                  if( ! intrinsic_call_1((yyval.field), CHAR, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 28806 "parse.cc"
    break;

  case 1524: /* intrinsic: CONVERT '(' varg convert_src convert_dst ')'  */
#line 10020 "parse.y"
                                                                            {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_alphanumeric(1);
		  cbl_unimplemented("CONVERT");
                  /* if( ! intrinsic_call_3($$, CONVERT, $r1, $src, $dst) ) YYERROR; */
                }
#line 28817 "parse.cc"
    break;

  case 1525: /* intrinsic: "DISPLAY OF" '(' varg ')'  */
#line 10027 "parse.y"
                                              {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_2((yyval.field), DISPLAY_OF, (yyvsp[-1].refer), NULL) ) YYERROR;
                }
#line 28827 "parse.cc"
    break;

  case 1526: /* intrinsic: "DISPLAY OF" '(' varg varg ')'  */
#line 10032 "parse.y"
                                                       {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_2((yyval.field), DISPLAY_OF, (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 28837 "parse.cc"
    break;

  case 1527: /* intrinsic: "EXCEPTION-FILE" filename  */
#line 10038 "parse.y"
                                        {
                  location_set((yylsp[-1]));
                  (yyval.field) = new_alphanumeric();
                  parser_exception_file( (yyval.field), (yyvsp[0].file) );
                }
#line 28847 "parse.cc"
    break;

  case 1528: /* intrinsic: "FIND-STRING" '(' varg last start_after anycase ')'  */
#line 10044 "parse.y"
                                                                      {
                  location_set((yylsp[-6]));
                  (yyval.field) = new_alphanumeric();
                  /* auto r1 = new_reference(new_literal(strlen($r1), $r1, quoted_e)); */
		  cbl_unimplemented("FIND_STRING");
                  /* if( ! intrinsic_call_4($$, FIND_STRING, r1, $r2) ) YYERROR; */
                }
#line 28859 "parse.cc"
    break;

  case 1529: /* intrinsic: "FORMATTED-DATE" '(' "date format" expr ')'  */
#line 10052 "parse.y"
                                                             {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_DATE);
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), FORMATTED_DATE, r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 28870 "parse.cc"
    break;

  case 1530: /* intrinsic: "FORMATTED-DATETIME" '(' "datetime format" expr expr ')'  */
#line 10061 "parse.y"
                                                                     {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_DATETIME);
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-3].string)), (yyvsp[-3].string), quoted_e));
                  static cbl_refer_t r3(literally_zero);
                  if( ! intrinsic_call_4((yyval.field), FORMATTED_DATETIME,
                                         r1, (yyvsp[-2].refer), (yyvsp[-1].refer), &r3) ) YYERROR;
                }
#line 28883 "parse.cc"
    break;

  case 1531: /* intrinsic: "FORMATTED-DATETIME" '(' "datetime format" expr expr expr ')'  */
#line 10070 "parse.y"
                                                              {
                  location_set((yylsp[-6]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_DATETIME);
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-4].string)), (yyvsp[-4].string), quoted_e));
                  if( ! intrinsic_call_4((yyval.field), FORMATTED_DATETIME,
                                             r1, (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 28895 "parse.cc"
    break;

  case 1532: /* intrinsic: "FORMATTED-DATETIME" '(' error ')'  */
#line 10077 "parse.y"
                                                 {
                  YYERROR;
                }
#line 28903 "parse.cc"
    break;

  case 1533: /* intrinsic: "FORMATTED-TIME" '(' "time format" expr expr ')'  */
#line 10081 "parse.y"
                                                              {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_TIME);
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-3].string)), (yyvsp[-3].string), quoted_e));
                  if( ! intrinsic_call_3((yyval.field), FORMATTED_TIME,
                                             r1, (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 28915 "parse.cc"
    break;

  case 1534: /* intrinsic: "FORMATTED-TIME" '(' "time format" expr ')'  */
#line 10088 "parse.y"
                                                              {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_TIME);
                  auto r3 = new_reference(new_literal("0"));
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_3((yyval.field), FORMATTED_TIME,
                                             r1, (yyvsp[-1].refer), r3) ) YYERROR;
                }
#line 28928 "parse.cc"
    break;

  case 1535: /* intrinsic: "FORMATTED-CURRENT-DATE" '(' "datetime format" ')'  */
#line 10096 "parse.y"
                                                                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_DATETIME);
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-1].string)), (yyvsp[-1].string), quoted_e));
                  if( ! intrinsic_call_1((yyval.field), FORMATTED_CURRENT_DATE, r1, (yylsp[-1])) )
                                         YYERROR;
                }
#line 28940 "parse.cc"
    break;

  case 1536: /* intrinsic: "TEST-FORMATTED-DATETIME" '(' "date format" varg ')'  */
#line 10103 "parse.y"
                                                                      {
                location_set((yylsp[-4]));
                  (yyval.field) = new_tempnumeric();
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), TEST_FORMATTED_DATETIME,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 28952 "parse.cc"
    break;

  case 1537: /* intrinsic: "TEST-FORMATTED-DATETIME" '(' "time format" varg ')'  */
#line 10110 "parse.y"
                                                                      {
                location_set((yylsp[-4]));
                  (yyval.field) = new_tempnumeric();
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), TEST_FORMATTED_DATETIME,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 28964 "parse.cc"
    break;

  case 1538: /* intrinsic: "TEST-FORMATTED-DATETIME" '(' "datetime format" varg ')'  */
#line 10118 "parse.y"
                {
                location_set((yylsp[-4]));
                  (yyval.field) = new_tempnumeric();
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), TEST_FORMATTED_DATETIME,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 28976 "parse.cc"
    break;

  case 1539: /* intrinsic: "INTEGER-OF-FORMATTED-DATE" '(' "date format" varg ')'  */
#line 10125 "parse.y"
                                                                        {
                location_set((yylsp[-4]));
                  (yyval.field) = new_tempnumeric();
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), INTEGER_OF_FORMATTED_DATE,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 28988 "parse.cc"
    break;

  case 1540: /* intrinsic: "INTEGER-OF-FORMATTED-DATE" '(' "datetime format" varg ')'  */
#line 10133 "parse.y"
                {
                location_set((yylsp[-4]));
                  (yyval.field) = new_tempnumeric();
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), INTEGER_OF_FORMATTED_DATE,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29000 "parse.cc"
    break;

  case 1541: /* intrinsic: "SECONDS-FROM-FORMATTED-TIME" '(' "time format" varg ')'  */
#line 10140 "parse.y"
                                                                          {
                location_set((yylsp[-4]));
                  (yyval.field) = new_tempnumeric();
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), SECONDS_FROM_FORMATTED_TIME,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29012 "parse.cc"
    break;

  case 1542: /* intrinsic: "SECONDS-FROM-FORMATTED-TIME" '(' "datetime format" varg ')'  */
#line 10148 "parse.y"
                {
                location_set((yylsp[-4]));
                  (yyval.field) = new_tempnumeric();
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), SECONDS_FROM_FORMATTED_TIME,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29024 "parse.cc"
    break;

  case 1543: /* intrinsic: "HEX-OF" '(' varg ')'  */
#line 10156 "parse.y"
                                         {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_1((yyval.field), HEX_OF, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 29034 "parse.cc"
    break;

  case 1544: /* intrinsic: LENGTH '(' tableish ')'  */
#line 10161 "parse.y"
                                             {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric();
		  (yyval.field)->clear_attr(signable_e);
		  parser_set_numeric((yyval.field), (yyvsp[-1].refer)->field->size());
		  if( ! intrinsic_call_1((yyval.field), LENGTH, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
		}
#line 29046 "parse.cc"
    break;

  case 1545: /* intrinsic: LENGTH '(' varg1a ')'  */
#line 10168 "parse.y"
                                           {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric();
		  (yyval.field)->clear_attr(signable_e);
		  parser_set_numeric((yyval.field), (yyvsp[-1].refer)->field->data.capacity);
		  if( ! intrinsic_call_1((yyval.field), LENGTH, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
		}
#line 29058 "parse.cc"
    break;

  case 1546: /* intrinsic: lopper_case '(' alpha_val ')'  */
#line 10175 "parse.y"
                                                        {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric((yyvsp[-1].refer)->field->data.capacity);
                  if( ! intrinsic_call_1((yyval.field), (yyvsp[-3].number), (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 29068 "parse.cc"
    break;

  case 1547: /* intrinsic: "MODULE-NAME " '(' module_type ')'  */
#line 10182 "parse.y"
                {
		  (yyval.field) = new_alphanumeric(sizeof(cbl_name_t));
		  parser_module_name( (yyval.field), (yyvsp[-1].module_type) );
		}
#line 29077 "parse.cc"
    break;

  case 1548: /* intrinsic: "NUMVAL-C" '(' varg numval_locale anycase ')'  */
#line 10187 "parse.y"
                                                                    {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric();
                  parser_intrinsic_numval_c( (yyval.field), *(yyvsp[-3].refer), (yyvsp[-2].numval_locale_t).is_locale,
                                                      *(yyvsp[-2].numval_locale_t).arg2, (yyvsp[-1].boolean) );
                }
#line 29088 "parse.cc"
    break;

  case 1549: /* intrinsic: ORD '(' alpha_val ')'  */
#line 10194 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_1((yyval.field), ORD, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 29098 "parse.cc"
    break;

  case 1550: /* intrinsic: RANDOM  */
#line 10200 "parse.y"
                {
                  location_set((yylsp[0]));
                  (yyval.field) = new_tempnumeric_float();
                  parser_intrinsic_call_0( (yyval.field), intrinsic_cname(RANDOM) );
                }
#line 29108 "parse.cc"
    break;

  case 1551: /* intrinsic: RANDOM_SEED expr ')'  */
#line 10206 "parse.y"
                { // left parenthesis consumed by lexer
                  location_set((yylsp[-2]));
                  (yyval.field) = new_tempnumeric_float();
                  if( ! intrinsic_call_1((yyval.field), RANDOM, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 29118 "parse.cc"
    break;

  case 1552: /* intrinsic: "STANDARD-COMPARE" '(' varg varg varg varg ')'  */
#line 10213 "parse.y"
                {
                  location_set((yylsp[-6]));
                  (yyval.field) = new_tempnumeric();
		  cbl_unimplemented("STANDARD-COMPARE");
                  /* if( ! intrinsic_call_4($$, STANDARD_COMPARE, $r1) ) YYERROR; */
                }
#line 29129 "parse.cc"
    break;

  case 1553: /* intrinsic: "STANDARD-COMPARE" '(' varg varg varg ')'  */
#line 10220 "parse.y"
                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric();
		  cbl_unimplemented("STANDARD-COMPARE");
                  /* if( ! intrinsic_call_4($$, STANDARD_COMPARE, $r1) ) YYERROR; */
                }
#line 29140 "parse.cc"
    break;

  case 1554: /* intrinsic: "STANDARD-COMPARE" '(' varg varg ')'  */
#line 10227 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_tempnumeric();
		  cbl_unimplemented("STANDARD-COMPARE");
                  /* if( ! intrinsic_call_4($$, STANDARD_COMPARE, $r1) ) YYERROR; */
                }
#line 29151 "parse.cc"
    break;

  case 1555: /* intrinsic: SUBSTITUTE '(' varg subst_inputs ')'  */
#line 10234 "parse.y"
                                                                 {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric();
                  std::vector <cbl_substitute_t> args((yyvsp[-1].substitutions)->size());
                  std::transform( (yyvsp[-1].substitutions)->begin(), (yyvsp[-1].substitutions)->end(), args.begin(),
                                  []( const substitution_t& arg ) {
                                    cbl_substitute_t output( arg.anycase,
                                                             char(arg.first_last),
                                                             arg.orig,
                                                             arg.replacement );
                                  return output; } );

                  parser_intrinsic_subst((yyval.field), *(yyvsp[-2].refer), args.size(), args.data());
                }
#line 29170 "parse.cc"
    break;

  case 1556: /* intrinsic: "TEST-NUMVAL-C" '(' varg numval_locale anycase ')'  */
#line 10250 "parse.y"
                                                                         {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric();
                  parser_intrinsic_numval_c( (yyval.field), *(yyvsp[-3].refer), (yyvsp[-2].numval_locale_t).is_locale,
                                                 *(yyvsp[-2].numval_locale_t).arg2, (yyvsp[-1].boolean), true );
                }
#line 29181 "parse.cc"
    break;

  case 1557: /* intrinsic: TRIM '(' error ')'  */
#line 10256 "parse.y"
                                   {
                  error_msg((yylsp[-1]), "invalid TRIM argument");
                  YYERROR;
                }
#line 29190 "parse.cc"
    break;

  case 1558: /* intrinsic: TRIM '(' expr trim_trailing ')'  */
#line 10261 "parse.y"
                {
                  location_set((yylsp[-4]));
                   switch( (yyvsp[-2].refer)->field->type ) {
                   case FldGroup:
                   case FldAlphanumeric:
                   case FldLiteralA:
                   case FldAlphaEdited:
                   case FldNumericEdited:
                     break; // alphanumeric OK
                   default:
                     // BLANK WHEN ZERO implies numeric-edited, so OK
                     if( (yyvsp[-2].refer)->field->has_attr(blank_zero_e) ) {
                       break;
                     }
                     error_msg((yylsp[-2]), "TRIM argument must be alphanumeric");
                     YYERROR;
                     break;
                  }
                  (yyval.field) = new_alphanumeric();
                  cbl_refer_t * how = new_reference((yyvsp[-1].field));
                  if( ! intrinsic_call_2((yyval.field), TRIM, (yyvsp[-2].refer), how) ) YYERROR;
                }
#line 29217 "parse.cc"
    break;

  case 1559: /* intrinsic: USUBSTR '(' alpha_val expr expr ')'  */
#line 10284 "parse.y"
                                                                 {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_3((yyval.field), FORMATTED_DATETIME,
                                             (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29228 "parse.cc"
    break;

  case 1560: /* intrinsic: intrinsic_I '(' expr ')'  */
#line 10292 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_1((yyval.field), (yyvsp[-3].number), (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 29238 "parse.cc"
    break;

  case 1561: /* intrinsic: intrinsic_N '(' expr ')'  */
#line 10299 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric_float();
                  if( ! intrinsic_call_1((yyval.field), (yyvsp[-3].number), (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 29248 "parse.cc"
    break;

  case 1562: /* intrinsic: intrinsic_X '(' varg ')'  */
#line 10306 "parse.y"
                {
                  location_set((yylsp[-3]));
                  auto type = intrinsic_return_type((yyvsp[-3].number));
                  switch(type) {
                  case FldAlphanumeric:
                    (yyval.field) = new_alphanumeric();
                    break;
                  default:
                    if( (yyvsp[-3].number) == NUMVAL || (yyvsp[-3].number) == NUMVAL_F )
                      {
                      (yyval.field) = new_temporary(FldFloat);
                      }
                    else
                      {
                      (yyval.field) = new_temporary(type);
                      }
                  }
                  if( (yyvsp[-3].number) == NUMVAL_F ) {
		    if( is_literal((yyvsp[-1].refer)->field) && ! is_numeric((yyvsp[-1].refer)->field->type) ) {
		      // The parameter might be literal, but could be "hello".
                      auto input = (yyvsp[-1].refer)->field->data.initial;
		      error_msg((yylsp[-1]), "'%s' is not a numeric literal", input);
                    }
                  }
                  if( ! intrinsic_call_1((yyval.field), (yyvsp[-3].number), (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 29279 "parse.cc"
    break;

  case 1563: /* intrinsic: intrinsic_I2 '(' expr expr ')'  */
#line 10334 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_2((yyval.field), (yyvsp[-4].number), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29289 "parse.cc"
    break;

  case 1564: /* intrinsic: "DATE-TO-YYYYMMDD" '(' expr ')'  */
#line 10341 "parse.y"
                {
                  location_set((yylsp[-3]));
                  static auto r2 = new_reference(FldNumericDisplay, "50");
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_3((yyval.field), DATE_TO_YYYYMMDD,
                                         (yyvsp[-1].refer), r2, r3) ) YYERROR;
                }
#line 29309 "parse.cc"
    break;

  case 1565: /* intrinsic: "DATE-TO-YYYYMMDD" '(' expr expr ')'  */
#line 10358 "parse.y"
                {
                  location_set((yylsp[-4]));
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_3((yyval.field), DATE_TO_YYYYMMDD,
                                         (yyvsp[-2].refer), (yyvsp[-1].refer), r3) ) YYERROR;
                }
#line 29328 "parse.cc"
    break;

  case 1566: /* intrinsic: "DATE-TO-YYYYMMDD" '(' expr expr expr ')'  */
#line 10375 "parse.y"
                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_3((yyval.field), DATE_TO_YYYYMMDD,
                                         (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29339 "parse.cc"
    break;

  case 1567: /* intrinsic: "DAY-TO-YYYYDDD" '(' expr ')'  */
#line 10383 "parse.y"
                {
                  location_set((yylsp[-3]));
                  static auto r2 = new_reference(FldNumericDisplay, "50");
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_3((yyval.field), DAY_TO_YYYYDDD,
                                         (yyvsp[-1].refer), r2, r3) ) YYERROR;
                }
#line 29359 "parse.cc"
    break;

  case 1568: /* intrinsic: "DAY-TO-YYYYDDD" '(' expr expr ')'  */
#line 10400 "parse.y"
                {
                  location_set((yylsp[-4]));
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_3((yyval.field), DAY_TO_YYYYDDD,
                                         (yyvsp[-2].refer), (yyvsp[-1].refer), r3) ) YYERROR;
                }
#line 29378 "parse.cc"
    break;

  case 1569: /* intrinsic: "DAY-TO-YYYYDDD" '(' expr expr expr ')'  */
#line 10417 "parse.y"
                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_3((yyval.field), DAY_TO_YYYYDDD,
                                         (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29389 "parse.cc"
    break;

  case 1570: /* intrinsic: YEAR_TO_YYYY '(' expr ')'  */
#line 10425 "parse.y"
                {
                  location_set((yylsp[-3]));
                  static auto r2 = new_reference(new_literal("50", decimal_e));
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_3((yyval.field), YEAR_TO_YYYY,
                                         (yyvsp[-1].refer), r2, r3) ) YYERROR;
                }
#line 29409 "parse.cc"
    break;

  case 1571: /* intrinsic: YEAR_TO_YYYY '(' expr expr ')'  */
#line 10442 "parse.y"
                {
                  location_set((yylsp[-4]));
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_3((yyval.field), YEAR_TO_YYYY,
                                         (yyvsp[-2].refer), (yyvsp[-1].refer), r3) ) YYERROR;
                }
#line 29428 "parse.cc"
    break;

  case 1572: /* intrinsic: YEAR_TO_YYYY '(' expr expr expr ')'  */
#line 10459 "parse.y"
                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric();
                  if( ! intrinsic_call_3((yyval.field), YEAR_TO_YYYY,
                                         (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29439 "parse.cc"
    break;

  case 1573: /* intrinsic: intrinsic_N2 '(' expr expr ')'  */
#line 10467 "parse.y"
                {
                  location_set((yylsp[-4]));
                  switch((yyvsp[-4].number))
                    {
                    case ANNUITY:
                      (yyval.field) = new_tempnumeric_float();
                      break;
                    case COMBINED_DATETIME:
                      (yyval.field) = new_tempnumeric();
                      break;
                    case REM:
                      (yyval.field) = new_tempnumeric_float();
                      break;
                    }
                  if( ! intrinsic_call_2((yyval.field), (yyvsp[-4].number), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29460 "parse.cc"
    break;

  case 1574: /* intrinsic: intrinsic_X2 '(' varg varg ')'  */
#line 10485 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_2((yyval.field), (yyvsp[-4].number), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29470 "parse.cc"
    break;

  case 1576: /* module_type: ACTIVATING  */
#line 10493 "parse.y"
                           { (yyval.module_type) = module_activating_e; }
#line 29476 "parse.cc"
    break;

  case 1577: /* module_type: CURRENT  */
#line 10494 "parse.y"
                           { (yyval.module_type) = module_current_e; }
#line 29482 "parse.cc"
    break;

  case 1578: /* module_type: NESTED  */
#line 10495 "parse.y"
                           { (yyval.module_type) = module_nested_e; }
#line 29488 "parse.cc"
    break;

  case 1579: /* module_type: STACK  */
#line 10496 "parse.y"
                           { (yyval.module_type) = module_stack_e; }
#line 29494 "parse.cc"
    break;

  case 1580: /* module_type: TOP_LEVEL  */
#line 10497 "parse.y"
                           { (yyval.module_type) = module_toplevel_e; }
#line 29500 "parse.cc"
    break;

  case 1590: /* numval_locale: %empty  */
#line 10513 "parse.y"
                       {
                  (yyval.numval_locale_t).is_locale = false;
                  (yyval.numval_locale_t).arg2 = cbl_refer_t::empty();
                }
#line 29509 "parse.cc"
    break;

  case 1591: /* numval_locale: LOCALE NAME  */
#line 10517 "parse.y"
                             { (yyval.numval_locale_t).is_locale = true;  (yyval.numval_locale_t).arg2 = NULL;
                  cbl_unimplemented("NUMVAL_C LOCALE"); YYERROR;
                }
#line 29517 "parse.cc"
    break;

  case 1592: /* numval_locale: varg  */
#line 10520 "parse.y"
                             { (yyval.numval_locale_t).is_locale = false; (yyval.numval_locale_t).arg2 = (yyvsp[0].refer); }
#line 29523 "parse.cc"
    break;

  case 1593: /* subst_inputs: subst_input  */
#line 10523 "parse.y"
                            { (yyval.substitutions) = new substitutions_t; (yyval.substitutions)->push_back((yyvsp[0].substitution)); }
#line 29529 "parse.cc"
    break;

  case 1594: /* subst_inputs: subst_inputs subst_input  */
#line 10524 "parse.y"
                                         { (yyval.substitutions) = (yyvsp[-1].substitutions); (yyval.substitutions)->push_back((yyvsp[0].substitution)); }
#line 29535 "parse.cc"
    break;

  case 1595: /* subst_input: anycase first_last varg varg  */
#line 10526 "parse.y"
                                                     {
                  (yyval.substitution).init( (yyvsp[-3].boolean), (yyvsp[-2].number), (yyvsp[-1].refer), (yyvsp[0].refer) );
                }
#line 29543 "parse.cc"
    break;

  case 1596: /* intrinsic_locale: "LOCALE-COMPARE" '(' varg varg ')'  */
#line 10533 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric();
                  cbl_refer_t dummy = {};
                  if( ! intrinsic_call_3((yyval.field), LOCALE_COMPARE, (yyvsp[-2].refer), (yyvsp[-1].refer), &dummy) ) YYERROR;
                }
#line 29554 "parse.cc"
    break;

  case 1597: /* intrinsic_locale: "LOCALE-COMPARE" '(' varg varg varg ')'  */
#line 10540 "parse.y"
                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_3((yyval.field), LOCALE_COMPARE, (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29564 "parse.cc"
    break;

  case 1598: /* intrinsic_locale: "LOCALE-DATE" '(' varg ')'  */
#line 10547 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric();
                  cbl_refer_t dummy = {};
                  if( ! intrinsic_call_2((yyval.field), LOCALE_DATE, (yyvsp[-1].refer), &dummy) ) YYERROR;
                }
#line 29575 "parse.cc"
    break;

  case 1599: /* intrinsic_locale: "LOCALE-DATE" '(' varg varg ')'  */
#line 10554 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_2((yyval.field), LOCALE_DATE, (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29585 "parse.cc"
    break;

  case 1600: /* intrinsic_locale: "LOCALE-TIME" '(' varg ')'  */
#line 10560 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric();
                  cbl_refer_t dummy = {};
                  if( ! intrinsic_call_2((yyval.field), LOCALE_TIME, (yyvsp[-1].refer), &dummy) ) YYERROR;
                }
#line 29596 "parse.cc"
    break;

  case 1601: /* intrinsic_locale: "LOCALE-TIME" '(' varg varg ')'  */
#line 10567 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_2((yyval.field), LOCALE_TIME, (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29606 "parse.cc"
    break;

  case 1602: /* intrinsic_locale: "LOCALE-TIME-FROM-SECONDS" '(' varg ')'  */
#line 10573 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric();
                  cbl_refer_t dummy = {};
                  if( ! intrinsic_call_2((yyval.field), LOCALE_TIME_FROM_SECONDS, (yyvsp[-1].refer), &dummy) ) YYERROR;
                }
#line 29617 "parse.cc"
    break;

  case 1603: /* intrinsic_locale: "LOCALE-TIME-FROM-SECONDS" '(' varg varg ')'  */
#line 10580 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_2((yyval.field), LOCALE_TIME_FROM_SECONDS, (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29627 "parse.cc"
    break;

  case 1604: /* lopper_case: "LOWER-CASE"  */
#line 10587 "parse.y"
                                { (yyval.number) = LOWER_CASE; }
#line 29633 "parse.cc"
    break;

  case 1605: /* lopper_case: UPPER_CASE  */
#line 10588 "parse.y"
                                { (yyval.number) = UPPER_CASE; }
#line 29639 "parse.cc"
    break;

  case 1606: /* trim_trailing: %empty  */
#line 10591 "parse.y"
                                { (yyval.field) = new_literal("0"); }
#line 29645 "parse.cc"
    break;

  case 1607: /* trim_trailing: LEADING  */
#line 10592 "parse.y"
                                { (yyval.field) = new_literal("1"); }
#line 29651 "parse.cc"
    break;

  case 1608: /* trim_trailing: TRAILING  */
#line 10593 "parse.y"
                                { (yyval.field) = new_literal("2"); }
#line 29657 "parse.cc"
    break;

  case 1609: /* intrinsic0: CURRENT_DATE  */
#line 10596 "parse.y"
                             {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_CALENDAR_DATE);
                  parser_intrinsic_call_0( (yyval.field), "__gg__current_date" );
                }
#line 29667 "parse.cc"
    break;

  case 1610: /* intrinsic0: E  */
#line 10601 "parse.y"
                  {
                  location_set((yylsp[0]));
                  (yyval.field) = new_tempnumeric();
                 parser_intrinsic_call_0( (yyval.field), "__gg__e" );
                }
#line 29677 "parse.cc"
    break;

  case 1611: /* intrinsic0: "EXCEPTION-FILE-N"  */
#line 10607 "parse.y"
                                 {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric();
                  intrinsic_call_0( (yyval.field), EXCEPTION_FILE_N );
                }
#line 29687 "parse.cc"
    break;

  case 1612: /* intrinsic0: "EXCEPTION-FILE"  */
#line 10613 "parse.y"
                               {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric();
                  parser_exception_file( (yyval.field) );
                }
#line 29697 "parse.cc"
    break;

  case 1613: /* intrinsic0: "EXCEPTION-LOCATION-N"  */
#line 10618 "parse.y"
                                     {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric();
                  intrinsic_call_0( (yyval.field), EXCEPTION_LOCATION_N );
                }
#line 29707 "parse.cc"
    break;

  case 1614: /* intrinsic0: "EXCEPTION-LOCATION"  */
#line 10623 "parse.y"
                                   {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric();
                  intrinsic_call_0( (yyval.field), EXCEPTION_LOCATION );
                }
#line 29717 "parse.cc"
    break;

  case 1615: /* intrinsic0: "EXCEPTION-STATEMENT"  */
#line 10628 "parse.y"
                                    {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric();
                  intrinsic_call_0( (yyval.field), EXCEPTION_STATEMENT );
                }
#line 29727 "parse.cc"
    break;

  case 1616: /* intrinsic0: "EXCEPTION-STATUS"  */
#line 10633 "parse.y"
                                 {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric();
                  intrinsic_call_0( (yyval.field), EXCEPTION_STATUS );
                }
#line 29737 "parse.cc"
    break;

  case 1617: /* intrinsic0: PI  */
#line 10639 "parse.y"
                   {
                  location_set((yylsp[0]));
                  (yyval.field) = new_tempnumeric_float();
                 parser_intrinsic_call_0( (yyval.field), "__gg__pi" );
                }
#line 29747 "parse.cc"
    break;

  case 1618: /* intrinsic0: "SECONDS-PAST-MIDNIGHT"  */
#line 10644 "parse.y"
                                      {
                  location_set((yylsp[0]));
                  (yyval.field) = new_tempnumeric();
                 intrinsic_call_0( (yyval.field), SECONDS_PAST_MIDNIGHT );
                }
#line 29757 "parse.cc"
    break;

  case 1619: /* intrinsic0: UUID4  */
#line 10649 "parse.y"
                      {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric();
                 parser_intrinsic_call_0( (yyval.field), "__gg__uuid4" );
                }
#line 29767 "parse.cc"
    break;

  case 1620: /* intrinsic0: WHEN_COMPILED  */
#line 10654 "parse.y"
                              {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_CALENDAR_DATE); // Returns YYYYMMDDhhmmssss-0500
                 parser_intrinsic_call_0( (yyval.field), "__gg__when_compiled" );
                }
#line 29777 "parse.cc"
    break;

  case 1621: /* intrinsic_I: "BOOLEAN-OF-INTEGER"  */
#line 10661 "parse.y"
                                       { (yyval.number) = BOOLEAN_OF_INTEGER;
		  cbl_unimplemented("BOOLEAN-OF-INTEGER");
		}
#line 29785 "parse.cc"
    break;

  case 1622: /* intrinsic_I: "CHAR-NATIONAL"  */
#line 10664 "parse.y"
                                       { (yyval.number) = CHAR_NATIONAL;
		    cbl_unimplemented("CHAR-NATIONAL");
		}
#line 29793 "parse.cc"
    break;

  case 1623: /* intrinsic_I: "DATE-OF-INTEGER"  */
#line 10667 "parse.y"
                                       { (yyval.number) = DATE_OF_INTEGER; }
#line 29799 "parse.cc"
    break;

  case 1624: /* intrinsic_I: "DAY-OF-INTEGER"  */
#line 10668 "parse.y"
                                       { (yyval.number) = DAY_OF_INTEGER; }
#line 29805 "parse.cc"
    break;

  case 1625: /* intrinsic_I: FACTORIAL  */
#line 10669 "parse.y"
                                       { (yyval.number) = FACTORIAL; }
#line 29811 "parse.cc"
    break;

  case 1626: /* intrinsic_I: "FRACTION-PART"  */
#line 10670 "parse.y"
                                       { (yyval.number) = FRACTION_PART; }
#line 29817 "parse.cc"
    break;

  case 1627: /* intrinsic_I: "HIGHEST-ALGEBRAIC"  */
#line 10671 "parse.y"
                                       { (yyval.number) = HIGHEST_ALGEBRAIC; }
#line 29823 "parse.cc"
    break;

  case 1628: /* intrinsic_I: INTEGER  */
#line 10672 "parse.y"
                                       { (yyval.number) = INTEGER; }
#line 29829 "parse.cc"
    break;

  case 1629: /* intrinsic_I: "INTEGER-OF-BOOLEAN"  */
#line 10673 "parse.y"
                                       { (yyval.number) = INTEGER_OF_BOOLEAN;
		    cbl_unimplemented("INTEGER-OF-BOOLEAN");
		}
#line 29837 "parse.cc"
    break;

  case 1630: /* intrinsic_I: "INTEGER-OF-DATE"  */
#line 10676 "parse.y"
                                       { (yyval.number) = INTEGER_OF_DATE; }
#line 29843 "parse.cc"
    break;

  case 1631: /* intrinsic_I: "INTEGER-OF-DAY"  */
#line 10677 "parse.y"
                                       { (yyval.number) = INTEGER_OF_DAY; }
#line 29849 "parse.cc"
    break;

  case 1632: /* intrinsic_I: "INTEGER-PART"  */
#line 10678 "parse.y"
                                       { (yyval.number) = INTEGER_PART; }
#line 29855 "parse.cc"
    break;

  case 1633: /* intrinsic_I: "LOWEST-ALGEBRAIC"  */
#line 10679 "parse.y"
                                       { (yyval.number) = LOWEST_ALGEBRAIC; }
#line 29861 "parse.cc"
    break;

  case 1634: /* intrinsic_I: SIGN  */
#line 10680 "parse.y"
                                       { (yyval.number) = SIGN; }
#line 29867 "parse.cc"
    break;

  case 1635: /* intrinsic_I: "TEST-DATE-YYYYMMDD"  */
#line 10681 "parse.y"
                                       { (yyval.number) = TEST_DATE_YYYYMMDD; }
#line 29873 "parse.cc"
    break;

  case 1636: /* intrinsic_I: "TEST-DAY-YYYYDDD"  */
#line 10682 "parse.y"
                                       { (yyval.number) = TEST_DAY_YYYYDDD; }
#line 29879 "parse.cc"
    break;

  case 1637: /* intrinsic_I: ULENGTH  */
#line 10683 "parse.y"
                                       { (yyval.number) = ULENGTH; }
#line 29885 "parse.cc"
    break;

  case 1638: /* intrinsic_I: UPOS  */
#line 10684 "parse.y"
                                       { (yyval.number) = UPOS; }
#line 29891 "parse.cc"
    break;

  case 1639: /* intrinsic_I: USUPPLEMENTARY  */
#line 10685 "parse.y"
                                       { (yyval.number) = USUPPLEMENTARY; }
#line 29897 "parse.cc"
    break;

  case 1640: /* intrinsic_I: UVALID  */
#line 10686 "parse.y"
                                       { (yyval.number) = UVALID; }
#line 29903 "parse.cc"
    break;

  case 1641: /* intrinsic_I: UWIDTH  */
#line 10687 "parse.y"
                                       { (yyval.number) = UWIDTH; }
#line 29909 "parse.cc"
    break;

  case 1642: /* intrinsic_I2: MOD  */
#line 10690 "parse.y"
                                       { (yyval.number) = MOD; }
#line 29915 "parse.cc"
    break;

  case 1643: /* intrinsic_N: ABS  */
#line 10693 "parse.y"
                                       { (yyval.number) = ABS; }
#line 29921 "parse.cc"
    break;

  case 1644: /* intrinsic_N: ACOS  */
#line 10694 "parse.y"
                                       { (yyval.number) = ACOS; }
#line 29927 "parse.cc"
    break;

  case 1645: /* intrinsic_N: ASIN  */
#line 10695 "parse.y"
                                       { (yyval.number) = ASIN; }
#line 29933 "parse.cc"
    break;

  case 1646: /* intrinsic_N: ATAN  */
#line 10696 "parse.y"
                                       { (yyval.number) = ATAN; }
#line 29939 "parse.cc"
    break;

  case 1647: /* intrinsic_N: COS  */
#line 10697 "parse.y"
                                       { (yyval.number) = COS; }
#line 29945 "parse.cc"
    break;

  case 1648: /* intrinsic_N: EXP  */
#line 10698 "parse.y"
                                       { (yyval.number) = EXP; }
#line 29951 "parse.cc"
    break;

  case 1649: /* intrinsic_N: EXP10  */
#line 10699 "parse.y"
                                       { (yyval.number) = EXP10; }
#line 29957 "parse.cc"
    break;

  case 1650: /* intrinsic_N: LOG  */
#line 10700 "parse.y"
                                       { (yyval.number) = LOG; }
#line 29963 "parse.cc"
    break;

  case 1651: /* intrinsic_N: LOG10  */
#line 10701 "parse.y"
                                       { (yyval.number) = LOG10; }
#line 29969 "parse.cc"
    break;

  case 1652: /* intrinsic_N: SIN  */
#line 10702 "parse.y"
                                       { (yyval.number) = SIN; }
#line 29975 "parse.cc"
    break;

  case 1653: /* intrinsic_N: "SMALLEST-ALGEBRAIC"  */
#line 10703 "parse.y"
                                       { (yyval.number) = SMALLEST_ALGEBRAIC;
		    cbl_unimplemented("SMALLEST-ALGEBRAIC");
		}
#line 29983 "parse.cc"
    break;

  case 1654: /* intrinsic_N: SQRT  */
#line 10706 "parse.y"
                                       { (yyval.number) = SQRT; }
#line 29989 "parse.cc"
    break;

  case 1655: /* intrinsic_N: TAN  */
#line 10707 "parse.y"
                                       { (yyval.number) = TAN; }
#line 29995 "parse.cc"
    break;

  case 1656: /* intrinsic_N2: ANNUITY  */
#line 10710 "parse.y"
                                       { (yyval.number) = ANNUITY; }
#line 30001 "parse.cc"
    break;

  case 1657: /* intrinsic_N2: "COMBINED-DATETIME"  */
#line 10711 "parse.y"
                                       { (yyval.number) = COMBINED_DATETIME; }
#line 30007 "parse.cc"
    break;

  case 1658: /* intrinsic_N2: REM  */
#line 10712 "parse.y"
                                       { (yyval.number) = REM; }
#line 30013 "parse.cc"
    break;

  case 1659: /* intrinsic_X: "BIT-TO-CHAR"  */
#line 10715 "parse.y"
                                       { (yyval.number) = BIT_TO_CHAR; }
#line 30019 "parse.cc"
    break;

  case 1660: /* intrinsic_X: "BYTE-LENGTH"  */
#line 10716 "parse.y"
                                       { (yyval.number) = BYTE_LENGTH; }
#line 30025 "parse.cc"
    break;

  case 1661: /* intrinsic_X: "HEX-TO-CHAR"  */
#line 10717 "parse.y"
                                       { (yyval.number) = HEX_TO_CHAR; }
#line 30031 "parse.cc"
    break;

  case 1662: /* intrinsic_X: NUMVAL  */
#line 10718 "parse.y"
                                       { (yyval.number) = NUMVAL; }
#line 30037 "parse.cc"
    break;

  case 1663: /* intrinsic_X: "NUMVAL-F"  */
#line 10719 "parse.y"
                                       { (yyval.number) = NUMVAL_F; }
#line 30043 "parse.cc"
    break;

  case 1664: /* intrinsic_X: REVERSE  */
#line 10720 "parse.y"
                                       { (yyval.number) = REVERSE; }
#line 30049 "parse.cc"
    break;

  case 1665: /* intrinsic_X: "TEST-NUMVAL"  */
#line 10721 "parse.y"
                                       { (yyval.number) = TEST_NUMVAL; }
#line 30055 "parse.cc"
    break;

  case 1666: /* intrinsic_X: "TEST-NUMVAL-F"  */
#line 10722 "parse.y"
                                       { (yyval.number) = TEST_NUMVAL_F; }
#line 30061 "parse.cc"
    break;

  case 1667: /* intrinsic_X2: "NATIONAL-OF"  */
#line 10725 "parse.y"
                                       { (yyval.number) = NATIONAL_OF; }
#line 30067 "parse.cc"
    break;

  case 1668: /* intrinsic_v: CONCAT  */
#line 10728 "parse.y"
                                       { (yyval.number) = CONCAT; }
#line 30073 "parse.cc"
    break;

  case 1669: /* intrinsic_v: "Max"  */
#line 10729 "parse.y"
                                       { (yyval.number) = MAXX; }
#line 30079 "parse.cc"
    break;

  case 1670: /* intrinsic_v: MEAN  */
#line 10730 "parse.y"
                                       { (yyval.number) = MEAN; }
#line 30085 "parse.cc"
    break;

  case 1671: /* intrinsic_v: MEDIAN  */
#line 10731 "parse.y"
                                       { (yyval.number) = MEDIAN; }
#line 30091 "parse.cc"
    break;

  case 1672: /* intrinsic_v: MIDRANGE  */
#line 10732 "parse.y"
                                       { (yyval.number) = MIDRANGE; }
#line 30097 "parse.cc"
    break;

  case 1673: /* intrinsic_v: "Min"  */
#line 10733 "parse.y"
                                       { (yyval.number) = MINN; }
#line 30103 "parse.cc"
    break;

  case 1674: /* intrinsic_v: "ORD-MAX"  */
#line 10734 "parse.y"
                                       { (yyval.number) = ORD_MAX; }
#line 30109 "parse.cc"
    break;

  case 1675: /* intrinsic_v: "ORD-MIN"  */
#line 10735 "parse.y"
                                       { (yyval.number) = ORD_MIN; }
#line 30115 "parse.cc"
    break;

  case 1676: /* intrinsic_v: RANGE  */
#line 10736 "parse.y"
                                       { (yyval.number) = RANGE; }
#line 30121 "parse.cc"
    break;

  case 1677: /* intrinsic_v: "STANDARD-DEVIATION "  */
#line 10737 "parse.y"
                                       { (yyval.number) = STANDARD_DEVIATION; }
#line 30127 "parse.cc"
    break;

  case 1678: /* intrinsic_v: SUM  */
#line 10738 "parse.y"
                                       { (yyval.number) = SUM; }
#line 30133 "parse.cc"
    break;

  case 1679: /* intrinsic_v: VARIANCE  */
#line 10739 "parse.y"
                                       { (yyval.number) = VARIANCE; }
#line 30139 "parse.cc"
    break;

  case 1680: /* all: %empty  */
#line 10742 "parse.y"
                       { (yyval.boolean) = false; }
#line 30145 "parse.cc"
    break;

  case 1681: /* all: ALL  */
#line 10743 "parse.y"
                       { (yyval.boolean) = true; }
#line 30151 "parse.cc"
    break;

  case 1682: /* anycase: %empty  */
#line 10746 "parse.y"
                        { (yyval.boolean) = false; }
#line 30157 "parse.cc"
    break;

  case 1683: /* anycase: ANYCASE  */
#line 10747 "parse.y"
                        { (yyval.boolean) = true; }
#line 30163 "parse.cc"
    break;

  case 1704: /* first_last: %empty  */
#line 10790 "parse.y"
                        { (yyval.number) = 0; }
#line 30169 "parse.cc"
    break;

  case 1705: /* first_last: FIRST  */
#line 10791 "parse.y"
                        { (yyval.number) = 'F'; }
#line 30175 "parse.cc"
    break;

  case 1706: /* first_last: LAST  */
#line 10792 "parse.y"
                        { (yyval.number) = 'L'; }
#line 30181 "parse.cc"
    break;

  case 1707: /* is_global: %empty  */
#line 10795 "parse.y"
                                    { (yyval.boolean) = false; }
#line 30187 "parse.cc"
    break;

  case 1708: /* is_global: is GLOBAL  */
#line 10796 "parse.y"
                                    { (yyval.boolean) = true; }
#line 30193 "parse.cc"
    break;

  case 1709: /* global: %empty  */
#line 10799 "parse.y"
                                    { (yyval.boolean) = false; }
#line 30199 "parse.cc"
    break;

  case 1710: /* global: GLOBAL  */
#line 10800 "parse.y"
                                    { (yyval.boolean) = true; }
#line 30205 "parse.cc"
    break;

  case 1711: /* initial: %empty  */
#line 10803 "parse.y"
                            { (yyval.number) = 0; }
#line 30211 "parse.cc"
    break;

  case 1712: /* initial: "INITIAL"  */
#line 10804 "parse.y"
                            { (yyval.number) = INITIAL_kw; }
#line 30217 "parse.cc"
    break;

  case 1730: /* optional: %empty  */
#line 10840 "parse.y"
                         { (yyval.boolean) = false; }
#line 30223 "parse.cc"
    break;

  case 1731: /* optional: OPTIONAL  */
#line 10841 "parse.y"
                         { (yyval.boolean) = true;  }
#line 30229 "parse.cc"
    break;

  case 1744: /* strong: %empty  */
#line 10867 "parse.y"
                       { (yyval.boolean) = true; }
#line 30235 "parse.cc"
    break;

  case 1745: /* strong: STRONG  */
#line 10868 "parse.y"
                       { (yyval.boolean) = false; }
#line 30241 "parse.cc"
    break;

  case 1765: /* cdf_use: USE DEBUGGING on labels  */
#line 10909 "parse.y"
                {
                  if( ! current.declarative_section_name() ) {
                    error_msg((yylsp[-3]), "USE valid only in DECLARATIVES");
                    YYERROR;
                  }
                  std::for_each((yyvsp[0].labels)->elems.begin(), (yyvsp[0].labels)->elems.end(),
                                add_debugging_declarative);

                }
#line 30255 "parse.cc"
    break;

  case 1766: /* cdf_use: USE DEBUGGING on ALL PROCEDURES  */
#line 10919 "parse.y"
                {
                  if( ! current.declarative_section_name() ) {
                    error_msg((yylsp[-4]), "USE valid only in DECLARATIVES");
                    YYERROR;
                  }
                  static const cbl_label_t all = {
		    LblNone, 0, 0,0,0, false, false, false, 0,0, ":all:" };
		      ////.name = { ':', 'a', 'l', 'l', ':',  } // workaround for gcc < 11.3
                  add_debugging_declarative(&all);
                 }
#line 30270 "parse.cc"
    break;

  case 1767: /* cdf_use: USE globally mistake procedure on filenames  */
#line 10931 "parse.y"
                {
                  if( ! current.declarative_section_name() ) {
		    error_msg((yylsp[-5]), "USE valid only in DECLARATIVES");
                    YYERROR;
                  }
                  bool global = (yyvsp[-4].number) == GLOBAL;
                  std::list<size_t> files;
		  auto& culprits = (yyvsp[0].files)->files;
                    std::transform( culprits.begin(), culprits.end(),
                                    std::back_inserter(files),
                                    file_list_t::symbol_index );
                  cbl_declarative_t declarative(current.declarative_section(),
                                                ec_all_e, files,
                                                file_mode_none_e, global);
                  current.declaratives.add(declarative);
		}
#line 30291 "parse.cc"
    break;

  case 1768: /* cdf_use: USE globally mistake procedure on io_mode  */
#line 10949 "parse.y"
                { // Format 1
                  if( ! current.declarative_section_name() ) {
                    error_msg((yylsp[-5]), "USE valid only in DECLARATIVES");
                    YYERROR;
                  }
                  bool global = (yyvsp[-4].number) == GLOBAL;
                  std::list<size_t> files;
                  cbl_declarative_t declarative(current.declarative_section(),
                                                ec_all_e, files,
                                                (yyvsp[0].io_mode), global);
                  current.declaratives.add(declarative);
                }
#line 30308 "parse.cc"
    break;

  case 1769: /* cdf_use: USE cdf_use_excepts  */
#line 10962 "parse.y"
                {
                  if( ! current.declarative_section_name() ) {
                    error_msg((yylsp[-1]), "USE valid only in DECLARATIVES");
                    YYERROR;
                  }
                }
#line 30319 "parse.cc"
    break;

  case 1772: /* cdf_use_except: EC NAME cdf_use_files  */
#line 10975 "parse.y"
                {
                  auto ec = ec_type_of((yyvsp[-1].string));
                  if( ec == ec_none_e ) {
                    error_msg((yylsp[-1]), "not an EXCEPTION CONDITION: %s", (yyvsp[-1].string));
                    YYERROR;
                  }
                  std::list<size_t> files;
                  if( (yyvsp[0].files) ) {
                    if( ec_io_e != (ec_io_e & ec) ) {
                      error_msg((yylsp[-1]), "not an I-O EXCEPTION CONDITION: %s", (yyvsp[-1].string));
                      YYERROR;
                    }
                    auto& culprits = (yyvsp[0].files)->files;
                    std::transform( culprits.begin(), culprits.end(),
                                    std::back_inserter(files),
                                    file_list_t::symbol_index );
                  }

                  cbl_declarative_t declarative(current.declarative_section(),
                                                ec, files, file_mode_none_e);
                  // Check for duplicates, but keep going.
                  current.declaratives.add(declarative);
                }
#line 30347 "parse.cc"
    break;

  case 1773: /* cdf_use_files: %empty  */
#line 10999 "parse.y"
                                  { (yyval.files) = NULL; }
#line 30353 "parse.cc"
    break;

  case 1774: /* cdf_use_files: "File" filenames  */
#line 11000 "parse.y"
                                  { (yyval.files) = (yyvsp[0].files); }
#line 30359 "parse.cc"
    break;

  case 1775: /* io_mode: INPUT  */
#line 11003 "parse.y"
                           { (yyval.io_mode) = file_mode_input_e; }
#line 30365 "parse.cc"
    break;

  case 1776: /* io_mode: OUTPUT  */
#line 11004 "parse.y"
                           { (yyval.io_mode) = file_mode_output_e; }
#line 30371 "parse.cc"
    break;

  case 1777: /* io_mode: IO  */
#line 11005 "parse.y"
                           { (yyval.io_mode) = file_mode_io_e; }
#line 30377 "parse.cc"
    break;

  case 1778: /* io_mode: EXTEND  */
#line 11006 "parse.y"
                           { (yyval.io_mode) = file_mode_extend_e; }
#line 30383 "parse.cc"
    break;

  case 1779: /* globally: global  */
#line 11009 "parse.y"
                                                  { (yyval.number) = (yyvsp[0].boolean)? GLOBAL : 0; }
#line 30389 "parse.cc"
    break;

  case 1780: /* globally: global STANDARD  */
#line 11010 "parse.y"
                                                  { (yyval.number) = (yyvsp[-1].boolean)? GLOBAL : STANDARD; }
#line 30395 "parse.cc"
    break;

  case 1781: /* globally: global AFTER  */
#line 11011 "parse.y"
                                                  { (yyval.number) = (yyvsp[-1].boolean)? GLOBAL : 0; }
#line 30401 "parse.cc"
    break;

  case 1782: /* globally: global AFTER STANDARD  */
#line 11012 "parse.y"
                                                  { (yyval.number) = (yyvsp[-2].boolean)? GLOBAL : STANDARD; }
#line 30407 "parse.cc"
    break;

  case 1783: /* mistake: EXCEPTION  */
#line 11014 "parse.y"
                                    { (yyval.number) = EXCEPTION; }
#line 30413 "parse.cc"
    break;

  case 1784: /* mistake: ERROR  */
#line 11015 "parse.y"
                                    { (yyval.number) = ERROR; }
#line 30419 "parse.cc"
    break;

  case 1790: /* star_cbl_opt: LIST  */
#line 11026 "parse.y"
                       { (yyval.number) = (yyvsp[0].string)[0]   == 'N'? NOLIST : LIST; }
#line 30425 "parse.cc"
    break;

  case 1791: /* star_cbl_opt: MAP  */
#line 11027 "parse.y"
                       { (yyval.number) = (yyvsp[0].string)[0]    == 'N'? NOMAP : MAP; }
#line 30431 "parse.cc"
    break;


#line 30435 "parse.cc"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      {
        yypcontext_t yyctx
          = {yyssp, yytoken, &yylloc};
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == -1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *,
                             YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (yymsg)
              {
                yysyntax_error_status
                  = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
                yymsgp = yymsg;
              }
            else
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = YYENOMEM;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == YYENOMEM)
          YYNOMEM;
      }
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
  return yyresult;
}

#line 11048 "parse.y"


static YYLTYPE
first_line_of( YYLTYPE loc ) {
    if( loc.first_line < loc.last_line ) loc.last_line = loc.first_line;
    if( loc.last_column < loc.first_column ) loc.last_column = loc.first_column;
    return loc;
}

void ast_call( const YYLTYPE& loc, cbl_refer_t name, cbl_refer_t returning,
                  size_t narg, cbl_ffi_arg_t args[],
                  cbl_label_t *except,
                  cbl_label_t *not_except,
                  bool is_function)
{
  if( is_literal(name.field) ) {
    cbl_field_t called = {      0, FldLiteralA, FldInvalid, quoted_e | constant_e,
                                0, 0, 77, nonarray, 0, "",
                                0, cbl_field_t::linkage_t(), {}, NULL };
    snprintf(called.name, sizeof(called.name), "_%s", name.field->data.initial);
    called.data = name.field->data;
    name.field = cbl_field_of(symbol_field_add(PROGRAM, &called));
    symbol_field_location(field_index(name.field), loc);
    parser_symbol_add(name.field);
  }

  parser_call( name, returning, narg, args, except, not_except, is_function );
}

static size_t
statement_begin( const YYLTYPE& loc, int token ) {
  // The following statement generates a message at run-time
  // parser_print_string("statement_begin()\n");
  location_set(loc);
  prior_statement = token;

  parser_statement_begin();

  if( token != CONTINUE ) {
    if( enabled_exceptions.size() ) {
      current.declaratives_evaluate(ec_none_e);
      cbl_enabled_exceptions_array_t enabled(enabled_exceptions);
      parser_exception_prepare( keyword_str(token), &enabled );
    }
  }
  return 0;
}

#include "parse_util.h"
#include <sys/types.h>

struct string_match {
  const char *name;
  string_match( const char name[] ) : name(name) {}
  bool operator()( const char input[] ) const {
    return strlen(name) == strlen(input) && 0 == strcasecmp(name, input);
  }
};

const char *
keyword_str( int token ) {
  if( token == YYEOF )   return "YYEOF";
  if( token == YYEMPTY ) return "YYEMPTY";

  if( token < 256 ) {
    static char ascii[2];
    ascii[0] = token;
    return ascii;
  }

  return tokens.name_of(token);
}

/*
 * Return the token for the Cobol name, unless it is a function name.  The
 * lexer uses keyword_tok to determine if what appears to be a NAME is in fact
 * a token defined by the parser.  For functions, the situation is unambiguous:
 * a function name appears only after FUNCTION or in the REPOSITORY paragraph.
 * All function names are rejected here; the lexer uses typed_name to check
 * REPOSITORY names.
 */

// tokens.h is generated as needed from parse.h with tokens.h.gen
tokenset_t::tokenset_t() {
#include "token_names.h"
}

// Look up the lowercase form of a keyword, excluding some CDF names.
int
tokenset_t::find( const cbl_name_t name, bool include_intrinsics ) {
  static const cbl_name_t non_names[] = { // including CDF NAMES, and "SWITCH"
    "CHECKING", "LIST", "LOCATION", "MAP", "SWITCH",
  }, * const eonames = non_names + COUNT_OF(non_names);

  if( std::any_of(non_names, eonames,
		  [candidate=name](const cbl_name_t non_name) {
		    return 0 == strcasecmp(non_name, candidate)
		      && strlen(non_name) == strlen(candidate);
		  } ) ) {
    return 0; // CDF names are never ordinary tokens
  }

  if( dialect_ibm() ) {
      static const cbl_name_t ibm_non_names[] = {
	  "RESUME",
      }, * const eonames = ibm_non_names + COUNT_OF(ibm_non_names);

      if( std::any_of(ibm_non_names, eonames,
		      [candidate=name](const cbl_name_t non_name) {
			  return 0 == strcasecmp(non_name, candidate)
			      && strlen(non_name) == strlen(candidate);
		      } ) ) {
	  return 0; // Names not reserved by IBM are never ordinary IBM tokens
      }
  }

  cbl_name_t lname;
  std::transform(name, name + strlen(name) + 1, lname, tolower);
  auto p = tokens.find(lname);
  if( p == tokens.end() ) return 0;
  int token = p->second;

  if( token == SECTION ) yylval.number = 0;

  if( include_intrinsics ) return token;

  return intrinsic_cname(token)? 0 : token;
}

int
keyword_tok( const char * text, bool include_intrinsics ) {
  return tokens.find(text, include_intrinsics);
}

static inline size_t
verify_figconst( enum cbl_figconst_t figconst , size_t pos ) {
  cbl_field_t *f = cbl_field_of(symbol_at(pos));
  assert((f->attr & FIGCONST_MASK) == figconst);
  return pos;
}

static size_t
constant_index( int token ) {
  switch(token) {
  case SPACES      : return 0;
  case LOW_VALUES  : return verify_figconst(low_value_e, 2);
  case ZERO        : return verify_figconst(zero_value_e, 3);
  case HIGH_VALUES : return verify_figconst(high_value_e, 4);
  case QUOTES      : return 5;
  case NULLS       : return 6;
  }
  cbl_errx( "%s:%d: no such constant %d", __func__, __LINE__, token);
  return (size_t)-1;
}


static enum relop_t
relop_of(int token) {
  switch(token) {
  case '<': return lt_op;
  case LE:  return le_op;
  case '=': return eq_op;
  case NE:  return ne_op;
  case GE:  return ge_op;
  case '>': return gt_op;
  }
  cbl_internal_error( "%s:%d: invalid relop token %d",
		      __func__, __LINE__, token);

  return lt_op; // not reached
}

static relop_t
relop_invert(relop_t op) {
  switch(op) {
  case lt_op: return ge_op;
  case le_op: return gt_op;
  case eq_op: return ne_op;
  case ne_op: return eq_op;
  case ge_op: return lt_op;
  case gt_op: return le_op;
  }
  cbl_errx( "%s:%d: invalid relop_t %d", __func__, __LINE__, op);

  return relop_t(0); // not reached
}

#if needed
static const char *
relop_debug_str(int token) {
  switch(token) {
  case 0:   return "zilch";
  case '<': return "<";
  case LE:  return "LE";
  case '=': return "=";
  case NE:  return "NE";
  case GE:  return "GE";
  case '>': return ">";
  }
  dbgmsg("%s:%d: invalid relop token %d", __func__, __LINE__, token);
  return "???";
}

static int
token_of(enum relop_t op) {
  switch(op) {
  case lt_op: return '<';
  case le_op: return LE;
  case eq_op: return '=';
  case ne_op: return NE;
  case ge_op: return GE;
  case gt_op: return '>';
  }
  cbl_errx( "%s:%d: invalid relop_t %d", __func__, __LINE__, op);

  return 0; // not reached
}
#endif

static enum classify_t
classify_of( int token ) {
  switch(token) {
  case NUMERIC:             return ClassNumericType;
  case ALPHABETIC:          return ClassAlphabeticType;
  case ALPHABETIC_LOWER:    return ClassLowerType;
  case ALPHABETIC_UPPER:    return ClassUpperType;
  case DBCS:                return ClassDbcsType;
  case KANJI:               return ClassKanjiType;
  }
  return (enum classify_t)-1;
}

static cbl_round_t
rounded_of( int token ) {
  cbl_round_t mode = current_rounded_mode();
  if( 0 <= token && token <= int(truncation_e) ) {
    return cbl_round_t(token);
  }
  switch(token) {
  case ROUNDED:
    mode = current.rounded_mode();
    break;
  case AWAY_FROM_ZERO:
    mode = away_from_zero_e;
    break;
  case NEAREST_TOWARD_ZERO:
    mode = nearest_toward_zero_e;
    break;
  case TOWARD_GREATER:
    mode = toward_greater_e;
    break;
  case TOWARD_LESSER:
    mode = toward_lesser_e;
    break;
  case NEAREST_AWAY_FROM_ZERO:
    mode = nearest_away_from_zero_e;
    break;
  case NEAREST_EVEN:
    mode = nearest_even_e;
    break;
  case PROHIBITED:
    mode = prohibited_e;
    break;
  case TRUNCATION:
    mode = truncation_e;
    break;
  default:
    dbgmsg("%s: logic error: unrecognized rounding value %d", __func__, token);
  }
  return mode;
}

static cbl_round_t
current_rounded_mode( int token ) {
  cbl_round_t mode = rounded_of(token);
  return current.rounded_mode(mode);
}

template <cbl_label_type_t T>
class label_named {
  size_t program;
  const char *name;
 public:
 label_named( size_t program, const char name[] )
   : program(program), name(name) {}
    bool operator()( const symbol_elem_t& sym ) const {
    if( sym.program == program && sym.type == SymLabel ) {
      auto p = cbl_label_of(&sym);
      return p->type == T && 0 == strcasecmp(p->name, name);
    }
    return false;
  }
};

typedef label_named<LblSection> section_named;
typedef label_named<LblParagraph> paragraph_named;

static struct cbl_label_t *
label_add( const YYLTYPE& loc,
	   enum cbl_label_type_t type, const char name[] ) {
  size_t parent = 0;

  // Verify the new paragraph doesn't conflict with a section
  if( type == LblParagraph ) {
    parent = current.program_section();
    auto p = std::find_if(symbols_begin(PROGRAM), symbols_end(),
                          section_named(PROGRAM, name));
    if( p != symbols_end() ) {
      error_msg(loc, "paragraph %s conflicts with section %s on line %d",
                name, cbl_label_of(p)->name, cbl_label_of(p)->line);
    }
  }

  // Verify the new section doesn't conflict with a paragraph
  if( type == LblSection ) {
    // line is zero if the forward reference is to PARA OF SECT
    auto p = std::find_if(symbols_begin(PROGRAM), symbols_end(),
                          paragraph_named(PROGRAM, name));
    if( p != symbols_end() ) {
      error_msg(loc, "section %s conflicts with paragraph %s on line %d",
                name, cbl_label_of(p)->name, cbl_label_of(p)->line);
    }
  }
  struct cbl_label_t label = { type, parent, loc.last_line };

  if( !namcpy(loc, label.name, name) ) return NULL;
  auto p =  symbol_label_add(PROGRAM, &label);

  if( type == LblParagraph || type == LblSection ) {
    procedure_definition_add(PROGRAM, p);
  }

  assert( !(p->type == LblSection && p->parent > 0) );

  return p;
}

/*
 * Many label names are defined statically and so are guaranteed to be in
 * bounds. Often they are created far away from the yacc metavariables, so
 * there's no location to access.
 */
static struct cbl_label_t *
label_add( enum cbl_label_type_t type, const char name[], int line ) {
  YYLTYPE loc { line, 1, line, 1 };
  return label_add(loc, type, name);
}

cbl_label_t *
perform_t::ec_labels_t::new_label( cbl_label_type_t type,
				   const cbl_name_t role )
{
  size_t n = 1 + symbols_end() - symbols_begin();
  cbl_name_t name;
  sprintf(name, "_perf_%s_%zu", role, n);
  return label_add( type, name, yylineno );
}

/*
 * An unqualified procedure reference occurs within a section may refer to a:
 *   1.  section
 *   2.  paragraph, perhaps in a section, perhaps the current section.
 *
 * The named procedure need only be unique, either within the current section
 * or globally. A paragraph within one section may be referenced without
 * qualification in another section if its name is unique.
 *
 * An otherwise globally unique name is shadowed by the same name in the
 * current section, and the section-local name may be referenced before being
 * defined.  That is, given:
 *
 *   S1 SECTION.
 *     PROC.
 *       ...
 *   S2 SECTION.
 *     PERFORM PROC.
 *     PROC. ...
 *
 * the procedure performed is PROC OF S2.
 *
 * That creates a challenge for the compiler, because PROC appears to have been
 * defined when PERFORM is encountered.  When PROC OF S2 is defined, the parser
 * detects and corrects its misstep.
 */
static struct cbl_label_t *
paragraph_reference( const char name[], size_t section )
{
  // A reference has line == 0.  It is LblParagraph if the section is
  // explicitly named, else LblNone (because we don't know).
  struct cbl_label_t *p, label = { section? LblParagraph : LblNone, section };
  assert(strlen(name) < sizeof(label.name)); // caller ensures
  strcpy(label.name, name);
  if( label.type == LblNone ) assert(label.parent == 0);

  p = symbol_label_add(PROGRAM, &label);
  assert(p);

  const char *sect_name = section? cbl_label_of(symbol_at(section))->name : NULL;
  procedure_reference_add(sect_name, p->name, yylineno, current.program_section());

  return p;
}

void
current_t::repository_add_all() {
  assert( !programs.empty() );
  auto& repository = programs.top().function_repository;
  std::copy( function_descrs, function_descrs_end,
                  std::inserter(repository, repository.begin()) );
}

/*
 * A function is added to the symbol table when first named, in Identification
 * Division. It's also added to the current list of UDFs in current_t::udfs.
 * Its return type and parameters, if any, are defined later, in Procedure
 * Division.  When they are parsed, we call udf_update to finalize the
 * functions's descriptor, giving us enough information to validate the
 * arguments at point of invocation.
 */
void
current_t::udf_update( const ffi_args_t *ffi_args ) {
  auto L = cbl_label_of(symbol_at(program_index()));
  assert(L);
  assert(L->type == LblFunction);
  assert(L->returning);
  if( ! ffi_args ) return;
  assert(ffi_args->elems.size() < sizeof(function_descr_t::types));

  auto returning = cbl_field_of(symbol_at(L->returning));
  auto key = function_descr_t::init(L->name);
  auto func = udfs.find(key);
  assert(func != udfs.end());

  function_descr_t udf = *func;

  udf.ret_type = returning->type;
  udf.token = ffi_args->elems.empty()? FUNCTION_UDF_0 : FUNCTION_UDF;
  auto types = ffi_args->parameter_types();
  strcpy(udf.types, types);

  std::transform( ffi_args->elems.begin(), ffi_args->elems.end(),
		  std::back_inserter(udf.linkage_fields),
		  []( const cbl_ffi_arg_t& arg ) {
		    return function_descr_arg_t( field_index( arg.refer.field ),
						 arg.crv, arg.optional );
		  } );

  udfs.erase(func);
  auto result = udfs.insert(udf);
  assert(result.second);
}

bool
current_t::udf_args_valid( const cbl_label_t *L,
			   const std::list<cbl_refer_t>& args,
			   std::vector<function_descr_arg_t>& params /*out*/ )
{
  auto key = function_descr_t::init(L->name);
  auto func = udfs.find(key);
  assert(func != udfs.end());
  function_descr_t udf = *func;
  params = udf.linkage_fields;

  if( udf.linkage_fields.size() < args.size() ) {
    auto loc = symbol_field_location(field_index(args.back().field));
    error_msg(loc, "too many parameters for UDF %s", L->name);
    return false;
  }

  size_t i = 0;
  for( cbl_refer_t arg : args ) {
    if( arg.field ) { // else omitted
      auto tgt = cbl_field_of(symbol_at(udf.linkage_fields.at(i).isym));
      if( ! valid_move(tgt, arg.field) ) {
	auto loc = symbol_field_location(field_index(arg.field));
	error_msg(loc, "FUNCTION %s arg %zu, '%s' cannot be passed to %s, type %s",
		  L->name, i, arg.field->pretty_name(),
		  tgt->pretty_name(), 3 + cbl_field_type_str(tgt->type) );
	return false;
      }
    }
    i++;
  }
  return true;
}

bool
current_t::repository_add( const char name[]) {
  assert( !programs.empty() );
  function_descr_t arg = function_descr_t::init(name);
  auto parg = std::find( function_descrs, function_descrs_end, arg );
  if( parg == function_descrs_end ) return false;
  auto p = programs.top().function_repository.insert(*parg);
  if( yydebug ) {
    for( auto descr : programs.top().function_repository ) {
      dbgmsg("%s:%d: %-20s %-20s %-20s", __func__, __LINE__,
	    keyword_str(descr.token), descr.name, descr.cname);
    }
  }
  return p.second;
}

int
current_t::repository_in( const char name[]) {
  assert( !programs.empty() );
  auto isym = programs.top().program_index;
  // possible to call self
  auto self = cbl_label_of(symbol_at(isym));
  if( self->type == LblFunction ) {
    if( 0 == strcasecmp(self->name, name) ) {
      return FUNCTION_UDF;
    }
  }
  function_descr_t arg = function_descr_t::init(name);
  auto repository = programs.top().function_repository;
  auto p = repository.find(arg);
  return p != repository.end()? p->token : 0;
}

int repository_function_tok( const char name[] ) {
  return current.repository_in(name);
}

function_descr_t
function_descr_t::init( int isym ) {
  function_descr_t descr = { FUNCTION_UDF_0 };
  descr.ret_type = FldInvalid;
  auto L = cbl_label_of(symbol_at(isym));
  bool ok = namcpy(YYLTYPE(), descr.name, L->name);
  gcc_assert(ok);
  return descr;
}

arith_t::arith_t( cbl_arith_format_t format, refer_list_t * refers )
  : format(format), on_error(NULL), not_error(NULL)
{
  std::copy( refers->refers.begin(), refers->refers.end(), back_inserter(A) );
  refers->refers.clear();
  delete refers;
}


cbl_key_t::cbl_key_t( const sort_key_t& that )
  : ascending(that.ascending)
  , nfield(that.fields.size())
  , fields(NULL)
{
  if( nfield > 0 ) {
    fields = new cbl_field_t* [nfield];
    std::copy(that.fields.begin(), that.fields.end(), fields);
  }
}

static cbl_refer_t *
ast_op( cbl_refer_t *lhs, char op, cbl_refer_t *rhs ) {
  assert(lhs);
  assert(rhs);
  if( ! (is_numeric(lhs->field) && is_numeric(rhs->field)) ) {
    // If one of the fields isn't numeric, allow for index addition.
    switch(op) {
    case '+':
    case '-':
      // Simple addition OK for table indexes.
      if( lhs->field->type == FldIndex || rhs->field->type == FldIndex ) {
        goto ok;
      }
    }

    auto f  = !is_numeric(lhs->field)? lhs->field : rhs->field;
    auto loc = symbol_field_location(field_index(f));
    error_msg(loc, "'%s' is not numeric", f->name);
    return NULL;
  }
 ok:
  cbl_field_t skel = determine_intermediate_type( *lhs, op, *rhs );
  cbl_refer_t *tgt = new_reference_like(skel);
  if( !mode_syntax_only() ) {
    parser_op( *tgt, *lhs, op, *rhs, current.compute_label() );
  }
  return tgt;
}

static void
ast_add( arith_t *arith ) {
  size_t nC = arith->tgts.size(), nA = arith->A.size();
  std::vector <cbl_num_result_t> C(nC);
  cbl_num_result_t *pC;
  std::vector <cbl_refer_t> A(nA);
  cbl_refer_t *pA;

  pC = use_any(arith->tgts, C);
  pA = use_any(arith->A, A);

  parser_add( nC, pC, nA, pA, arith->format, arith->on_error, arith->not_error );

  ec_type_t handled = arith->on_error || arith->not_error ? ec_size_e : ec_none_e;
  current.declaratives_evaluate(handled);
}

static bool
ast_subtract( arith_t *arith ) {
  size_t nC = arith->tgts.size(), nA = arith->A.size(), nB = arith->B.size();
  std::vector <cbl_refer_t> A(nA);
  std::vector <cbl_refer_t> B(nB);
  std::vector <cbl_num_result_t> C(nC);

  cbl_refer_t *pA = use_any(arith->A, A);
  cbl_refer_t *pB = use_any(arith->B, B);
  cbl_num_result_t *pC = use_any(arith->tgts, C);

  parser_subtract( nC, pC, nA, pA, nB, pB, arith->format, arith->on_error, arith->not_error );

  ec_type_t handled = arith->on_error || arith->not_error ? ec_size_e : ec_none_e;
  current.declaratives_evaluate(handled);
  return true;
}

static bool
ast_multiply( arith_t *arith ) {
  size_t nC = arith->tgts.size(), nA = arith->A.size(), nB = arith->B.size();
  std::vector <cbl_refer_t> A(nA);
  std::vector <cbl_refer_t> B(nB);
  std::vector <cbl_num_result_t> C(nC);

  cbl_refer_t *pA = use_any(arith->A, A);
  cbl_refer_t *pB = use_any(arith->B, B);
  cbl_num_result_t *pC = use_any(arith->tgts, C);

  parser_multiply( nC, pC, nA, pA, nB, pB, arith->on_error, arith->not_error );

  ec_type_t handled = arith->on_error || arith->not_error ? ec_size_e : ec_none_e;
  current.declaratives_evaluate(handled);
  return true;
}

static bool
ast_divide( arith_t *arith ) {
  size_t nC = arith->tgts.size(), nA = arith->A.size(), nB = arith->B.size();
  std::vector <cbl_refer_t> A(nA);
  std::vector <cbl_refer_t> B(nB);
  std::vector <cbl_num_result_t> C(nC);

  cbl_refer_t *pA = use_any(arith->A, A);
  cbl_refer_t *pB = use_any(arith->B, B);
  cbl_num_result_t *pC = use_any(arith->tgts, C);

  parser_divide( nC, pC, nA, pA, nB, pB,
                 arith->remainder, arith->on_error, arith->not_error );

  ec_type_t handled = arith->on_error || arith->not_error ? ec_size_e : ec_none_e;
  current.declaratives_evaluate(handled);
  return true;
}

/*
 * Populate a parser API struct from lists built up by the parser.
 * The API doesn't use STL containers or classes that exist only for
 * the convenience of the parser.
*/
struct stringify_src_t : public cbl_string_src_t {
 stringify_src_t( const refer_marked_list_t& marked = refer_marked_list_t() )
   : cbl_string_src_t( marked.marker? *marked.marker : null_reference,
                       marked.refers.size(),
                       new cbl_refer_t[marked.refers.size()] )
  {
    std::copy( marked.refers.begin(), marked.refers.end(), inputs );
  }

  static void dump( const cbl_string_src_t& src ) {
    dbgmsg( "%s:%d:, %zu inputs delimited by %s:", __func__, __LINE__,
           src.ninput,
           src.delimited_by.field? field_str(src.delimited_by.field) : "SIZE" );
    std::for_each(src.inputs, src.inputs + src.ninput, dump_input);
  }

 protected:
  static void dump_input( const cbl_refer_t& refer ) {
    yywarn( "%s:\t%s", __func__, field_str(refer.field) );
  }
};

void
stringify( refer_collection_t *inputs,
           cbl_refer_t into, cbl_refer_t pointer,
           cbl_label_t  *on_error,
           cbl_label_t *not_error )
{
  std::vector <stringify_src_t> sources(inputs->lists.size());

  if( inputs->lists.back().marker == NULL ) {
    inputs->lists.back().marker = cbl_refer_t::empty();
  }
  assert( inputs->lists.back().marker );
  std::copy( inputs->lists.begin(), inputs->lists.end(), sources.begin() );
  parser_string( into, pointer, sources.size(), sources.data(), on_error, not_error );
}

void
unstringify( cbl_refer_t& src,
             refer_list_t *delimited,
             unstring_into_t * into,
             cbl_label_t  *on_error,
             cbl_label_t *not_error )
{
  size_t ndelimited = delimited? delimited->size() : 0;
  cbl_refer_t *pdelimited = NULL;
  std::vector <cbl_refer_t> delimiteds(ndelimited);
  if( ndelimited > 0 ) {
    pdelimited = use_any( delimited->refers, delimiteds );
  }

  std::vector <cbl_refer_t> outputs(into->size());
  into->use_list( outputs, unstring_tgt_t::tgt_of );

  std::vector <cbl_refer_t> delimiters(into->size());
  into->use_list( delimiters, unstring_tgt_t::delimiter_of );

  std::vector <cbl_refer_t> counts(into->size());
  into->use_list( counts, unstring_tgt_t::count_of );

  parser_unstring( src,
                   ndelimited, pdelimited,
                   // into
                   outputs.size(),
                   outputs.data(), delimiters.data(), counts.data(),
                   into->pointer, into->tally,
                   on_error, not_error );
  delete into;
}

static const char *
data_section_str( data_section_t section ) {
  switch(section) {
  case not_data_datasect_e:
    return "NONE";
  case local_storage_datasect_e:
    return "LOCAL";
  case file_datasect_e:
    return "FILE";
  case working_storage_datasect_e:
    return "WORKING";
  case linkage_datasect_e:
    return "LINKAGE";
  }
  gcc_unreachable();
  return NULL;
}

static bool
current_data_section_set(const YYLTYPE& loc,  data_section_t data_section ) {
  // order is mandatory
  if( data_section < current_data_section ) {
    error_msg(loc, "%s SECTION must precede %s SECTION",
	      data_section_str(data_section),
	      data_section_str(current_data_section));
    return false;
  }

  cbl_section_type_t type = file_sect_e;

  switch(data_section) {
  case not_data_datasect_e:
    gcc_unreachable();
    break;
  case file_datasect_e:
    type = file_sect_e;
    break;
  case working_storage_datasect_e:
    type = working_sect_e;
    break;
  case local_storage_datasect_e:
    type = local_sect_e;
    break;
  case linkage_datasect_e:
    type = linkage_sect_e;
    break;
  }

  cbl_section_t section = { type, yylineno, NULL };

  if( ! symbol_section_add(PROGRAM, &section) ) {
    error_msg(loc, "could not add section %s to program %s, exists line %d",
              section.name(), current.program()->name,
              symbol_section(PROGRAM, &section)->line );
    return false;
  }

  current_data_section = data_section ;
  return true;
}

void apply_declaratives() {
  // look for declaratives for this procedure, and all procedures
  bool tf[2] = { false, true };
  for( bool *yn = tf; yn < tf + COUNT_OF(tf); yn++ ) {
    auto declaratives = current.debugging_declaratives(*yn);
    for( auto p  = declaratives.begin() ;
         p != declaratives.end(); p++ ) {
      // TODO: delarative for PARA OF SECTION
      cbl_label_t *label = symbol_label(PROGRAM, LblNone, 0, p->c_str());
      assert(label);
      parser_perform(label);
    }
  }
}
#define FIG_CONST(X) constant_of(constant_index((X)))

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

int warn_abi_version = -1;
int cp_unevaluated_operand;
void
lang_check_failed (const char* file, int line, const char* function) {}

#pragma GCC diagnostic pop

void ast_inspect( cbl_refer_t& input, bool backward, ast_inspect_list_t& inspects ) {
  if( yydebug ) {
    dbgmsg("%s:%d: INSPECT %zu operations on %s, line %d", __func__, __LINE__,
          inspects.size(), input.field->name, yylineno);
  }
  std::for_each(inspects.begin(), inspects.end(), dump_inspect);
  auto array = inspects.as_array();
  parser_inspect( input, backward, inspects.size(), array );
  delete[] array;
}

static const char *
cbl_refer_str( char output[], const cbl_refer_t& R ) {
  sprintf( output, "refer = %s %s %s",
           R.field? field_str(R.field) : "(none)",
           R.is_table_reference()? "(table)" : "",
           R.is_refmod_reference()? "(refmod)" : "" );
  return output;
}

static void
dump_inspect_match( const cbl_inspect_match_t& M ) {
  static char fields[3][4 * 64];
  cbl_refer_str(fields[0], M.matching);
  cbl_refer_str(fields[1], M.before.identifier_4);
  cbl_refer_str(fields[2], M.after.identifier_4);

  yywarn( "matching %s \n\t\tbefore %s%s \n\t\tafter  %s%s",
         fields[0],
         M.before.initial? "initial " : "", fields[1],
         M.after.initial?  "initial " : "", fields[2] );
}

static void
dump_inspect_replace( const cbl_inspect_replace_t& R ) {
  static char fields[4][4 * 64];
  cbl_refer_str(fields[0], R.matching);
  cbl_refer_str(fields[1], R.before.identifier_4);
  cbl_refer_str(fields[2], R.after.identifier_4);
  cbl_refer_str(fields[3], R.replacement);

  yywarn( "matching    %s \n\treplacement %s\n\t\tbefore %s%s \n\t\tafter  %s%s",
         fields[0], fields[3],
         R.before.initial? "initial " : "", fields[1],
         R.after.initial?  "initial " : "", fields[2] );
}

static const char *
bound_str( cbl_inspect_bound_t bound ) {
  switch(bound) {
  case bound_characters_e: return "characters";
  case bound_all_e: return "all";
  case bound_first_e: return "first";
  case bound_leading_e: return "leading";
  case bound_trailing_e: return "trailing";
  }
  return "bound?";
}

/*
 * INITIALIZE
 */
static data_category_t
data_category_of( const cbl_refer_t& refer ) {
  assert(refer.field);
  switch( refer.field->type ) {
  case FldInvalid:
    assert(refer.field->type != FldInvalid);
    return data_category_none;

  case FldGroup:
    return data_category_none;

  case FldLiteralA:
  case FldAlphanumeric:
    return refer.field->has_attr(all_alpha_e)?
      data_alphabetic_e : data_alphanumeric_e;

  case FldNumericBinary:
  case FldFloat:
  case FldNumericBin5:
  case FldPacked:
  case FldNumericDisplay:
  case FldLiteralN:
    return data_numeric_e;

  case FldNumericEdited:
    return data_numeric_edited_e;
  case FldAlphaEdited:
    return data_alphanumeric_edited_e;

  case FldPointer:
    return data_data_pointer_e;

  case FldClass:
  case FldConditional:
  case FldForward:
  case FldIndex:
  case FldSwitch:
  case FldDisplay:
  case FldBlob:
    return data_category_none;
  }
  gcc_unreachable();
  return data_category_none;
}

static bool
valid_target( const cbl_refer_t& refer ) {
  assert(refer.field);
  switch( refer.field->type ) {
  case FldInvalid:
    assert(refer.field->type != FldInvalid);
    return false;
  case FldGroup:
  case FldAlphanumeric:
  case FldNumericBinary:
  case FldFloat:
  case FldNumericBin5:
  case FldPacked:
  case FldNumericDisplay:
  case FldNumericEdited:
  case FldAlphaEdited:
  case FldPointer:
    return true;
  case FldLiteralA:
  case FldLiteralN:
  case FldClass:
  case FldConditional:
  case FldForward:
  case FldIndex:
  case FldSwitch:
  case FldDisplay:
  case FldBlob:
    return false;
  }
  gcc_unreachable();
  return false;
}

static REAL_VALUE_TYPE
numstr2i( const char input[], radix_t radix ) {
  REAL_VALUE_TYPE output;
  size_t integer = 0;
  int erc=0;

  switch( radix ) {
  case decimal_e: { // Use decimal point for comma, just in case.
      auto local = xstrdup(input);
      if( !local ) { erc = -1; break; }
      std::replace(local, local + strlen(local), ',', '.');
      real_from_string3 (&output, local, TYPE_MODE (float128_type_node));
    }
    break;
  case hexadecimal_e:
    erc = sscanf(input, "%zx", &integer);
    real_from_integer (&output, VOIDmode, integer, UNSIGNED);
    break;
  case boolean_e:
    for( const char *p = input; *p != '\0'; p++ ) {
      if( ssize_t(8 * sizeof(integer) - 1) < p - input ) {
        yywarn("'%s' was accepted as %d", input, integer);
        break;
      }
      switch(*p) {
        case '0':
        case '1':
          integer = (integer << (p - input));
          integer |= ((*p) == '0' ? 0 : 1);
          break;
      default:
        yywarn("'%s' was accepted as %d", input, integer);
	break;
      }
    }
    real_from_integer (&output, VOIDmode, integer, UNSIGNED);
    return output;
  }
  if( erc == -1 ) {
    yywarn("'%s' was accepted as %lld", input, output);
  }
  return output;
}

static inline cbl_field_t *
new_literal( const char initial[], enum radix_t radix ) {
  auto attr = constant_e;

  switch( radix ) {
  case decimal_e:
    break;
  case hexadecimal_e:
    attr = hex_encoded_e;
    break;
  case boolean_e:
    attr = bool_encoded_e;
    break;
  }
  return new_literal(strlen(initial), initial,
                     cbl_field_attr_t(constant_e | attr));
}

class is_elementary_type { // for INITIALIZE purposes
  bool with_filler;
public:
  is_elementary_type( bool with_filler ) : with_filler(with_filler) {}

  bool operator()( const symbol_elem_t& elem ) const {
    if( elem.type != SymField ) return false;
    const cbl_field_t *f = cbl_field_of(&elem);
    if( symbol_redefines(f) ) return false;
    return ( f->has_attr(filler_e) && with_filler )
      || ::is_elementary(f->type);
  }
};

size_t end_of_group( size_t igroup );

static std::list<cbl_refer_t>
symbol_group_data_members( cbl_refer_t refer, bool with_filler ) {
  std::list<cbl_refer_t> refers;
  refers.push_front( refer );

  if( refer.field->type != FldGroup ) return refers;

  class refer_of : public cbl_refer_t {
   public:
    refer_of( const cbl_refer_t& refer ) : cbl_refer_t(refer) {}
    cbl_refer_t operator()( symbol_elem_t& elem ) {
      this->field = cbl_field_of(&elem); // preserve subscript/refmod
      return *this;
    }
  };

  size_t igroup = field_index(refer.field), eogroup = end_of_group(igroup);
  std::list<symbol_elem_t> elems;
  is_elementary_type is_elem(with_filler);

  std::copy_if( symbols_begin(igroup), symbols_begin(eogroup),
                std::back_inserter(elems), [is_elem]( const symbol_elem_t& elem ) {
                  return is_elem(elem) || cbl_field_of(&elem)->occurs.ntimes() > 0; } );
  std::transform( elems.begin(), elems.end(),
                  std::back_inserter(refers), refer_of(refer) );
  return refers;
}

struct expand_group : public std::list<cbl_refer_t> {
  static cbl_refer_t referize( cbl_field_t *field ) {
    return cbl_refer_t(field);
  }
  bool with_filler;
  expand_group( bool with_filler ) : with_filler(with_filler) {}

  void operator()( const cbl_refer_t& refer ) {
    assert(refer.field);
    if( refer.field->type != FldGroup ) {
      push_back(refer);
      return;
    }
    std::list<cbl_refer_t> members = symbol_group_data_members( refer,
                                                                with_filler );
    std::copy( members.begin(), members.end(), back_inserter(*this) );
  }
};


static const char * initial_default_value;
       const char * wsclear() { return initial_default_value; }

void
wsclear( char ch ) {
  static char byte = ch;
  initial_default_value = &byte;
  current.program_needs_initial();
}

static void
initialize_allocated( cbl_refer_t input ) {
  cbl_num_result_t result = { truncation_e, input };
  std::list<cbl_num_result_t> results;
  results.push_back(result);
  initialize_statement(results, true,
		       data_category_all, category_map_t());
}

static int
initialize_with( cbl_refer_t tgt ) {
  if( tgt.field->type == FldPointer ) return ZERO;
  if( tgt.is_refmod_reference() ) return SPACES;
  return is_numeric(tgt.field)? ZERO : SPACES;
}

static bool
initialize_one( cbl_num_result_t target, bool with_filler,
                data_category_t value_category,
                const category_map_t& replacements,
                bool explicitly )
{
  cbl_refer_t& tgt( target.refer );
  if( ! valid_target(tgt) ) return false;

  // Rule 1 c: is valid for VALUE, REPLACING, or DEFAULT
  // If no VALUE (category none), set to blank/zero.
  if( value_category == data_category_none && replacements.empty() ) {
    auto token = initialize_with(tgt);
    auto src = constant_of(constant_index(token));
    cbl_refer_t source(src);
    auto s = wsclear();
    if( s ) {
      char ach[5];
      int v = *s;
      sprintf(ach, "%d", v);
      source.field = new_literal(ach);
      source.addr_of = true;
    }

    if( tgt.field->type == FldPointer ) {
      parser_set_pointers(1, &tgt, source);
    } else {
      parser_move(tgt, src, current_rounded_mode());
    }
    return true;
  }

  /*
   *  Either VALUE or REPLACING specified.
   */

  if( value_category == data_category_all ||
      value_category == data_category_of(tgt) ) {
    // apply any applicable VALUE
    if( explicitly || tgt.field->data.initial ) {
      assert( with_filler || !tgt.field->has_attr(filler_e) );
      if( tgt.field->data.initial ) {
        parser_initialize(tgt);
      }
    }
  }

  // apply REPLACING, possibly overwriting VALUE
  // N.B., may be wrong:
  /*
   * "If the data item does not qualify as a receiving-operand because of the
   *  VALUE phrase, but does qualify because of the REPLACING phrase ..."
  */
  auto r = replacements.find(data_category_of(tgt));
  if( r != replacements.end() ) {
    parser_move( tgt, *r->second );

    return true;
  }

  return true;
}

typedef std::pair<cbl_field_t*,cbl_field_t*> field_span_t;
typedef std::pair<size_t, size_t>  cbl_bytespan_t;

/*
 * After the 1st record is initialized, copy it to the others.
 */
static bool
initialize_table( cbl_num_result_t target,
		  size_t nspan, const cbl_bytespan_t spans[],
		  const std::list<cbl_subtable_t>& subtables )
{
  assert( target.refer.nsubscript == dimensions(target.refer.field) );
  const cbl_refer_t& src( target.refer );
  size_t n( src.field->occurs.ntimes());
  assert( 0 < n );

  size_t isym( field_index(src.field) );
  std::vector <cbl_subtable_t> tbls(subtables.size());
  std::copy( subtables.begin(), subtables.end(), tbls.begin() );
  parser_initialize_table( n, src, nspan, spans, isym, tbls.size(), tbls.data() );
  return true;
}

static cbl_refer_t
synthesize_table_refer( cbl_refer_t tgt ) {
  // For a table, use supplied subscripts or start with 1.
  auto ndim( dimensions(tgt.field) );
  if( tgt.nsubscript < ndim ) { // it's an incomplete table
    std::vector <cbl_refer_t> subscripts(ndim);
    for( size_t i=0; i < ndim; i++ ) {
      if( i < tgt.nsubscript ) {
	subscripts[i] = tgt.subscripts[i];
	continue;
      }
      subscripts[i].field = new_tempnumeric();
      parser_set_numeric(subscripts[i].field, 1);
    }
    return cbl_refer_t( tgt.field, subscripts.size(), subscripts.data() );
  }
  return tgt;
}

static size_t
group_offset( const cbl_field_t *field ) {
  if( field->parent ) {
    auto e = symbol_at(field->parent);
    if( e->type == SymField ) {
      auto parent = cbl_field_of(e);
      return field->offset - parent->offset;
    }
  }
  return field->offset;
}

static bool
initialize_statement( const cbl_num_result_t& target, bool with_filler,
                      data_category_t value_category,
                      const category_map_t& replacements,
                      size_t depth = 0 )
{
  const cbl_refer_t& tgt( target.refer );
  assert(dimensions(tgt.field) == tgt.nsubscript || 0 < depth);
  assert(!is_literal(tgt.field));

  if( tgt.field->type == FldGroup ) {
    if( tgt.field->data.initial )   goto initialize_this;
    if( tgt.is_refmod_reference() ) goto initialize_this;
    // iterate over group memebers
    auto imember = field_index(tgt.field);
    auto eogroup = end_of_group(imember);
    bool fOK = true;
    std::list<cbl_field_t*> members;
    std::list<cbl_subtable_t> subtables;

    while( ++imember < eogroup ) {
        auto e = symbol_at(imember);
        if( e->type != SymField ) continue;
        auto f = cbl_field_of(e);
        if( ! (f->type == FldGroup || is_elementary(f->type)) ) continue;
        if( ! symbol_redefines(f) ) {
	  members.push_back(f);
	  if( is_table(f) ) {
	    size_t offset = group_offset(f);
	    subtables.push_back( cbl_subtable_t { offset, imember } );
	  }
          cbl_num_result_t next_target(target);
	  next_target.refer.field = f;
          // recurse on each member, which might be a table or group
          fOK = fOK && initialize_statement( next_target, with_filler, value_category,
                                             replacements, 1 + depth );
        }
        if( f->type == FldGroup ) {
          imember = end_of_group(imember) - 1;
        }
    }

    if( fOK && is_table(tgt.field) ) {
      cbl_num_result_t output = { target.rounded, synthesize_table_refer(tgt) };
      if( tgt.nsubscript < output.refer.nsubscript ) { // tgt is whole table
	std::list<field_span_t> field_spans;
	static const field_span_t empty_span = { NULL, NULL };
	field_span_t span = empty_span;
	bool honor_filler = false;
	// construct non-filler field spans
	for( auto member : members ) {
	  if( !with_filler && member->has_attr(filler_e) ) {
	    if( span.first ) { // conclude the span and begin to skip filler
	      field_spans.push_back(span);
	      span = empty_span;
	      honor_filler = true;
	    }
	    continue;
	  }
	  if( span.first ) {
	    span.second = member; // extend the span
	  } else {
	    span.first = member;  // start a new span
	  }
	}
	if( span.first ) {
	  field_spans.push_back(span);
	}
	// convert field spans to byte ranges
	std::vector <cbl_bytespan_t> ranges( field_spans.size() );
	size_t nrange = 0;
	if( honor_filler ) {
	  nrange = ranges.size();
	  std::transform( field_spans.begin(), field_spans.end(), ranges.begin(),
			  []( const auto& span ) {
			    size_t first, second;
			    first = second = group_offset(span.first);
			    if( ! span.second ) {
			      second += std::max(span.first->data.capacity,
						 span.first->data.memsize);
			    } else {
			      second = group_offset(span.second)
				     - group_offset(span.first);
			      second += std::max(span.second->data.capacity,
						 span.second->data.memsize);
			    }
			    return std::make_pair(first, second);
			  } );
	}
	return initialize_table( output, nrange, ranges.data(), subtables );
      }
    }
    return fOK;
  }

  if( !is_elementary(tgt.field->type) ) return false;

  assert(is_elementary(tgt.field->type));
  assert(data_category_of(tgt) != data_category_none);

  /*
   * Initialize elementary field.
   */

 initialize_this:
  // Cannot initialize constants
  if( is_constant(tgt.field) ) {
    auto loc = symbol_field_location(field_index(tgt.field));
    error_msg(loc, "%s is constant", name_of(tgt.field));
    return false;
  }
  // Ignore filler unless instructed otherwise.
  if( !with_filler && tgt.field->has_attr(filler_e) ) return true;

  cbl_num_result_t output = { target.rounded, synthesize_table_refer(tgt) };

  bool fOK = initialize_one( output, with_filler, value_category,
			     replacements, depth == 0 );

  if( fOK && is_table(tgt.field) ) {
    return initialize_table( output,
			     0, NULL, std::list<cbl_subtable_t>() );
  }

  return fOK;
}

const char *
data_category_str( data_category_t category ) {
  switch(category) {
  case data_category_none: return "category_none";
  case data_category_all: return "category_all";
  case data_alphabetic_e: return "alphabetic";
  case data_alphanumeric_e: return "alphanumeric";
  case data_alphanumeric_edited_e: return "alphanumeric_edited";
  case data_boolean_e: return "data_boolean";
  case data_data_pointer_e: return "data_data_pointer";
  case data_function_pointer_e: return "data_function_pointer";
  case data_msg_tag_e: return "data_msg_tag";
  case data_dbcs_e: return "dbcs";
  case data_egcs_e: return "egcs";
  case data_national_e: return "national";
  case data_national_edited_e: return "national_edited";
  case data_numeric_e: return "numeric";
  case data_numeric_edited_e: return "numeric_edited";
  case data_object_referenc_e: return "data_object_referenc";
  case data_program_pointer_e: return "data_program_pointer";
 }
  return "???";
}

static void
initialize_statement( std::list<cbl_num_result_t>& tgts, bool with_filler,
                     data_category_t value_category,
                     const category_map_t& replacements) {

  bool is_refmod = std::any_of( tgts.begin(), tgts.end(),
				[]( const auto& tgt ) {
				  return tgt.refer.is_refmod_reference();
				} );
  if( false && is_refmod ) { // refmod seems valid per ISO
    dbgmsg("INITIALIZE cannot initialize a refmod");
    return;
  }

  for( auto tgt : tgts ) {
    initialize_statement( tgt, with_filler, value_category,
                         replacements );
  }
  tgts.clear();
}

static void
dump_inspect_oper( const cbl_inspect_oper_t& op ) {
  dbgmsg("\t%s: %zu \"matches\", %zu \"replaces\"",
        bound_str(op.bound),
        op.matches? op.n_identifier_3 : 0, op.replaces? op.n_identifier_3 : 0);
  if( op.matches )
    std::for_each(op.matches, op.matches + op.n_identifier_3, dump_inspect_match);
  if( op.replaces )
    std::for_each(op.replaces, op.replaces + op.n_identifier_3, dump_inspect_replace);
}

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"

static void
dump_inspect( const cbl_inspect_t& I ) {
  if( !yydebug ) return;
  if( I.tally.field ) {
    fprintf( stderr, "\tTALLYING to %s %s %s:\n",
             field_str(I.tally.field),
             I.tally.is_table_reference()? "(table)" : "",
             I.tally.is_refmod_reference()? "(refmod)" : "" );
  } else {
    fprintf( stderr, "\tREPLACING:\n" );
  }
  std::for_each( I.opers, I.opers + I.nbound, dump_inspect_oper );
}
#pragma GCC diagnostic pop

#include <iterator>

struct declarative_file_list_t : protected cbl_declarative_t {
  declarative_file_list_t( const cbl_declarative_t& d )
    : cbl_declarative_t(d)
    {
      if( nfile > 0 )
        assert(d.files[0] == this->files[0]);
    }
  static std::ostream&
  splat( std::ostream& os, const declarative_file_list_t& dcl ) {
    static int i=0;

    os << "static size_t dcl_file_list_" << i++
       << "[" << dcl.nfile << "] = { ";
    std::ostream_iterator<size_t> out(os, ", ");
    std::copy( dcl.files, dcl.files + dcl.nfile, out );
    return os << "};";
  }
};

std::ostream&
operator<<( std::ostream& os, const declarative_file_list_t& dcl ) {
  return dcl.splat( os, dcl );
}

static declarative_file_list_t
file_list_of( const cbl_declarative_t& dcl ) {
  return dcl;
}

std::ostream&
operator<<( std::ostream& os, const cbl_declarative_t& dcl ) {
  static int i=0;

  return os <<
    "\t{ " << dcl.section << ", "
           << std::boolalpha << dcl.global << ", "
           << ec_type_str(dcl.type) << ", "
           << dcl.nfile << ", "
           << "dcl_file_list_" << i++ << ", "
           << cbl_file_mode_str(dcl.mode) << " }"
           << std::flush;
}

void parser_add_declaratives( size_t n, cbl_declarative_t *declaratives) {
  const char *prog = cbl_label_of(symbol_at(PROGRAM))->name;
  char *filename = xasprintf("declaratives.%s.h", prog);
  std::ofstream os(filename);
  {
    std::ostream_iterator<declarative_file_list_t> out(os, "\n");
    std::transform( declaratives, declaratives + n, out, file_list_of );
  }
  os << "\nstatic cbl_declarative_base_t declaratives[] = {\n";
  std::ostream_iterator<cbl_declarative_t> out(os, ", \n");
  std::copy( declaratives, declaratives + n, out );
  os << "};\n" << std::endl;
}

cbl_field_t *
new_literal( const literal_t& lit, enum cbl_field_attr_t attr ) {
  bool zstring = lit.prefix[0] == 'Z';
  if( !zstring && lit.data[lit.len] != '\0' ) {
    dbgmsg("%s:%d: line %d, no NUL terminator '%-*.*s'{%zu/%zu}",
          __func__, __LINE__, yylineno,
          int(lit.len), int(lit.len),
          lit.data, strlen(lit.data), lit.len);
  }
  assert(zstring || lit.data[lit.len] == '\0');

  size_t attrs(attr);
  attrs |= constant_e;
  attrs |= literal_attr(lit.prefix);

  return new_literal(lit.len, lit.data, cbl_field_attr_t(attrs));
}

bool
cbl_file_t::validate_forward( size_t isym ) const {
  if( isym > 0 && FldForward == symbol_field_forward(isym)->type ) {
    auto loc = symbol_field_location(isym);
    error_msg(loc, "line %d: %s of %s is not defined",
              this->line, cbl_field_of(symbol_at(isym))->name,
              this->name );
    return false;
  }
  return true;
}

bool
cbl_file_t::validate_key( const cbl_file_key_t& key ) const {
  for( auto f = key.fields; f < key.fields + key.nfield; f++ ) {
    if( ! validate_forward(*f) ) return false;
  }
  return true;
}

bool
cbl_file_t::validate() const {
  size_t members[] = { user_status, vsam_status, record_length };
  bool tf = true;

  for( auto isym : members ) {
    if( ! validate_forward(isym) ) tf = false;
  }

  for( auto p = keys; p < keys + nkey; p++ ) {
    if( ! validate_key(*p) ) tf = false;
  }

  return tf;
}

bool
cbl_file_lock_t::mode_set( int token ) {
  switch( token ) {
  case MANUAL:    mode = manual_e; break;
  case RECORD:    mode = record_e; break;
  case AUTOMATIC: mode = automatic_e; break;
  default:
    return  false;
  }
  return true;
}

enum cbl_figconst_t
cbl_figconst_of( const char *value ) {
  struct values_t {
    const char *value; cbl_figconst_t type;
  } static const values[] = {
    { constant_of(constant_index(ZERO))->data.initial, zero_value_e },
    { constant_of(constant_index(SPACES))->data.initial, space_value_e },
    { constant_of(constant_index(HIGH_VALUES))->data.initial, high_value_e },
    { constant_of(constant_index(LOW_VALUES))->data.initial, low_value_e },
    { constant_of(constant_index(QUOTES))->data.initial, quote_value_e },
    { constant_of(constant_index(NULLS))->data.initial, null_value_e },
  }, *eovalues = values + COUNT_OF(values);

  auto p = std::find_if( values, eovalues,
                         [value]( const values_t& elem ) {
                           return elem.value == value;
                         } );

  return p == eovalues? normal_value_e : p->type;
}

cbl_field_attr_t
literal_attr( const char prefix[] ) {
  switch(strlen(prefix)) {
  case 0: return none_e;

  case 1:
    switch(prefix[0]) {
    case 'B': return bool_encoded_e;
    case 'N': cbl_unimplemented("National"); return none_e;
    case 'X': return hex_encoded_e;
    case 'Z': return quoted_e;
    }
    break;

  case 2:
    switch(prefix[1]) {
    case 'X':
      switch(prefix[0]) {
      case 'B': return cbl_field_attr_t(hex_encoded_e | bool_encoded_e);
      case 'N': cbl_unimplemented("National"); return none_e;
      }
      break;
    }
  }

  // must be [BN]X
  cbl_internal_error("'%s': invalid literal prefix", prefix);
  gcc_unreachable();
  return none_e;
}

bool
cbl_field_t::has_subordinate( const cbl_field_t *that ) const {
  while( (that = parent_of(that)) != NULL ) {
    if( field_index(this) == field_index(that) ) return true;
  }
  return false;
}

const char *
cbl_field_t::value_str() const {
    if( data.etc_type == cbl_field_data_t::value_e )
	return string_of( data.value_of() );
    return "???";
}

static const cbl_division_t not_syntax_only = cbl_division_t(-1);
             cbl_division_t cbl_syntax_only = not_syntax_only;

void
mode_syntax_only( cbl_division_t division ) {
  cbl_syntax_only = division;
}

// Parser moves to syntax-only mode if data-division errors preclude compilation.
bool
mode_syntax_only() {
  return cbl_syntax_only != not_syntax_only
    && cbl_syntax_only <= current_division;
}

void
cobol_dialect_set( cbl_dialect_t dialect ) {
  cbl_dialect = dialect;
  if( dialect & dialect_ibm_e ) cobol_gcobol_feature_set(feature_embiggen_e);
}
cbl_dialect_t cobol_dialect() { return cbl_dialect; }

static bool internal_ebcdic_locked = false;

void internal_ebcdic_lock() {
  internal_ebcdic_locked = true;
}
void internal_ebcdic_unlock() {
  internal_ebcdic_locked = false;
}

bool
cobol_gcobol_feature_set( cbl_gcobol_feature_t gcobol_feature, bool on ) {
  if( gcobol_feature == feature_internal_ebcdic_e ) {
    if( internal_ebcdic_locked ) return false;
  }
  if( on ) {
    cbl_gcobol_features |= gcobol_feature;
  } else {
    cbl_gcobol_features &= ~gcobol_feature;
  }
  return true;
}

static bool
literal_refmod_valid( YYLTYPE loc, const cbl_refer_t& r ) {
  if( r.field->has_attr(any_length_e) ) return true;

  const cbl_span_t& refmod(r.refmod);

  if( ! is_literal(refmod.from->field) ) {
    if( ! refmod.len ) return true;
    if( ! is_literal(refmod.len->field) ) return true;
    auto edge = refmod.len->field->as_integer();
    if( 0 < edge ) {
      if( edge-1 < r.field->data.capacity ) return true;
    }
    // len < 0 or not: 0 < from + len <= capacity
    error_msg(loc, "%s(%s:%zu) out of bounds, "
	           "size is %u",
	      r.field->name,
	      refmod.from->name(),
	      size_t(edge),
	      static_cast<unsigned int>(r.field->data.capacity) );
    return false;
  }

  auto edge = refmod.from->field->as_integer();
  if( edge > 0 ) {
    if( --edge < r.field->data.capacity ) {
      if( ! refmod.len ) return true;
      if( ! is_literal(refmod.len->field) ) return true;
      auto len = refmod.len->field->as_integer();
      if( len > 0 ) {
	edge += len;
	if( --edge < r.field->data.capacity ) return true;
      }
      // len < 0 or not: 0 < from + len <= capacity
      auto loc = symbol_field_location(field_index(r.field));
      error_msg(loc, "%s(%zu:%zu) out of bounds, "
		"size is %u",
		r.field->name,
		size_t(refmod.from->field->as_integer()),
		size_t(len),
		static_cast<unsigned int>(r.field->data.capacity) );
      return false;
    }
  }
  // not: 0 < from <= capacity
  error_msg(loc,"%s(%zu) out of bounds, size is %u",
	    r.field->name,
	    size_t(refmod.from->field->as_integer()),
	    static_cast<unsigned int>(r.field->data.capacity) );
  return false;
}

const cbl_field_t *
literal_subscript_oob( const cbl_refer_t& r, size_t& isub );

static bool
literal_subscripts_valid( YYLTYPE loc, const cbl_refer_t& name ) {
  static char subs[ 7 * 32 ], *esub = subs + sizeof(subs);
  char *p = subs;
  size_t isub;

  // Find subscript in the supplied refer
  const cbl_field_t *oob = literal_subscript_oob(name, isub);
  if( oob ) {
    const char *sep = "";
    for( auto r = name.subscripts; r < name.subscripts + name.nsubscript; r++ ) {
      snprintf( p, esub - p, "%s%s", sep, nice_name_of(r->field) );
      sep = " ";
    }

    const char *upper_phrase = "";
    if( ! oob->occurs.bounds.fixed_size() ) {
      static char ub[32] = "boo";
      sprintf(ub, " to %lu", oob->occurs.bounds.upper);
      upper_phrase = ub;
    }

    // X(0): subscript 1 of for out of range for 02 X OCCURS 4 to 6
    error_msg(loc, "%s(%s): subscript %zu out of range "
                   "for %s %s OCCURS %lu%s",
	      oob->name, subs, 1 + isub,
	      oob->level_str(), oob->name,
	      oob->occurs.bounds.lower, upper_phrase );
    return false;
  }
  return true;
}

static void
subscript_dimension_error( YYLTYPE loc, size_t nsub, const cbl_refer_t *scalar ) {
  if( 0 == dimensions(scalar->field) ) {
    error_msg(loc, "%zu subscripts provided for %s, "
              "which has no dimensions",
              nsub, scalar->name() );
  } else {
    error_msg(loc, "%zu subscripts provided for %s, "
              "which requires %zu dimensions",
              nsub, scalar->name(), dimensions(scalar->field) );
  }
}

static void
reject_refmod( YYLTYPE loc, cbl_refer_t scalar ) {
  if( scalar.is_refmod_reference() ) {
    error_msg(loc, "%s cannot be reference-modified here", scalar.name());
  }
}

static bool
require_pointer( YYLTYPE loc, cbl_refer_t scalar ) {
  if( scalar.field->type != FldPointer ) {
    error_msg(loc, "%s must have USAGE POINTER", scalar.name());
    return false;
  }
  return true;
}

static bool
require_numeric( YYLTYPE loc, cbl_refer_t scalar ) {
  if( ! is_numeric(scalar.field) ) {
    error_msg(loc, "%s must have numeric USAGE", scalar.name());
    return false;
  }
  return true;
}

/* eval methods */

eval_subject_t::eval_subject_t()
  : result( new_temporary(FldConditional) )
{
  labels.when = label("when");
  labels.yeah = label("yeah");
  labels.done = label("done");
  pcol = columns.begin();
}

cbl_label_t *
eval_subject_t::label( const char skel[] ) {
  static const cbl_label_t protolabel = { LblEvaluate };
  cbl_label_t label = protolabel;
  label.line = yylineno;
  size_t n = 1 + symbols_end() - symbols_begin();
  snprintf(label.name, sizeof(label.name), "_eval_%s_%zu", skel, n);
  auto output = symbol_label_add( PROGRAM, &label );
  return output;
}

bool
eval_subject_t::compatible( const cbl_field_t *object ) const {
  assert(pcol != columns.end());
  assert(pcol->field);
  auto subject(pcol->field);
  if( subject->type != object->type ) {
    if( is_conditional(subject) ) {
      return is_conditional(object);
    }
    return ! is_conditional(object);
  }
  return true;
}


cbl_field_t *
eval_subject_t::compare( int token ) {
  size_t tf( very_false_register() );

  switch( token ) {
  case ANY:
    parser_logop(result,
		 field_at(very_true_register()), and_op,
		 field_at(very_true_register()));
    break;
  case TRUE_kw:
    tf = very_true_register();
    __attribute__((fallthrough));
  case FALSE_kw:
    assert( is_conditional(pcol->field) );
    parser_logop(this->result, pcol->field, xnor_op, field_at(tf));
    break;
  default:
    assert(token == -1 && false );
    break;
  }
  return result;
}

cbl_field_t *
eval_subject_t::compare( relop_t op, const cbl_refer_t& object, bool deciding ) {
  auto subject(*pcol);
  if( compatible(object.field) ) {
    if( ! is_conditional(subject.field) ) {
      auto result = deciding? this->result : new_temporary(FldConditional);
      parser_relop(result, subject, op, object);
      return result;
      }
    }
  if( yydebug ) {
    dbgmsg("%s:%d: failed for %s %s %s",
	  __func__, __LINE__,
	  name_of(subject.field), relop_str(op), name_of(object.field));
  }
  return nullptr;
}

cbl_field_t *
eval_subject_t::compare( const cbl_refer_t& object,
			 const cbl_refer_t& object2 ) {
  auto subject(*pcol);

  if( ! compatible( object.field ) ) {
    if( yydebug ) {
      dbgmsg("%s:%d: failed for %s %s",
	    __func__, __LINE__,
	    name_of(subject.field), name_of(object.field));
    }
    return nullptr;
  }
  if( object2.field ) {
    if( ! compatible( object2.field ) ) {
      if( yydebug ) {
	dbgmsg("%s:%d: failed for %s %s",
	      __func__, __LINE__,
	      name_of(subject.field), name_of(object2.field));
      }
      return nullptr;
    }
  }

  if( is_conditional(subject.field) ) {
    assert( object2.field == nullptr );
    parser_logop(result, subject.field, xnor_op, object.field);
    return result;
  }

  if( object2.field ) {
    assert( ! is_conditional(object.field) );
    assert( ! is_conditional(object2.field) );

    cbl_field_t * gte = new_temporary(FldConditional);
    cbl_field_t * lte = new_temporary(FldConditional);

    parser_relop( gte, object, le_op, subject );
    parser_relop( lte, subject, le_op, object2 );

    parser_logop(result, gte, and_op, lte);
    return result;
  }

  parser_relop(result, subject, eq_op, object);
  return result;
}
